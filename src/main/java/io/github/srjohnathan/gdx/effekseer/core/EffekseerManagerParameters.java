/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class EffekseerManagerParameters {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected EffekseerManagerParameters(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(EffekseerManagerParameters obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  static public class UpdateParameter {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected UpdateParameter(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(UpdateParameter obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GDXJNI.delete_EffekseerManagerParameters_UpdateParameter(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setDeltaFrame(float value) {
      GDXJNI.EffekseerManagerParameters_UpdateParameter_DeltaFrame_set(swigCPtr, this, value);
    }
  
    public float getDeltaFrame() {
      return GDXJNI.EffekseerManagerParameters_UpdateParameter_DeltaFrame_get(swigCPtr, this);
    }
  
    public void setUpdateInterval(float value) {
      GDXJNI.EffekseerManagerParameters_UpdateParameter_UpdateInterval_set(swigCPtr, this, value);
    }
  
    public float getUpdateInterval() {
      return GDXJNI.EffekseerManagerParameters_UpdateParameter_UpdateInterval_get(swigCPtr, this);
    }
  
    public void setSyncUpdate(boolean value) {
      GDXJNI.EffekseerManagerParameters_UpdateParameter_SyncUpdate_set(swigCPtr, this, value);
    }
  
    public boolean getSyncUpdate() {
      return GDXJNI.EffekseerManagerParameters_UpdateParameter_SyncUpdate_get(swigCPtr, this);
    }
  
    public UpdateParameter() {
      this(GDXJNI.new_EffekseerManagerParameters_UpdateParameter(), true);
    }
  
  }

  static public class DrawParameter {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected DrawParameter(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(DrawParameter obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GDXJNI.delete_EffekseerManagerParameters_DrawParameter(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setCameraPosition(Vector3D value) {
      GDXJNI.EffekseerManagerParameters_DrawParameter_CameraPosition_set(swigCPtr, this, Vector3D.getCPtr(value), value);
    }
  
    public Vector3D getCameraPosition() {
      long cPtr = GDXJNI.EffekseerManagerParameters_DrawParameter_CameraPosition_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Vector3D(cPtr, false);
    }
  
    public void setCameraFrontDirection(Vector3D value) {
      GDXJNI.EffekseerManagerParameters_DrawParameter_CameraFrontDirection_set(swigCPtr, this, Vector3D.getCPtr(value), value);
    }
  
    public Vector3D getCameraFrontDirection() {
      long cPtr = GDXJNI.EffekseerManagerParameters_DrawParameter_CameraFrontDirection_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Vector3D(cPtr, false);
    }
  
    public void setCameraCullingMask(int value) {
      GDXJNI.EffekseerManagerParameters_DrawParameter_CameraCullingMask_set(swigCPtr, this, value);
    }
  
    public int getCameraCullingMask() {
      return GDXJNI.EffekseerManagerParameters_DrawParameter_CameraCullingMask_get(swigCPtr, this);
    }
  
    public void setIsSortingEffectsEnabled(boolean value) {
      GDXJNI.EffekseerManagerParameters_DrawParameter_IsSortingEffectsEnabled_set(swigCPtr, this, value);
    }
  
    public boolean getIsSortingEffectsEnabled() {
      return GDXJNI.EffekseerManagerParameters_DrawParameter_IsSortingEffectsEnabled_get(swigCPtr, this);
    }
  
    public DrawParameter() {
      this(GDXJNI.new_EffekseerManagerParameters_DrawParameter(), true);
    }
  
  }

}
