/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public final class ParameterTranslationType {
  public final static ParameterTranslationType ParameterTranslationType_Fixed = new ParameterTranslationType("ParameterTranslationType_Fixed", GDXJNI.ParameterTranslationType_Fixed_get());
  public final static ParameterTranslationType ParameterTranslationType_PVA = new ParameterTranslationType("ParameterTranslationType_PVA", GDXJNI.ParameterTranslationType_PVA_get());
  public final static ParameterTranslationType ParameterTranslationType_Easing = new ParameterTranslationType("ParameterTranslationType_Easing", GDXJNI.ParameterTranslationType_Easing_get());
  public final static ParameterTranslationType ParameterTranslationType_FCurve = new ParameterTranslationType("ParameterTranslationType_FCurve", GDXJNI.ParameterTranslationType_FCurve_get());
  public final static ParameterTranslationType ParameterTranslationType_NurbsCurve = new ParameterTranslationType("ParameterTranslationType_NurbsCurve", GDXJNI.ParameterTranslationType_NurbsCurve_get());
  public final static ParameterTranslationType ParameterTranslationType_ViewOffset = new ParameterTranslationType("ParameterTranslationType_ViewOffset", GDXJNI.ParameterTranslationType_ViewOffset_get());
  public final static ParameterTranslationType ParameterTranslationType_None = new ParameterTranslationType("ParameterTranslationType_None", GDXJNI.ParameterTranslationType_None_get());
  public final static ParameterTranslationType ParameterTranslationType_DWORD = new ParameterTranslationType("ParameterTranslationType_DWORD", GDXJNI.ParameterTranslationType_DWORD_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static ParameterTranslationType swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + ParameterTranslationType.class + " with value " + swigValue);
  }

  private ParameterTranslationType(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private ParameterTranslationType(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private ParameterTranslationType(String swigName, ParameterTranslationType swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static ParameterTranslationType[] swigValues = { ParameterTranslationType_Fixed, ParameterTranslationType_PVA, ParameterTranslationType_Easing, ParameterTranslationType_FCurve, ParameterTranslationType_NurbsCurve, ParameterTranslationType_ViewOffset, ParameterTranslationType_None, ParameterTranslationType_DWORD };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

