/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class VectorFloatArray4 extends java.util.AbstractList<FloatArray4> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected VectorFloatArray4(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VectorFloatArray4 obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_VectorFloatArray4(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public VectorFloatArray4(FloatArray4[] initialElements) {
    this();
    reserve(initialElements.length);

    for (FloatArray4 element : initialElements) {
      add(element);
    }
  }

  public VectorFloatArray4(Iterable<FloatArray4> initialElements) {
    this();
    for (FloatArray4 element : initialElements) {
      add(element);
    }
  }

  public FloatArray4 get(int index) {
    return doGet(index);
  }

  public FloatArray4 set(int index, FloatArray4 e) {
    return doSet(index, e);
  }

  public boolean add(FloatArray4 e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, FloatArray4 e) {
    modCount++;
    doAdd(index, e);
  }

  public FloatArray4 remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public VectorFloatArray4() {
    this(GDXJNI.new_VectorFloatArray4__SWIG_0(), true);
  }

  public VectorFloatArray4(VectorFloatArray4 other) {
    this(GDXJNI.new_VectorFloatArray4__SWIG_1(VectorFloatArray4.getCPtr(other), other), true);
  }

  public long capacity() {
    return GDXJNI.VectorFloatArray4_capacity(swigCPtr, this);
  }

  public void reserve(long n) {
    GDXJNI.VectorFloatArray4_reserve(swigCPtr, this, n);
  }

  public boolean isEmpty() {
    return GDXJNI.VectorFloatArray4_isEmpty(swigCPtr, this);
  }

  public void clear() {
    GDXJNI.VectorFloatArray4_clear(swigCPtr, this);
  }

  public VectorFloatArray4(int count, FloatArray4 value) {
    this(GDXJNI.new_VectorFloatArray4__SWIG_2(count, FloatArray4.getCPtr(value), value), true);
  }

  private int doSize() {
    return GDXJNI.VectorFloatArray4_doSize(swigCPtr, this);
  }

  private void doAdd(FloatArray4 x) {
    GDXJNI.VectorFloatArray4_doAdd__SWIG_0(swigCPtr, this, FloatArray4.getCPtr(x), x);
  }

  private void doAdd(int index, FloatArray4 x) {
    GDXJNI.VectorFloatArray4_doAdd__SWIG_1(swigCPtr, this, index, FloatArray4.getCPtr(x), x);
  }

  private FloatArray4 doRemove(int index) {
    return new FloatArray4(GDXJNI.VectorFloatArray4_doRemove(swigCPtr, this, index), true);
  }

  private FloatArray4 doGet(int index) {
    return new FloatArray4(GDXJNI.VectorFloatArray4_doGet(swigCPtr, this, index), false);
  }

  private FloatArray4 doSet(int index, FloatArray4 val) {
    return new FloatArray4(GDXJNI.VectorFloatArray4_doSet(swigCPtr, this, index, FloatArray4.getCPtr(val), val), true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    GDXJNI.VectorFloatArray4_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }

}
