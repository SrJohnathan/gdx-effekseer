/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class ParameterGenerationLocation {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ParameterGenerationLocation(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ParameterGenerationLocation obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_ParameterGenerationLocation(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setEffectsRotation(int value) {
    GDXJNI.ParameterGenerationLocation_EffectsRotation_set(swigCPtr, this, value);
  }

  public int getEffectsRotation() {
    return GDXJNI.ParameterGenerationLocation_EffectsRotation_get(swigCPtr, this);
  }

  public void setType(int value) {
    GDXJNI.ParameterGenerationLocation_type_set(swigCPtr, this, value);
  }

  public int getType() {
    return GDXJNI.ParameterGenerationLocation_type_get(swigCPtr, this);
  }

  public InternalStructRandomVector3D getPointLocation() {
    return new InternalStructRandomVector3D(GDXJNI.ParameterGenerationLocation_getPointLocation(swigCPtr, this), true);
  }

  public void setPointLocation(InternalStructRandomVector3D value) {
    GDXJNI.ParameterGenerationLocation_setPointLocation(swigCPtr, this, InternalStructRandomVector3D.getCPtr(value), value);
  }

  public InternalStructRandomFloat getSphereRadius() {
    return new InternalStructRandomFloat(GDXJNI.ParameterGenerationLocation_getSphereRadius(swigCPtr, this), true);
  }

  public void setSphereRadius(InternalStructRandomFloat value) {
    GDXJNI.ParameterGenerationLocation_setSphereRadius(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public InternalStructRandomFloat getSphereRotationX() {
    return new InternalStructRandomFloat(GDXJNI.ParameterGenerationLocation_getSphereRotationX(swigCPtr, this), true);
  }

  public void setSphereRotationX(InternalStructRandomFloat value) {
    GDXJNI.ParameterGenerationLocation_setSphereRotationX(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public InternalStructRandomFloat getSphereRotationY() {
    return new InternalStructRandomFloat(GDXJNI.ParameterGenerationLocation_getSphereRotationY(swigCPtr, this), true);
  }

  public void setSphereRotationY(InternalStructRandomFloat value) {
    GDXJNI.ParameterGenerationLocation_setSphereRotationY(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public ModelReferenceType getModelReferenceType() {
    return ModelReferenceType.swigToEnum(GDXJNI.ParameterGenerationLocation_getModelReferenceType(swigCPtr, this));
  }

  public void setModelReferenceType(ModelReferenceType value) {
    GDXJNI.ParameterGenerationLocation_setModelReferenceType(swigCPtr, this, value.swigValue());
  }

  public int getModelIndex() {
    return GDXJNI.ParameterGenerationLocation_getModelIndex(swigCPtr, this);
  }

  public void setModelIndex(int value) {
    GDXJNI.ParameterGenerationLocation_setModelIndex(swigCPtr, this, value);
  }

  public ParameterGenerationLocation.eModelType getModelType() {
    return ParameterGenerationLocation.eModelType.swigToEnum(GDXJNI.ParameterGenerationLocation_getModelType(swigCPtr, this));
  }

  public void setModelType(ParameterGenerationLocation.eModelType value) {
    GDXJNI.ParameterGenerationLocation_setModelType(swigCPtr, this, value.swigValue());
  }

  public int getCircleDivision() {
    return GDXJNI.ParameterGenerationLocation_getCircleDivision(swigCPtr, this);
  }

  public void setCircleDivision(int value) {
    GDXJNI.ParameterGenerationLocation_setCircleDivision(swigCPtr, this, value);
  }

  public InternalStructRandomFloat getCircleRadius() {
    return new InternalStructRandomFloat(GDXJNI.ParameterGenerationLocation_getCircleRadius(swigCPtr, this), true);
  }

  public void setCircleRadius(InternalStructRandomFloat value) {
    GDXJNI.ParameterGenerationLocation_setCircleRadius(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public InternalStructRandomFloat getCircleAngleStart() {
    return new InternalStructRandomFloat(GDXJNI.ParameterGenerationLocation_getCircleAngleStart(swigCPtr, this), true);
  }

  public void setCircleAngleStart(InternalStructRandomFloat value) {
    GDXJNI.ParameterGenerationLocation_setCircleAngleStart(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public InternalStructRandomFloat getCircleAngleEnd() {
    return new InternalStructRandomFloat(GDXJNI.ParameterGenerationLocation_getCircleAngleEnd(swigCPtr, this), true);
  }

  public void setCircleAngleEnd(InternalStructRandomFloat value) {
    GDXJNI.ParameterGenerationLocation_setCircleAngleEnd(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public ParameterGenerationLocation.eCircleType getCircleType() {
    return ParameterGenerationLocation.eCircleType.swigToEnum(GDXJNI.ParameterGenerationLocation_getCircleType(swigCPtr, this));
  }

  public void setCircleType(ParameterGenerationLocation.eCircleType value) {
    GDXJNI.ParameterGenerationLocation_setCircleType(swigCPtr, this, value.swigValue());
  }

  public ParameterGenerationLocation.AxisType getCircleAxisDirection() {
    return ParameterGenerationLocation.AxisType.swigToEnum(GDXJNI.ParameterGenerationLocation_getCircleAxisDirection(swigCPtr, this));
  }

  public void setCircleAxisDirection(ParameterGenerationLocation.AxisType value) {
    GDXJNI.ParameterGenerationLocation_setCircleAxisDirection(swigCPtr, this, value.swigValue());
  }

  public InternalStructRandomFloat getCircleAngleNoise() {
    return new InternalStructRandomFloat(GDXJNI.ParameterGenerationLocation_getCircleAngleNoise(swigCPtr, this), true);
  }

  public void setCircleAngleNoise(InternalStructRandomFloat value) {
    GDXJNI.ParameterGenerationLocation_setCircleAngleNoise(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public int getLineDivision() {
    return GDXJNI.ParameterGenerationLocation_getLineDivision(swigCPtr, this);
  }

  public void setLineDivision(int value) {
    GDXJNI.ParameterGenerationLocation_setLineDivision(swigCPtr, this, value);
  }

  public InternalStructRandomVector3D getLinePositionStart() {
    return new InternalStructRandomVector3D(GDXJNI.ParameterGenerationLocation_getLinePositionStart(swigCPtr, this), true);
  }

  public void setLinePositionStart(InternalStructRandomVector3D value) {
    GDXJNI.ParameterGenerationLocation_setLinePositionStart(swigCPtr, this, InternalStructRandomVector3D.getCPtr(value), value);
  }

  public InternalStructRandomVector3D getLinePositionEnd() {
    return new InternalStructRandomVector3D(GDXJNI.ParameterGenerationLocation_getLinePositionEnd(swigCPtr, this), true);
  }

  public void setLinePositionEnd(InternalStructRandomVector3D value) {
    GDXJNI.ParameterGenerationLocation_setLinePositionEnd(swigCPtr, this, InternalStructRandomVector3D.getCPtr(value), value);
  }

  public InternalStructRandomFloat getLinePositionNoise() {
    return new InternalStructRandomFloat(GDXJNI.ParameterGenerationLocation_getLinePositionNoise(swigCPtr, this), true);
  }

  public void setLinePositionNoise(InternalStructRandomFloat value) {
    GDXJNI.ParameterGenerationLocation_setLinePositionNoise(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public ParameterGenerationLocation.LineType getLineType() {
    return ParameterGenerationLocation.LineType.swigToEnum(GDXJNI.ParameterGenerationLocation_getLineType(swigCPtr, this));
  }

  public void setLineType(ParameterGenerationLocation.LineType value) {
    GDXJNI.ParameterGenerationLocation_setLineType(swigCPtr, this, value.swigValue());
  }

  public ParameterGenerationLocation() {
    this(GDXJNI.new_ParameterGenerationLocation(), true);
  }

  public final static class AxisType {
    public final static ParameterGenerationLocation.AxisType X = new ParameterGenerationLocation.AxisType("X");
    public final static ParameterGenerationLocation.AxisType Y = new ParameterGenerationLocation.AxisType("Y");
    public final static ParameterGenerationLocation.AxisType Z = new ParameterGenerationLocation.AxisType("Z");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AxisType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AxisType.class + " with value " + swigValue);
    }

    private AxisType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AxisType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AxisType(String swigName, AxisType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AxisType[] swigValues = { X, Y, Z };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static int TYPE_POINT = GDXJNI.ParameterGenerationLocation_TYPE_POINT_get();
  public final static int TYPE_SPHERE = GDXJNI.ParameterGenerationLocation_TYPE_SPHERE_get();
  public final static int TYPE_MODEL = GDXJNI.ParameterGenerationLocation_TYPE_MODEL_get();
  public final static int TYPE_CIRCLE = GDXJNI.ParameterGenerationLocation_TYPE_CIRCLE_get();
  public final static int TYPE_LINE = GDXJNI.ParameterGenerationLocation_TYPE_LINE_get();
  public final static int TYPE_DWORD = GDXJNI.ParameterGenerationLocation_TYPE_DWORD_get();

  public final static class eModelType {
    public final static ParameterGenerationLocation.eModelType MODELTYPE_RANDOM = new ParameterGenerationLocation.eModelType("MODELTYPE_RANDOM", GDXJNI.ParameterGenerationLocation_MODELTYPE_RANDOM_get());
    public final static ParameterGenerationLocation.eModelType MODELTYPE_VERTEX = new ParameterGenerationLocation.eModelType("MODELTYPE_VERTEX", GDXJNI.ParameterGenerationLocation_MODELTYPE_VERTEX_get());
    public final static ParameterGenerationLocation.eModelType MODELTYPE_VERTEX_RANDOM = new ParameterGenerationLocation.eModelType("MODELTYPE_VERTEX_RANDOM", GDXJNI.ParameterGenerationLocation_MODELTYPE_VERTEX_RANDOM_get());
    public final static ParameterGenerationLocation.eModelType MODELTYPE_FACE = new ParameterGenerationLocation.eModelType("MODELTYPE_FACE", GDXJNI.ParameterGenerationLocation_MODELTYPE_FACE_get());
    public final static ParameterGenerationLocation.eModelType MODELTYPE_FACE_RANDOM = new ParameterGenerationLocation.eModelType("MODELTYPE_FACE_RANDOM", GDXJNI.ParameterGenerationLocation_MODELTYPE_FACE_RANDOM_get());
    public final static ParameterGenerationLocation.eModelType MODELTYPE_DWORD = new ParameterGenerationLocation.eModelType("MODELTYPE_DWORD", GDXJNI.ParameterGenerationLocation_MODELTYPE_DWORD_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static eModelType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + eModelType.class + " with value " + swigValue);
    }

    private eModelType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private eModelType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private eModelType(String swigName, eModelType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static eModelType[] swigValues = { MODELTYPE_RANDOM, MODELTYPE_VERTEX, MODELTYPE_VERTEX_RANDOM, MODELTYPE_FACE, MODELTYPE_FACE_RANDOM, MODELTYPE_DWORD };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class eCircleType {
    public final static ParameterGenerationLocation.eCircleType CIRCLE_TYPE_RANDOM = new ParameterGenerationLocation.eCircleType("CIRCLE_TYPE_RANDOM", GDXJNI.ParameterGenerationLocation_CIRCLE_TYPE_RANDOM_get());
    public final static ParameterGenerationLocation.eCircleType CIRCLE_TYPE_ORDER = new ParameterGenerationLocation.eCircleType("CIRCLE_TYPE_ORDER", GDXJNI.ParameterGenerationLocation_CIRCLE_TYPE_ORDER_get());
    public final static ParameterGenerationLocation.eCircleType CIRCLE_TYPE_REVERSE_ORDER = new ParameterGenerationLocation.eCircleType("CIRCLE_TYPE_REVERSE_ORDER", GDXJNI.ParameterGenerationLocation_CIRCLE_TYPE_REVERSE_ORDER_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static eCircleType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + eCircleType.class + " with value " + swigValue);
    }

    private eCircleType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private eCircleType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private eCircleType(String swigName, eCircleType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static eCircleType[] swigValues = { CIRCLE_TYPE_RANDOM, CIRCLE_TYPE_ORDER, CIRCLE_TYPE_REVERSE_ORDER };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class LineType {
    public final static ParameterGenerationLocation.LineType Random = new ParameterGenerationLocation.LineType("Random", GDXJNI.ParameterGenerationLocation_LineType_Random_get());
    public final static ParameterGenerationLocation.LineType Order = new ParameterGenerationLocation.LineType("Order", GDXJNI.ParameterGenerationLocation_LineType_Order_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static LineType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + LineType.class + " with value " + swigValue);
    }

    private LineType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private LineType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private LineType(String swigName, LineType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static LineType[] swigValues = { Random, Order };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
