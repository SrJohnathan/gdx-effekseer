/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class EffectNodeRing extends EffectNodeImplemented {
  private transient long swigCPtr;

  protected EffectNodeRing(long cPtr, boolean cMemoryOwn) {
    super(GDXJNI.EffectNodeRing_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(EffectNodeRing obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_EffectNodeRing(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setAlphaBlend(AlphaBlendType value) {
    GDXJNI.EffectNodeRing_AlphaBlend_set(swigCPtr, this, value.swigValue());
  }

  public AlphaBlendType getAlphaBlend() {
    return AlphaBlendType.swigToEnum(GDXJNI.EffectNodeRing_AlphaBlend_get(swigCPtr, this));
  }

  public void setBillboard(BillboardType value) {
    GDXJNI.EffectNodeRing_Billboard_set(swigCPtr, this, value.swigValue());
  }

  public BillboardType getBillboard() {
    return BillboardType.swigToEnum(GDXJNI.EffectNodeRing_Billboard_get(swigCPtr, this));
  }

  public void setVertexCount(int value) {
    GDXJNI.EffectNodeRing_VertexCount_set(swigCPtr, this, value);
  }

  public int getVertexCount() {
    return GDXJNI.EffectNodeRing_VertexCount_get(swigCPtr, this);
  }

  public void setShape(RingShapeParameterCore value) {
    GDXJNI.EffectNodeRing_Shape_set(swigCPtr, this, RingShapeParameterCore.getCPtr(value), value);
  }

  public RingShapeParameterCore getShape() {
    long cPtr = GDXJNI.EffectNodeRing_Shape_get(swigCPtr, this);
    return (cPtr == 0) ? null : new RingShapeParameterCore(cPtr, false);
  }

  public void setOuterLocation(RingLocationParameterCore value) {
    GDXJNI.EffectNodeRing_OuterLocation_set(swigCPtr, this, RingLocationParameterCore.getCPtr(value), value);
  }

  public RingLocationParameterCore getOuterLocation() {
    long cPtr = GDXJNI.EffectNodeRing_OuterLocation_get(swigCPtr, this);
    return (cPtr == 0) ? null : new RingLocationParameterCore(cPtr, false);
  }

  public void setInnerLocation(RingLocationParameterCore value) {
    GDXJNI.EffectNodeRing_InnerLocation_set(swigCPtr, this, RingLocationParameterCore.getCPtr(value), value);
  }

  public RingLocationParameterCore getInnerLocation() {
    long cPtr = GDXJNI.EffectNodeRing_InnerLocation_get(swigCPtr, this);
    return (cPtr == 0) ? null : new RingLocationParameterCore(cPtr, false);
  }

  public void setCenterRatio(RingSingleParameterCore value) {
    GDXJNI.EffectNodeRing_CenterRatio_set(swigCPtr, this, RingSingleParameterCore.getCPtr(value), value);
  }

  public RingSingleParameterCore getCenterRatio() {
    long cPtr = GDXJNI.EffectNodeRing_CenterRatio_get(swigCPtr, this);
    return (cPtr == 0) ? null : new RingSingleParameterCore(cPtr, false);
  }

  public void setOuterColor(RingColorParameterCore value) {
    GDXJNI.EffectNodeRing_OuterColor_set(swigCPtr, this, RingColorParameterCore.getCPtr(value), value);
  }

  public RingColorParameterCore getOuterColor() {
    long cPtr = GDXJNI.EffectNodeRing_OuterColor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new RingColorParameterCore(cPtr, false);
  }

  public void setCenterColor(RingColorParameterCore value) {
    GDXJNI.EffectNodeRing_CenterColor_set(swigCPtr, this, RingColorParameterCore.getCPtr(value), value);
  }

  public RingColorParameterCore getCenterColor() {
    long cPtr = GDXJNI.EffectNodeRing_CenterColor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new RingColorParameterCore(cPtr, false);
  }

  public void setInnerColor(RingColorParameterCore value) {
    GDXJNI.EffectNodeRing_InnerColor_set(swigCPtr, this, RingColorParameterCore.getCPtr(value), value);
  }

  public RingColorParameterCore getInnerColor() {
    long cPtr = GDXJNI.EffectNodeRing_InnerColor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new RingColorParameterCore(cPtr, false);
  }

  public void setRingTexture(int value) {
    GDXJNI.EffectNodeRing_RingTexture_set(swigCPtr, this, value);
  }

  public int getRingTexture() {
    return GDXJNI.EffectNodeRing_RingTexture_get(swigCPtr, this);
  }

  public void setNodeParameter(SWIGTYPE_p_Effekseer__RingRenderer__NodeParameter value) {
    GDXJNI.EffectNodeRing_nodeParameter_set(swigCPtr, this, SWIGTYPE_p_Effekseer__RingRenderer__NodeParameter.getCPtr(value));
  }

  public SWIGTYPE_p_Effekseer__RingRenderer__NodeParameter getNodeParameter() {
    long cPtr = GDXJNI.EffectNodeRing_nodeParameter_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Effekseer__RingRenderer__NodeParameter(cPtr, false);
  }

  public EffectNodeRing(EffekseerEffect effect, SWIGTYPE_p_p_unsigned_char pos) {
    this(GDXJNI.new_EffectNodeRing(EffekseerEffect.getCPtr(effect), effect, SWIGTYPE_p_p_unsigned_char.getCPtr(pos)), true);
  }

}
