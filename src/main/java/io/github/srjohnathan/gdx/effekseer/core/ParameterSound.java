/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class ParameterSound {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ParameterSound(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ParameterSound obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_ParameterSound(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setWaveId(int value) {
    GDXJNI.ParameterSound_WaveId_set(swigCPtr, this, value);
  }

  public int getWaveId() {
    return GDXJNI.ParameterSound_WaveId_get(swigCPtr, this);
  }

  public void setVolume(InternalStructRandomFloat value) {
    GDXJNI.ParameterSound_Volume_set(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public InternalStructRandomFloat getVolume() {
    long cPtr = GDXJNI.ParameterSound_Volume_get(swigCPtr, this);
    return (cPtr == 0) ? null : new InternalStructRandomFloat(cPtr, false);
  }

  public void setPitch(InternalStructRandomFloat value) {
    GDXJNI.ParameterSound_Pitch_set(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public InternalStructRandomFloat getPitch() {
    long cPtr = GDXJNI.ParameterSound_Pitch_get(swigCPtr, this);
    return (cPtr == 0) ? null : new InternalStructRandomFloat(cPtr, false);
  }

  public void setPanType(ParameterSoundPanType value) {
    GDXJNI.ParameterSound_PanType_set(swigCPtr, this, value.swigValue());
  }

  public ParameterSoundPanType getPanType() {
    return ParameterSoundPanType.swigToEnum(GDXJNI.ParameterSound_PanType_get(swigCPtr, this));
  }

  public void setPan(InternalStructRandomFloat value) {
    GDXJNI.ParameterSound_Pan_set(swigCPtr, this, InternalStructRandomFloat.getCPtr(value), value);
  }

  public InternalStructRandomFloat getPan() {
    long cPtr = GDXJNI.ParameterSound_Pan_get(swigCPtr, this);
    return (cPtr == 0) ? null : new InternalStructRandomFloat(cPtr, false);
  }

  public void setDistance(float value) {
    GDXJNI.ParameterSound_Distance_set(swigCPtr, this, value);
  }

  public float getDistance() {
    return GDXJNI.ParameterSound_Distance_get(swigCPtr, this);
  }

  public void setDelay(InternalStructRandomInt value) {
    GDXJNI.ParameterSound_Delay_set(swigCPtr, this, InternalStructRandomInt.getCPtr(value), value);
  }

  public InternalStructRandomInt getDelay() {
    long cPtr = GDXJNI.ParameterSound_Delay_get(swigCPtr, this);
    return (cPtr == 0) ? null : new InternalStructRandomInt(cPtr, false);
  }

  public ParameterSound() {
    this(GDXJNI.new_ParameterSound(), true);
  }

}
