/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class ParameterAlphaCutoff {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ParameterAlphaCutoff(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ParameterAlphaCutoff obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_ParameterAlphaCutoff(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setType(ParameterAlphaCutoff.EType value) {
    GDXJNI.ParameterAlphaCutoff_Type_set(swigCPtr, this, value.swigValue());
  }

  public ParameterAlphaCutoff.EType getType() {
    return ParameterAlphaCutoff.EType.swigToEnum(GDXJNI.ParameterAlphaCutoff_Type_get(swigCPtr, this));
  }

  public void setEasing(ParameterEasingFloatCore value) {
    GDXJNI.ParameterAlphaCutoff_Easing_set(swigCPtr, this, ParameterEasingFloatCore.getCPtr(value), value);
  }

  public ParameterEasingFloatCore getEasing() {
    long cPtr = GDXJNI.ParameterAlphaCutoff_Easing_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ParameterEasingFloatCore(cPtr, false);
  }

  public void setEdgeThreshold(float value) {
    GDXJNI.ParameterAlphaCutoff_EdgeThreshold_set(swigCPtr, this, value);
  }

  public float getEdgeThreshold() {
    return GDXJNI.ParameterAlphaCutoff_EdgeThreshold_get(swigCPtr, this);
  }

  public void setEdgeColor(Color value) {
    GDXJNI.ParameterAlphaCutoff_EdgeColor_set(swigCPtr, this, Color.getCPtr(value), value);
  }

  public Color getEdgeColor() {
    long cPtr = GDXJNI.ParameterAlphaCutoff_EdgeColor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Color(cPtr, false);
  }

  public void setEdgeColorScaling(float value) {
    GDXJNI.ParameterAlphaCutoff_EdgeColorScaling_set(swigCPtr, this, value);
  }

  public float getEdgeColorScaling() {
    return GDXJNI.ParameterAlphaCutoff_EdgeColorScaling_get(swigCPtr, this);
  }

  public ParameterAlphaCutoff() {
    this(GDXJNI.new_ParameterAlphaCutoff(), true);
  }

  public final static class EType {
    public final static ParameterAlphaCutoff.EType FIXED = new ParameterAlphaCutoff.EType("FIXED");
    public final static ParameterAlphaCutoff.EType FOUR_POINT_INTERPOLATION = new ParameterAlphaCutoff.EType("FOUR_POINT_INTERPOLATION");
    public final static ParameterAlphaCutoff.EType EASING = new ParameterAlphaCutoff.EType("EASING");
    public final static ParameterAlphaCutoff.EType F_CURVE = new ParameterAlphaCutoff.EType("F_CURVE");
    public final static ParameterAlphaCutoff.EType FPI = new ParameterAlphaCutoff.EType("FPI", GDXJNI.ParameterAlphaCutoff_FPI_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static EType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + EType.class + " with value " + swigValue);
    }

    private EType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private EType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private EType(String swigName, EType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static EType[] swigValues = { FIXED, FOUR_POINT_INTERPOLATION, EASING, F_CURVE, FPI };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
