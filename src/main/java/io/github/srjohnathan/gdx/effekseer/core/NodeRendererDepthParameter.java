/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class NodeRendererDepthParameter {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected NodeRendererDepthParameter(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NodeRendererDepthParameter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_NodeRendererDepthParameter(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setDepthOffset(float value) {
    GDXJNI.NodeRendererDepthParameter_DepthOffset_set(swigCPtr, this, value);
  }

  public float getDepthOffset() {
    return GDXJNI.NodeRendererDepthParameter_DepthOffset_get(swigCPtr, this);
  }

  public void setIsDepthOffsetScaledWithCamera(boolean value) {
    GDXJNI.NodeRendererDepthParameter_IsDepthOffsetScaledWithCamera_set(swigCPtr, this, value);
  }

  public boolean getIsDepthOffsetScaledWithCamera() {
    return GDXJNI.NodeRendererDepthParameter_IsDepthOffsetScaledWithCamera_get(swigCPtr, this);
  }

  public void setIsDepthOffsetScaledWithParticleScale(boolean value) {
    GDXJNI.NodeRendererDepthParameter_IsDepthOffsetScaledWithParticleScale_set(swigCPtr, this, value);
  }

  public boolean getIsDepthOffsetScaledWithParticleScale() {
    return GDXJNI.NodeRendererDepthParameter_IsDepthOffsetScaledWithParticleScale_get(swigCPtr, this);
  }

  public void setZSort(ZSortType value) {
    GDXJNI.NodeRendererDepthParameter_ZSort_set(swigCPtr, this, value.swigValue());
  }

  public ZSortType getZSort() {
    return ZSortType.swigToEnum(GDXJNI.NodeRendererDepthParameter_ZSort_get(swigCPtr, this));
  }

  public void setSuppressionOfScalingByDepth(float value) {
    GDXJNI.NodeRendererDepthParameter_SuppressionOfScalingByDepth_set(swigCPtr, this, value);
  }

  public float getSuppressionOfScalingByDepth() {
    return GDXJNI.NodeRendererDepthParameter_SuppressionOfScalingByDepth_get(swigCPtr, this);
  }

  public void setDepthClipping(float value) {
    GDXJNI.NodeRendererDepthParameter_DepthClipping_set(swigCPtr, this, value);
  }

  public float getDepthClipping() {
    return GDXJNI.NodeRendererDepthParameter_DepthClipping_get(swigCPtr, this);
  }

  public NodeRendererDepthParameter() {
    this(GDXJNI.new_NodeRendererDepthParameter(), true);
  }

}
