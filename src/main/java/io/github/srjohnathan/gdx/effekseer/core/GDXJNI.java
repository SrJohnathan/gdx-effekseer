/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class GDXJNI {
  public final static native long new_VectorFloat__SWIG_0();
  public final static native long new_VectorFloat__SWIG_1(long jarg1, VectorFloat jarg1_);
  public final static native long VectorFloat_capacity(long jarg1, VectorFloat jarg1_);
  public final static native void VectorFloat_reserve(long jarg1, VectorFloat jarg1_, long jarg2);
  public final static native boolean VectorFloat_isEmpty(long jarg1, VectorFloat jarg1_);
  public final static native void VectorFloat_clear(long jarg1, VectorFloat jarg1_);
  public final static native long new_VectorFloat__SWIG_2(int jarg1, float jarg2);
  public final static native int VectorFloat_doSize(long jarg1, VectorFloat jarg1_);
  public final static native void VectorFloat_doAdd__SWIG_0(long jarg1, VectorFloat jarg1_, float jarg2);
  public final static native void VectorFloat_doAdd__SWIG_1(long jarg1, VectorFloat jarg1_, int jarg2, float jarg3);
  public final static native float VectorFloat_doRemove(long jarg1, VectorFloat jarg1_, int jarg2);
  public final static native float VectorFloat_doGet(long jarg1, VectorFloat jarg1_, int jarg2);
  public final static native float VectorFloat_doSet(long jarg1, VectorFloat jarg1_, int jarg2, float jarg3);
  public final static native void VectorFloat_doRemoveRange(long jarg1, VectorFloat jarg1_, int jarg2, int jarg3);
  public final static native void delete_VectorFloat(long jarg1);
  public final static native long new_EffekseerBackendCore();
  public final static native void delete_EffekseerBackendCore(long jarg1);
  public final static native boolean EffekseerBackendCore_InitializeAsOpenGL();
  public final static native void EffekseerBackendCore_Terminate();
  public final static native long new_EffekseerEffectCore();
  public final static native void delete_EffekseerEffectCore(long jarg1);
  public final static native boolean EffekseerEffectCore_load(long jarg1, EffekseerEffectCore jarg1_, long jarg2, EffekseerManagerCore jarg2_, byte[] jarg3, int jarg4, float jarg5);
  public final static native String EffekseerEffectCore_GetTexturePath(long jarg1, EffekseerEffectCore jarg1_, int jarg2, int jarg3);
  public final static native int EffekseerEffectCore_GetTextureCount(long jarg1, EffekseerEffectCore jarg1_, int jarg2);
  public final static native boolean EffekseerEffectCore_LoadTexture(long jarg1, EffekseerEffectCore jarg1_, byte[] jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean EffekseerEffectCore_HasTextureLoaded(long jarg1, EffekseerEffectCore jarg1_, int jarg2, int jarg3);
  public final static native String EffekseerEffectCore_GetModelPath(long jarg1, EffekseerEffectCore jarg1_, int jarg2);
  public final static native int EffekseerEffectCore_GetModelCount(long jarg1, EffekseerEffectCore jarg1_);
  public final static native boolean EffekseerEffectCore_LoadModel(long jarg1, EffekseerEffectCore jarg1_, byte[] jarg2, int jarg3, int jarg4);
  public final static native boolean EffekseerEffectCore_HasModelLoaded(long jarg1, EffekseerEffectCore jarg1_, int jarg2);
  public final static native String EffekseerEffectCore_GetMaterialPath(long jarg1, EffekseerEffectCore jarg1_, int jarg2);
  public final static native boolean EffekseerEffectCore_LoadMaterial(long jarg1, EffekseerEffectCore jarg1_, byte[] jarg2, int jarg3, int jarg4);
  public final static native boolean EffekseerEffectCore_HasMaterialLoaded(long jarg1, EffekseerEffectCore jarg1_, int jarg2);
  public final static native int EffekseerEffectCore_GetMaterialCount(long jarg1, EffekseerEffectCore jarg1_);
  public final static native int EffekseerEffectCore_NodeCount(long jarg1, EffekseerEffectCore jarg1_);
  public final static native long new_EffekseerManagerCore();
  public final static native void delete_EffekseerManagerCore(long jarg1);
  public final static native boolean EffekseerManagerCore_Initialize(long jarg1, EffekseerManagerCore jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native void EffekseerManagerCore_Update(long jarg1, EffekseerManagerCore jarg1_, float jarg2);
  public final static native int EffekseerManagerCore_Play(long jarg1, EffekseerManagerCore jarg1_, long jarg2, EffekseerEffectCore jarg2_);
  public final static native boolean EffekseerManagerCore_isPlaying(long jarg1, EffekseerManagerCore jarg1_, int jarg2);
  public final static native float EffekseerManagerCore_Speed(long jarg1, EffekseerManagerCore jarg1_, int jarg2);
  public final static native void EffekseerManagerCore_BeginRendering(long jarg1, EffekseerManagerCore jarg1_);
  public final static native void EffekseerManagerCore_Draw(long jarg1, EffekseerManagerCore jarg1_, long jarg2, EffekseerManagerParameters.DrawParameter jarg2_);
  public final static native void EffekseerManagerCore_DrawBack(long jarg1, EffekseerManagerCore jarg1_);
  public final static native void EffekseerManagerCore_DrawFront(long jarg1, EffekseerManagerCore jarg1_);
  public final static native void EffekseerManagerCore_EndRendering(long jarg1, EffekseerManagerCore jarg1_);
  public final static native void EffekseerManagerCore_SetPause(long jarg1, EffekseerManagerCore jarg1_, int jarg2, boolean jarg3);
  public final static native void EffekseerManagerCore_SetProjectionMatrix(long jarg1, EffekseerManagerCore jarg1_, float[] jarg2, float[] jarg3, boolean jarg4, float jarg5, float jarg6);
  public final static native void EffekseerManagerCore_SetEffectRotateAxis(long jarg1, EffekseerManagerCore jarg1_, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native void EffekseerManagerCore_SetEffectPosition(long jarg1, EffekseerManagerCore jarg1_, int jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void EffekseerManagerCore_SetEffectScale(long jarg1, EffekseerManagerCore jarg1_, int jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void EffekseerManagerCore_Stop(long jarg1, EffekseerManagerCore jarg1_, int jarg2);
  public final static native int EffekseerManagerCore_InstanceCount(long jarg1, EffekseerManagerCore jarg1_, int jarg2);
  public final static native float[] EffekseerManagerCore_GetMatrix(long jarg1, EffekseerManagerCore jarg1_, int jarg2);
  public final static native void EffekseerManagerCore_SetMatrix(long jarg1, EffekseerManagerCore jarg1_, int jarg2, float[] jarg3);
  public final static native void Vector3D_X_set(long jarg1, Vector3D jarg1_, float jarg2);
  public final static native float Vector3D_X_get(long jarg1, Vector3D jarg1_);
  public final static native void Vector3D_Y_set(long jarg1, Vector3D jarg1_, float jarg2);
  public final static native float Vector3D_Y_get(long jarg1, Vector3D jarg1_);
  public final static native void Vector3D_Z_set(long jarg1, Vector3D jarg1_, float jarg2);
  public final static native float Vector3D_Z_get(long jarg1, Vector3D jarg1_);
  public final static native long new_Vector3D__SWIG_0();
  public final static native long new_Vector3D__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native void delete_Vector3D(long jarg1);
  public final static native void EffekseerManagerParameters_UpdateParameter_DeltaFrame_set(long jarg1, EffekseerManagerParameters.UpdateParameter jarg1_, float jarg2);
  public final static native float EffekseerManagerParameters_UpdateParameter_DeltaFrame_get(long jarg1, EffekseerManagerParameters.UpdateParameter jarg1_);
  public final static native void EffekseerManagerParameters_UpdateParameter_UpdateInterval_set(long jarg1, EffekseerManagerParameters.UpdateParameter jarg1_, float jarg2);
  public final static native float EffekseerManagerParameters_UpdateParameter_UpdateInterval_get(long jarg1, EffekseerManagerParameters.UpdateParameter jarg1_);
  public final static native void EffekseerManagerParameters_UpdateParameter_SyncUpdate_set(long jarg1, EffekseerManagerParameters.UpdateParameter jarg1_, boolean jarg2);
  public final static native boolean EffekseerManagerParameters_UpdateParameter_SyncUpdate_get(long jarg1, EffekseerManagerParameters.UpdateParameter jarg1_);
  public final static native long new_EffekseerManagerParameters_UpdateParameter();
  public final static native void delete_EffekseerManagerParameters_UpdateParameter(long jarg1);
  public final static native void EffekseerManagerParameters_DrawParameter_CameraPosition_set(long jarg1, EffekseerManagerParameters.DrawParameter jarg1_, long jarg2, Vector3D jarg2_);
  public final static native long EffekseerManagerParameters_DrawParameter_CameraPosition_get(long jarg1, EffekseerManagerParameters.DrawParameter jarg1_);
  public final static native void EffekseerManagerParameters_DrawParameter_CameraFrontDirection_set(long jarg1, EffekseerManagerParameters.DrawParameter jarg1_, long jarg2, Vector3D jarg2_);
  public final static native long EffekseerManagerParameters_DrawParameter_CameraFrontDirection_get(long jarg1, EffekseerManagerParameters.DrawParameter jarg1_);
  public final static native void EffekseerManagerParameters_DrawParameter_CameraCullingMask_set(long jarg1, EffekseerManagerParameters.DrawParameter jarg1_, int jarg2);
  public final static native int EffekseerManagerParameters_DrawParameter_CameraCullingMask_get(long jarg1, EffekseerManagerParameters.DrawParameter jarg1_);
  public final static native void EffekseerManagerParameters_DrawParameter_IsSortingEffectsEnabled_set(long jarg1, EffekseerManagerParameters.DrawParameter jarg1_, boolean jarg2);
  public final static native boolean EffekseerManagerParameters_DrawParameter_IsSortingEffectsEnabled_get(long jarg1, EffekseerManagerParameters.DrawParameter jarg1_);
  public final static native long new_EffekseerManagerParameters_DrawParameter();
  public final static native void delete_EffekseerManagerParameters_DrawParameter(long jarg1);
}
