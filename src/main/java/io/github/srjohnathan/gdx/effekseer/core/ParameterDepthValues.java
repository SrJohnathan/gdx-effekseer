/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class ParameterDepthValues {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ParameterDepthValues(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ParameterDepthValues obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_ParameterDepthValues(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setDepthOffset(float value) {
    GDXJNI.ParameterDepthValues_DepthOffset_set(swigCPtr, this, value);
  }

  public float getDepthOffset() {
    return GDXJNI.ParameterDepthValues_DepthOffset_get(swigCPtr, this);
  }

  public void setIsDepthOffsetScaledWithCamera(boolean value) {
    GDXJNI.ParameterDepthValues_IsDepthOffsetScaledWithCamera_set(swigCPtr, this, value);
  }

  public boolean getIsDepthOffsetScaledWithCamera() {
    return GDXJNI.ParameterDepthValues_IsDepthOffsetScaledWithCamera_get(swigCPtr, this);
  }

  public void setIsDepthOffsetScaledWithParticleScale(boolean value) {
    GDXJNI.ParameterDepthValues_IsDepthOffsetScaledWithParticleScale_set(swigCPtr, this, value);
  }

  public boolean getIsDepthOffsetScaledWithParticleScale() {
    return GDXJNI.ParameterDepthValues_IsDepthOffsetScaledWithParticleScale_get(swigCPtr, this);
  }

  public void setZSort(ZSortType value) {
    GDXJNI.ParameterDepthValues_ZSort_set(swigCPtr, this, value.swigValue());
  }

  public ZSortType getZSort() {
    return ZSortType.swigToEnum(GDXJNI.ParameterDepthValues_ZSort_get(swigCPtr, this));
  }

  public void setDrawingPriority(int value) {
    GDXJNI.ParameterDepthValues_DrawingPriority_set(swigCPtr, this, value);
  }

  public int getDrawingPriority() {
    return GDXJNI.ParameterDepthValues_DrawingPriority_get(swigCPtr, this);
  }

  public void setSoftParticle(float value) {
    GDXJNI.ParameterDepthValues_SoftParticle_set(swigCPtr, this, value);
  }

  public float getSoftParticle() {
    return GDXJNI.ParameterDepthValues_SoftParticle_get(swigCPtr, this);
  }

  public void setDepthParameter(NodeRendererDepthParameter value) {
    GDXJNI.ParameterDepthValues_DepthParameter_set(swigCPtr, this, NodeRendererDepthParameter.getCPtr(value), value);
  }

  public NodeRendererDepthParameter getDepthParameter() {
    long cPtr = GDXJNI.ParameterDepthValues_DepthParameter_get(swigCPtr, this);
    return (cPtr == 0) ? null : new NodeRendererDepthParameter(cPtr, false);
  }

  public ParameterDepthValues() {
    this(GDXJNI.new_ParameterDepthValues(), true);
  }

}
