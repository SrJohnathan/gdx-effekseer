/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class EffectNodeTrack extends EffectNodeImplemented {
  private transient long swigCPtr;

  protected EffectNodeTrack(long cPtr, boolean cMemoryOwn) {
    super(GDXJNI.EffectNodeTrack_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(EffectNodeTrack obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_EffectNodeTrack(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setM_nodeParameter(SWIGTYPE_p_Effekseer__TrackRenderer__NodeParameter value) {
    GDXJNI.EffectNodeTrack_m_nodeParameter_set(swigCPtr, this, SWIGTYPE_p_Effekseer__TrackRenderer__NodeParameter.getCPtr(value));
  }

  public SWIGTYPE_p_Effekseer__TrackRenderer__NodeParameter getM_nodeParameter() {
    long cPtr = GDXJNI.EffectNodeTrack_m_nodeParameter_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Effekseer__TrackRenderer__NodeParameter(cPtr, false);
  }

  public void setM_instanceParameter(SWIGTYPE_p_Effekseer__TrackRenderer__InstanceParameter value) {
    GDXJNI.EffectNodeTrack_m_instanceParameter_set(swigCPtr, this, SWIGTYPE_p_Effekseer__TrackRenderer__InstanceParameter.getCPtr(value));
  }

  public SWIGTYPE_p_Effekseer__TrackRenderer__InstanceParameter getM_instanceParameter() {
    long cPtr = GDXJNI.EffectNodeTrack_m_instanceParameter_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Effekseer__TrackRenderer__InstanceParameter(cPtr, false);
  }

  public void setM_currentGroupValues(SWIGTYPE_p_Effekseer__EffectNodeTrack__InstanceGroupValues value) {
    GDXJNI.EffectNodeTrack_m_currentGroupValues_set(swigCPtr, this, SWIGTYPE_p_Effekseer__EffectNodeTrack__InstanceGroupValues.getCPtr(value));
  }

  public SWIGTYPE_p_Effekseer__EffectNodeTrack__InstanceGroupValues getM_currentGroupValues() {
    long cPtr = GDXJNI.EffectNodeTrack_m_currentGroupValues_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Effekseer__EffectNodeTrack__InstanceGroupValues(cPtr, false);
  }

  public void setAlphaBlend(AlphaBlendType value) {
    GDXJNI.EffectNodeTrack_AlphaBlend_set(swigCPtr, this, value.swigValue());
  }

  public AlphaBlendType getAlphaBlend() {
    return AlphaBlendType.swigToEnum(GDXJNI.EffectNodeTrack_AlphaBlend_get(swigCPtr, this));
  }

  public void setTrackColorLeft(StandardColorParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackColorLeft_set(swigCPtr, this, StandardColorParameterCore.getCPtr(value), value);
  }

  public StandardColorParameterCore getTrackColorLeft() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackColorLeft_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StandardColorParameterCore(cPtr, false);
  }

  public void setTrackColorCenter(StandardColorParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackColorCenter_set(swigCPtr, this, StandardColorParameterCore.getCPtr(value), value);
  }

  public StandardColorParameterCore getTrackColorCenter() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackColorCenter_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StandardColorParameterCore(cPtr, false);
  }

  public void setTrackColorRight(StandardColorParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackColorRight_set(swigCPtr, this, StandardColorParameterCore.getCPtr(value), value);
  }

  public StandardColorParameterCore getTrackColorRight() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackColorRight_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StandardColorParameterCore(cPtr, false);
  }

  public void setTrackColorLeftMiddle(StandardColorParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackColorLeftMiddle_set(swigCPtr, this, StandardColorParameterCore.getCPtr(value), value);
  }

  public StandardColorParameterCore getTrackColorLeftMiddle() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackColorLeftMiddle_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StandardColorParameterCore(cPtr, false);
  }

  public void setTrackColorCenterMiddle(StandardColorParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackColorCenterMiddle_set(swigCPtr, this, StandardColorParameterCore.getCPtr(value), value);
  }

  public StandardColorParameterCore getTrackColorCenterMiddle() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackColorCenterMiddle_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StandardColorParameterCore(cPtr, false);
  }

  public void setTrackColorRightMiddle(StandardColorParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackColorRightMiddle_set(swigCPtr, this, StandardColorParameterCore.getCPtr(value), value);
  }

  public StandardColorParameterCore getTrackColorRightMiddle() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackColorRightMiddle_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StandardColorParameterCore(cPtr, false);
  }

  public void setTrackSizeFor(TrackSizeParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackSizeFor_set(swigCPtr, this, TrackSizeParameterCore.getCPtr(value), value);
  }

  public TrackSizeParameterCore getTrackSizeFor() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackSizeFor_get(swigCPtr, this);
    return (cPtr == 0) ? null : new TrackSizeParameterCore(cPtr, false);
  }

  public void setTrackSizeMiddle(TrackSizeParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackSizeMiddle_set(swigCPtr, this, TrackSizeParameterCore.getCPtr(value), value);
  }

  public TrackSizeParameterCore getTrackSizeMiddle() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackSizeMiddle_get(swigCPtr, this);
    return (cPtr == 0) ? null : new TrackSizeParameterCore(cPtr, false);
  }

  public void setTrackSizeBack(TrackSizeParameterCore value) {
    GDXJNI.EffectNodeTrack_TrackSizeBack_set(swigCPtr, this, TrackSizeParameterCore.getCPtr(value), value);
  }

  public TrackSizeParameterCore getTrackSizeBack() {
    long cPtr = GDXJNI.EffectNodeTrack_TrackSizeBack_get(swigCPtr, this);
    return (cPtr == 0) ? null : new TrackSizeParameterCore(cPtr, false);
  }

  public void setTrackTexture(int value) {
    GDXJNI.EffectNodeTrack_TrackTexture_set(swigCPtr, this, value);
  }

  public int getTrackTexture() {
    return GDXJNI.EffectNodeTrack_TrackTexture_get(swigCPtr, this);
  }

  public void setSplineDivision(int value) {
    GDXJNI.EffectNodeTrack_SplineDivision_set(swigCPtr, this, value);
  }

  public int getSplineDivision() {
    return GDXJNI.EffectNodeTrack_SplineDivision_get(swigCPtr, this);
  }

  public void setTextureUVType(NodeRendererTextureUVTypeParameter value) {
    GDXJNI.EffectNodeTrack_TextureUVType_set(swigCPtr, this, NodeRendererTextureUVTypeParameter.getCPtr(value), value);
  }

  public NodeRendererTextureUVTypeParameter getTextureUVType() {
    long cPtr = GDXJNI.EffectNodeTrack_TextureUVType_get(swigCPtr, this);
    return (cPtr == 0) ? null : new NodeRendererTextureUVTypeParameter(cPtr, false);
  }

  public EffectNodeTrack(EffekseerEffect effect, SWIGTYPE_p_p_unsigned_char pos) {
    this(GDXJNI.new_EffectNodeTrack(EffekseerEffect.getCPtr(effect), effect, SWIGTYPE_p_p_unsigned_char.getCPtr(pos)), true);
  }

}
