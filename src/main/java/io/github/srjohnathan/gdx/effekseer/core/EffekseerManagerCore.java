/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class EffekseerManagerCore {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected EffekseerManagerCore(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(EffekseerManagerCore obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_EffekseerManagerCore(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public EffekseerManagerCore() {
    this(GDXJNI.new_EffekseerManagerCore(), true);
  }

  public boolean Initialize(int spriteMaxCount, int id, boolean isSrgbMode) {
    return GDXJNI.EffekseerManagerCore_Initialize(swigCPtr, this, spriteMaxCount, id, isSrgbMode);
  }

  public void LaunchWorkerThreads(long threadCount) {
    GDXJNI.EffekseerManagerCore_LaunchWorkerThreads(swigCPtr, this, threadCount);
  }

  public boolean Exists(int handle) {
    return GDXJNI.EffekseerManagerCore_Exists(swigCPtr, this, handle);
  }

  public int Play(EffekseerEffectCore effect) {
    return GDXJNI.EffekseerManagerCore_Play(swigCPtr, this, EffekseerEffectCore.getCPtr(effect), effect);
  }

  public void StopEffect(int handle) {
    GDXJNI.EffekseerManagerCore_StopEffect(swigCPtr, this, handle);
  }

  public void StopAllEffects() {
    GDXJNI.EffekseerManagerCore_StopAllEffects(swigCPtr, this);
  }

  public void StopRoot(int handle) {
    GDXJNI.EffekseerManagerCore_StopRoot(swigCPtr, this, handle);
  }

  public int GetInstanceCount(int handle) {
    return GDXJNI.EffekseerManagerCore_GetInstanceCount(swigCPtr, this, handle);
  }

  public int GetTotalInstanceCount() {
    return GDXJNI.EffekseerManagerCore_GetTotalInstanceCount(swigCPtr, this);
  }

  public float[] GetMatrix(int handle) {
    return GDXJNI.EffekseerManagerCore_GetMatrix(swigCPtr, this, handle);
  }

  public void SetMatrix(int handle, float[] matrix43) {
    GDXJNI.EffekseerManagerCore_SetMatrix(swigCPtr, this, handle, matrix43);
  }

  public void SetMatrixBatch2(int handle1, float[] matrix43_1, int handle2, float[] matrix43_2) {
    GDXJNI.EffekseerManagerCore_SetMatrixBatch2(swigCPtr, this, handle1, matrix43_1, handle2, matrix43_2);
  }

  public void SetMatrixBatch4(int handle1, float[] matrix43_1, int handle2, float[] matrix43_2, int handle3, float[] matrix43_3, int handle4, float[] matrix43_4) {
    GDXJNI.EffekseerManagerCore_SetMatrixBatch4(swigCPtr, this, handle1, matrix43_1, handle2, matrix43_2, handle3, matrix43_3, handle4, matrix43_4);
  }

  public float[] GetBaseMatrix(int handle) {
    return GDXJNI.EffekseerManagerCore_GetBaseMatrix(swigCPtr, this, handle);
  }

  public void SetBaseMatrix(int handle, float[] matrix43) {
    GDXJNI.EffekseerManagerCore_SetBaseMatrix(swigCPtr, this, handle, matrix43);
  }

  public Vector3D GetLocation(int handle) {
    return new Vector3D(GDXJNI.EffekseerManagerCore_GetLocation(swigCPtr, this, handle), true);
  }

  public void SetLocation(int handle, float x, float y, float z) {
    GDXJNI.EffekseerManagerCore_SetLocation__SWIG_0(swigCPtr, this, handle, x, y, z);
  }

  public void SetLocation(int handle, Vector3D location) {
    GDXJNI.EffekseerManagerCore_SetLocation__SWIG_1(swigCPtr, this, handle, Vector3D.getCPtr(location), location);
  }

  public void AddLocation(int handle, Vector3D location) {
    GDXJNI.EffekseerManagerCore_AddLocation(swigCPtr, this, handle, Vector3D.getCPtr(location), location);
  }

  public void SetRotation(int handle, float x, float y, float z) {
    GDXJNI.EffekseerManagerCore_SetRotation__SWIG_0(swigCPtr, this, handle, x, y, z);
  }

  public void SetRotation(int handle, Vector3D axis, float angle) {
    GDXJNI.EffekseerManagerCore_SetRotation__SWIG_1(swigCPtr, this, handle, Vector3D.getCPtr(axis), axis, angle);
  }

  public void SetScale(int handle, float x, float y, float z) {
    GDXJNI.EffekseerManagerCore_SetScale(swigCPtr, this, handle, x, y, z);
  }

  public void SetAllColor(int handle, Color color) {
    GDXJNI.EffekseerManagerCore_SetAllColor(swigCPtr, this, handle, Color.getCPtr(color), color);
  }

  public void SetTargetLocation(int handle, float x, float y, float z) {
    GDXJNI.EffekseerManagerCore_SetTargetLocation__SWIG_0(swigCPtr, this, handle, x, y, z);
  }

  public void SetTargetLocation(int handle, Vector3D location) {
    GDXJNI.EffekseerManagerCore_SetTargetLocation__SWIG_1(swigCPtr, this, handle, Vector3D.getCPtr(location), location);
  }

  public void SetProjectionMatrix(float[] matrix44, float[] matrix44C, boolean view, float width, float height) {
    GDXJNI.EffekseerManagerCore_SetProjectionMatrix(swigCPtr, this, matrix44, matrix44C, view, width, height);
  }

  public float GetDynamicInput(int handle, int index) {
    return GDXJNI.EffekseerManagerCore_GetDynamicInput(swigCPtr, this, handle, index);
  }

  public void SetDynamicInput(int handle, int index, float value) {
    GDXJNI.EffekseerManagerCore_SetDynamicInput(swigCPtr, this, handle, index, value);
  }

  public boolean GetShown(int handle) {
    return GDXJNI.EffekseerManagerCore_GetShown(swigCPtr, this, handle);
  }

  public void SetShown(int handle, boolean shown) {
    GDXJNI.EffekseerManagerCore_SetShown(swigCPtr, this, handle, shown);
  }

  public boolean GetPaused(int handle) {
    return GDXJNI.EffekseerManagerCore_GetPaused(swigCPtr, this, handle);
  }

  public void SetPaused(int handle, boolean paused) {
    GDXJNI.EffekseerManagerCore_SetPaused(swigCPtr, this, handle, paused);
  }

  public void SetPausedToAllEffects(boolean paused) {
    GDXJNI.EffekseerManagerCore_SetPausedToAllEffects(swigCPtr, this, paused);
  }

  public int GetLayer(int handle) {
    return GDXJNI.EffekseerManagerCore_GetLayer(swigCPtr, this, handle);
  }

  public void SetLayer(int handle, int layer) {
    GDXJNI.EffekseerManagerCore_SetLayer(swigCPtr, this, handle, layer);
  }

  public long GetGroupMask(int handle) {
    return GDXJNI.EffekseerManagerCore_GetGroupMask(swigCPtr, this, handle);
  }

  public void SetGroupMask(int handle, long groupmask) {
    GDXJNI.EffekseerManagerCore_SetGroupMask(swigCPtr, this, handle, groupmask);
  }

  public float GetSpeed(int handle) {
    return GDXJNI.EffekseerManagerCore_GetSpeed(swigCPtr, this, handle);
  }

  public void SetSpeed(int handle, float speed) {
    GDXJNI.EffekseerManagerCore_SetSpeed(swigCPtr, this, handle, speed);
  }

  public void SetTimeScaleByGroup(long groupmask, float timeScale) {
    GDXJNI.EffekseerManagerCore_SetTimeScaleByGroup(swigCPtr, this, groupmask, timeScale);
  }

  public void SetTimeScaleByHandle(int handle, float timeScale) {
    GDXJNI.EffekseerManagerCore_SetTimeScaleByHandle(swigCPtr, this, handle, timeScale);
  }

  public void SetAutoDrawing(int handle, boolean autoDraw) {
    GDXJNI.EffekseerManagerCore_SetAutoDrawing(swigCPtr, this, handle, autoDraw);
  }

  public void Flip() {
    GDXJNI.EffekseerManagerCore_Flip(swigCPtr, this);
  }

  public void Update(float deltaFrames) {
    GDXJNI.EffekseerManagerCore_Update__SWIG_0(swigCPtr, this, deltaFrames);
  }

  public void Update(EffekseerManagerParameters.UpdateParameter parameter) {
    GDXJNI.EffekseerManagerCore_Update__SWIG_1(swigCPtr, this, EffekseerManagerParameters.UpdateParameter.getCPtr(parameter), parameter);
  }

  public void BeginUpdate() {
    GDXJNI.EffekseerManagerCore_BeginUpdate(swigCPtr, this);
  }

  public void EndUpdate() {
    GDXJNI.EffekseerManagerCore_EndUpdate(swigCPtr, this);
  }

  public void UpdateHandle(int handle, float deltaFrame) {
    GDXJNI.EffekseerManagerCore_UpdateHandle__SWIG_0(swigCPtr, this, handle, deltaFrame);
  }

  public void UpdateHandle(int handle) {
    GDXJNI.EffekseerManagerCore_UpdateHandle__SWIG_1(swigCPtr, this, handle);
  }

  public void UpdateHandleToMoveToFrame(int handle, float frame) {
    GDXJNI.EffekseerManagerCore_UpdateHandleToMoveToFrame(swigCPtr, this, handle, frame);
  }

  public void SetTime(float time) {
    GDXJNI.EffekseerManagerCore_SetTime(swigCPtr, this, time);
  }

  public void UpdateCombined(float deltaFrames, float time, float[] projectionMatrix44, float[] viewMatrix44C, boolean view, float width, float height) {
    GDXJNI.EffekseerManagerCore_UpdateCombined(swigCPtr, this, deltaFrames, time, projectionMatrix44, viewMatrix44C, view, width, height);
  }

  public void BeginRendering() {
    GDXJNI.EffekseerManagerCore_BeginRendering(swigCPtr, this);
  }

  public void Draw(EffekseerManagerParameters.DrawParameter drawParameter) {
    GDXJNI.EffekseerManagerCore_Draw(swigCPtr, this, EffekseerManagerParameters.DrawParameter.getCPtr(drawParameter), drawParameter);
  }

  public void DrawBack() {
    GDXJNI.EffekseerManagerCore_DrawBack(swigCPtr, this);
  }

  public void DrawFront() {
    GDXJNI.EffekseerManagerCore_DrawFront(swigCPtr, this);
  }

  public void EndRendering() {
    GDXJNI.EffekseerManagerCore_EndRendering(swigCPtr, this);
  }

  public void DrawCombined(EffekseerManagerParameters.DrawParameter drawParameter) {
    GDXJNI.EffekseerManagerCore_DrawCombined(swigCPtr, this, EffekseerManagerParameters.DrawParameter.getCPtr(drawParameter), drawParameter);
  }

}
