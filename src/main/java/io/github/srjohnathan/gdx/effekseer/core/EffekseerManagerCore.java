/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.srjohnathan.gdx.effekseer.core;

public class EffekseerManagerCore {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected EffekseerManagerCore(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(EffekseerManagerCore obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        GDXJNI.delete_EffekseerManagerCore(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public EffekseerManagerCore() {
    this(GDXJNI.new_EffekseerManagerCore(), true);
  }

  public boolean Initialize(int spriteMaxCount, int id, boolean sgbd) {
    return GDXJNI.EffekseerManagerCore_Initialize(swigCPtr, this, spriteMaxCount, id, sgbd);
  }

  public void Update(float deltaFrames) {
    GDXJNI.EffekseerManagerCore_Update(swigCPtr, this, deltaFrames);
  }

  public int Play(EffekseerEffectCore effect) {
    return GDXJNI.EffekseerManagerCore_Play(swigCPtr, this, EffekseerEffectCore.getCPtr(effect), effect);
  }

  public boolean isPlaying(int handle) {
    return GDXJNI.EffekseerManagerCore_isPlaying(swigCPtr, this, handle);
  }

  public float Speed(int handle) {
    return GDXJNI.EffekseerManagerCore_Speed(swigCPtr, this, handle);
  }

  public void DrawBack() {
    GDXJNI.EffekseerManagerCore_DrawBack(swigCPtr, this);
  }

  public void DrawFront() {
    GDXJNI.EffekseerManagerCore_DrawFront(swigCPtr, this);
  }

  public void SetPause(int handle, boolean pause) {
    GDXJNI.EffekseerManagerCore_SetPause(swigCPtr, this, handle, pause);
  }

  public void SetProjectionMatrix(float[] matrix44, float[] matrix44C, boolean view, float width, float heith) {
    GDXJNI.EffekseerManagerCore_SetProjectionMatrix(swigCPtr, this, matrix44, matrix44C, view, width, heith);
  }

  public void SetEffectRotateAxis(int handle, float x, float y, float z, float angle) {
    GDXJNI.EffekseerManagerCore_SetEffectRotateAxis(swigCPtr, this, handle, x, y, z, angle);
  }

  public void SetEffectPosition(int handle, float x, float y, float z) {
    GDXJNI.EffekseerManagerCore_SetEffectPosition(swigCPtr, this, handle, x, y, z);
  }

  public void SetEffectScale(int handle, float x, float y, float z) {
    GDXJNI.EffekseerManagerCore_SetEffectScale(swigCPtr, this, handle, x, y, z);
  }

  public void Stop(int i) {
    GDXJNI.EffekseerManagerCore_Stop(swigCPtr, this, i);
  }

  public int InstanceCount(int handle) {
    return GDXJNI.EffekseerManagerCore_InstanceCount(swigCPtr, this, handle);
  }

  public float[] GetMatrix(int handle) {
    return GDXJNI.EffekseerManagerCore_GetMatrix(swigCPtr, this, handle);
  }

  public void SetMatrix(int handle, float[] matrix43) {
    GDXJNI.EffekseerManagerCore_SetMatrix(swigCPtr, this, handle, matrix43);
  }

}
