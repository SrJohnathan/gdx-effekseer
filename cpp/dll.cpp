/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



#include "lib/EffekseerBackendCore.h"
#include "lib/EffekseerEffectCore.h"
#include "lib/EffekseerManagerCore.h"
#include "lib/RefWrappers.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.Base.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/SIMD/Vec2f.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/SIMD/Vec3f.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.InternalStruct.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Parameter/Effekseer.Parameters.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Parameter/DynamicParameter.h"
// Undefine min/max function
#ifdef max
    #undef max
#endif
#ifdef min
    #undef min
#endif
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Parameter/Easing.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.FCurves.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Noise/CurlNoise.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/ForceField/ForceFields.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.EffectNode.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.EffectNodeRoot.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.EffectNodeSprite.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.EffectNodeRibbon.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.EffectNodeTrack.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.EffectNodeRing.h"
#include "Effekseer/Dev/Cpp/Effekseer/Effekseer/Effekseer.EffectNodeModel.h"

#define FillMeInAsSizeCannotBeDeterminedAutomatically = 16;



#include <stdint.h>		// Use the C99 official header



int char16_len(const char16_t* s)
{
	int cnt = 0;
	while(*s++) cnt++;
	return cnt;
}


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(jint count,float const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< float >(static_cast<std::vector< float >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_float_Sg__doSize(std::vector< float > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_float_Sg__doAdd__SWIG_0(std::vector< float > *self,std::vector< float >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_float_Sg__doAdd__SWIG_1(std::vector< float > *self,jint index,std::vector< float >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__doRemove(std::vector< float > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          float const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg__doGet(std::vector< float > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__doSet(std::vector< float > *self,jint index,std::vector< float >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          float const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_float_Sg__doRemoveRange(std::vector< float > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::array< float,2 >::const_reference std_array_Sl_float_Sc_2_Sg__get(std::array< float,2 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_float_Sc_2_Sg__set(std::array< float,2 > *self,int i,std::array< float,2 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::array< float,3 >::const_reference std_array_Sl_float_Sc_3_Sg__get(std::array< float,3 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_float_Sc_3_Sg__set(std::array< float,3 > *self,int i,std::array< float,3 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::array< float,4 >::const_reference std_array_Sl_float_Sc_4_Sg__get(std::array< float,4 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_float_Sc_4_Sg__set(std::array< float,4 > *self,int i,std::array< float,4 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::vector< std::array< float,4 > > *new_std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg___SWIG_2(jint count,std::array< float,4 > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::array< float,4 > >(static_cast<std::vector< std::array< float,4 > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doSize(std::vector< std::array< float,4 > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doAdd__SWIG_0(std::vector< std::array< float,4 > > *self,std::vector< std::array< float,4 > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doAdd__SWIG_1(std::vector< std::array< float,4 > > *self,jint index,std::vector< std::array< float,4 > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::array< float,4 > >::value_type std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doRemove(std::vector< std::array< float,4 > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::array< float,4 > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::array< float,4 > >::value_type const &std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doGet(std::vector< std::array< float,4 > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::array< float,4 > >::value_type std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doSet(std::vector< std::array< float,4 > > *self,jint index,std::vector< std::array< float,4 > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::array< float,4 > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doRemoveRange(std::vector< std::array< float,4 > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Effekseer::MaterialTextureParameter > *new_std_vector_Sl_Effekseer_MaterialTextureParameter_Sg___SWIG_2(jint count,Effekseer::MaterialTextureParameter const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< Effekseer::MaterialTextureParameter >(static_cast<std::vector< Effekseer::MaterialTextureParameter >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doSize(std::vector< Effekseer::MaterialTextureParameter > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doAdd__SWIG_0(std::vector< Effekseer::MaterialTextureParameter > *self,std::vector< Effekseer::MaterialTextureParameter >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doAdd__SWIG_1(std::vector< Effekseer::MaterialTextureParameter > *self,jint index,std::vector< Effekseer::MaterialTextureParameter >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Effekseer::MaterialTextureParameter >::value_type std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doRemove(std::vector< Effekseer::MaterialTextureParameter > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          Effekseer::MaterialTextureParameter const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Effekseer::MaterialTextureParameter >::value_type const &std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doGet(std::vector< Effekseer::MaterialTextureParameter > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< Effekseer::MaterialTextureParameter >::value_type std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doSet(std::vector< Effekseer::MaterialTextureParameter > *self,jint index,std::vector< Effekseer::MaterialTextureParameter >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          Effekseer::MaterialTextureParameter const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doRemoveRange(std::vector< Effekseer::MaterialTextureParameter > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::array< int,8 >::const_reference std_array_Sl_int32_t_Sc_8_Sg__get(std::array< int32_t,8 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_int32_t_Sc_8_Sg__set(std::array< int32_t,8 > *self,int i,std::array< int,8 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::array< enum Effekseer::TextureFilterType,8 >::const_reference std_array_Sl_Effekseer_TextureFilterType_Sc_8_Sg__get(std::array< Effekseer::TextureFilterType,8 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_Effekseer_TextureFilterType_Sc_8_Sg__set(std::array< Effekseer::TextureFilterType,8 > *self,int i,std::array< enum Effekseer::TextureFilterType,8 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::array< enum Effekseer::TextureWrapType,8 >::const_reference std_array_Sl_Effekseer_TextureWrapType_Sc_8_Sg__get(std::array< Effekseer::TextureWrapType,8 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_Effekseer_TextureWrapType_Sc_8_Sg__set(std::array< Effekseer::TextureWrapType,8 > *self,int i,std::array< enum Effekseer::TextureWrapType,8 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::array< Effekseer::SIMD::Vec3f,4 >::const_reference std_array_Sl_Effekseer_SIMD_Vec3f_Sc_4_Sg__get(std::array< Effekseer::SIMD::Vec3f,4 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_Effekseer_SIMD_Vec3f_Sc_4_Sg__set(std::array< Effekseer::SIMD::Vec3f,4 > *self,int i,std::array< Effekseer::SIMD::Vec3f,4 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN Effekseer::EffectNodeImplemented *Effekseer_EffectNode_getChild(Effekseer::EffectNode *self,int index){
        if (index >= self->GetChildrenCount())
            return nullptr;
        return static_cast<Effekseer::EffectNodeImplemented*>(self->GetChild(index));
    }
SWIGINTERN Effekseer::EffectNodeSprite *Effekseer_EffectNode_getChildAsSprite(Effekseer::EffectNode *self,int index){
        if (index >= self->GetChildrenCount())
            return nullptr;
        return static_cast<Effekseer::EffectNodeSprite*>(self->GetChild(index));
    }
SWIGINTERN Effekseer::EffectNodeRibbon *Effekseer_EffectNode_getChildAsRibbon(Effekseer::EffectNode *self,int index){
        if (index >= self->GetChildrenCount())
            return nullptr;
        return static_cast<Effekseer::EffectNodeRibbon*>(self->GetChild(index));
    }
SWIGINTERN Effekseer::EffectNodeTrack *Effekseer_EffectNode_getChildAsTrack(Effekseer::EffectNode *self,int index){
        if (index >= self->GetChildrenCount())
            return nullptr;
        return static_cast<Effekseer::EffectNodeTrack*>(self->GetChild(index));
    }
SWIGINTERN Effekseer::EffectNodeRing *Effekseer_EffectNode_getChildAsRing(Effekseer::EffectNode *self,int index){
        if (index >= self->GetChildrenCount())
            return nullptr;
        return static_cast<Effekseer::EffectNodeRing*>(self->GetChild(index));
    }
SWIGINTERN Effekseer::EffectNodeModel *Effekseer_EffectNode_getChildAsModel(Effekseer::EffectNode *self,int index){
        if (index >= self->GetChildrenCount())
            return nullptr;
        return static_cast<Effekseer::EffectNodeModel*>(self->GetChild(index));
    }
SWIGINTERN Effekseer::Color Effekseer_StandardColorParameter_getFixed(Effekseer::StandardColorParameter *self){ return self->fixed.all; }
SWIGINTERN void Effekseer_StandardColorParameter_setFixed(Effekseer::StandardColorParameter *self,Effekseer::Color value){ self->fixed.all = value; }
SWIGINTERN Effekseer::random_color Effekseer_StandardColorParameter_getRandom(Effekseer::StandardColorParameter *self){ return self->random.all; }
SWIGINTERN void Effekseer_StandardColorParameter_setRandom(Effekseer::StandardColorParameter *self,Effekseer::random_color value){ self->random.all = value; }
SWIGINTERN Effekseer::easing_color Effekseer_StandardColorParameter_getEasing(Effekseer::StandardColorParameter *self){ return self->easing.all; }
SWIGINTERN void Effekseer_StandardColorParameter_setEasing(Effekseer::StandardColorParameter *self,Effekseer::easing_color value){ self->easing.all = value; }
SWIGINTERN Effekseer::FCurveVectorColor *Effekseer_StandardColorParameter_getFCurveRGBA(Effekseer::StandardColorParameter *self){ return self->fcurve_rgba.FCurve; }
SWIGINTERN void Effekseer_StandardColorParameter_setFCurveRGBA(Effekseer::StandardColorParameter *self,Effekseer::FCurveVectorColor *value){ self->fcurve_rgba.FCurve = value; }
SWIGINTERN Effekseer::random_vector3d Effekseer_ParameterGenerationLocation_getPointLocation(Effekseer::ParameterGenerationLocation *self){ return self->point.location; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setPointLocation(Effekseer::ParameterGenerationLocation *self,Effekseer::random_vector3d value){ self->point.location = value; }
SWIGINTERN Effekseer::random_float Effekseer_ParameterGenerationLocation_getSphereRadius(Effekseer::ParameterGenerationLocation *self){ return self->sphere.radius; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setSphereRadius(Effekseer::ParameterGenerationLocation *self,Effekseer::random_float value){ self->sphere.radius = value; }
SWIGINTERN Effekseer::random_float Effekseer_ParameterGenerationLocation_getSphereRotationX(Effekseer::ParameterGenerationLocation *self){ return self->sphere.rotation_x; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setSphereRotationX(Effekseer::ParameterGenerationLocation *self,Effekseer::random_float value){ self->sphere.rotation_x = value; }
SWIGINTERN Effekseer::random_float Effekseer_ParameterGenerationLocation_getSphereRotationY(Effekseer::ParameterGenerationLocation *self){ return self->sphere.rotation_y; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setSphereRotationY(Effekseer::ParameterGenerationLocation *self,Effekseer::random_float value){ self->sphere.rotation_y = value; }
SWIGINTERN Effekseer::ModelReferenceType Effekseer_ParameterGenerationLocation_getModelReferenceType(Effekseer::ParameterGenerationLocation *self){ return self->model.Reference; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setModelReferenceType(Effekseer::ParameterGenerationLocation *self,Effekseer::ModelReferenceType value){ self->model.Reference = value; }
SWIGINTERN int32_t Effekseer_ParameterGenerationLocation_getModelIndex(Effekseer::ParameterGenerationLocation *self){ return self->model.index; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setModelIndex(Effekseer::ParameterGenerationLocation *self,int32_t value){ self->model.index = value; }
SWIGINTERN Effekseer::ParameterGenerationLocation::eModelType Effekseer_ParameterGenerationLocation_getModelType(Effekseer::ParameterGenerationLocation *self){ return self->model.type; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setModelType(Effekseer::ParameterGenerationLocation *self,Effekseer::ParameterGenerationLocation::eModelType value){ self->model.type = value; }
SWIGINTERN int32_t Effekseer_ParameterGenerationLocation_getCircleDivision(Effekseer::ParameterGenerationLocation *self){ return self->circle.division; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setCircleDivision(Effekseer::ParameterGenerationLocation *self,int32_t value){ self->circle.division = value; }
SWIGINTERN Effekseer::random_float Effekseer_ParameterGenerationLocation_getCircleRadius(Effekseer::ParameterGenerationLocation *self){ return self->circle.radius; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setCircleRadius(Effekseer::ParameterGenerationLocation *self,Effekseer::random_float value){ self->circle.radius = value; }
SWIGINTERN Effekseer::random_float Effekseer_ParameterGenerationLocation_getCircleAngleStart(Effekseer::ParameterGenerationLocation *self){ return self->circle.angle_start; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setCircleAngleStart(Effekseer::ParameterGenerationLocation *self,Effekseer::random_float value){ self->circle.angle_start = value; }
SWIGINTERN Effekseer::random_float Effekseer_ParameterGenerationLocation_getCircleAngleEnd(Effekseer::ParameterGenerationLocation *self){ return self->circle.angle_end; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setCircleAngleEnd(Effekseer::ParameterGenerationLocation *self,Effekseer::random_float value){ self->circle.angle_end = value; }
SWIGINTERN Effekseer::ParameterGenerationLocation::eCircleType Effekseer_ParameterGenerationLocation_getCircleType(Effekseer::ParameterGenerationLocation *self){ return self->circle.type; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setCircleType(Effekseer::ParameterGenerationLocation *self,Effekseer::ParameterGenerationLocation::eCircleType value){ self->circle.type = value; }
SWIGINTERN Effekseer::ParameterGenerationLocation::AxisType Effekseer_ParameterGenerationLocation_getCircleAxisDirection(Effekseer::ParameterGenerationLocation *self){ return self->circle.axisDirection; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setCircleAxisDirection(Effekseer::ParameterGenerationLocation *self,Effekseer::ParameterGenerationLocation::AxisType value){ self->circle.axisDirection = value; }
SWIGINTERN Effekseer::random_float Effekseer_ParameterGenerationLocation_getCircleAngleNoise(Effekseer::ParameterGenerationLocation *self){ return self->circle.angle_noize; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setCircleAngleNoise(Effekseer::ParameterGenerationLocation *self,Effekseer::random_float value){ self->circle.angle_noize = value; }
SWIGINTERN int32_t Effekseer_ParameterGenerationLocation_getLineDivision(Effekseer::ParameterGenerationLocation *self){ return self->line.division; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setLineDivision(Effekseer::ParameterGenerationLocation *self,int32_t value){ self->line.division = value; }
SWIGINTERN Effekseer::random_vector3d Effekseer_ParameterGenerationLocation_getLinePositionStart(Effekseer::ParameterGenerationLocation *self){ return self->line.position_start; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setLinePositionStart(Effekseer::ParameterGenerationLocation *self,Effekseer::random_vector3d value){ self->line.position_start = value; }
SWIGINTERN Effekseer::random_vector3d Effekseer_ParameterGenerationLocation_getLinePositionEnd(Effekseer::ParameterGenerationLocation *self){ return self->line.position_end; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setLinePositionEnd(Effekseer::ParameterGenerationLocation *self,Effekseer::random_vector3d value){ self->line.position_end = value; }
SWIGINTERN Effekseer::random_float Effekseer_ParameterGenerationLocation_getLinePositionNoise(Effekseer::ParameterGenerationLocation *self){ return self->line.position_noize; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setLinePositionNoise(Effekseer::ParameterGenerationLocation *self,Effekseer::random_float value){ self->line.position_noize = value; }
SWIGINTERN Effekseer::ParameterGenerationLocation::LineType Effekseer_ParameterGenerationLocation_getLineType(Effekseer::ParameterGenerationLocation *self){ return self->line.type; }
SWIGINTERN void Effekseer_ParameterGenerationLocation_setLineType(Effekseer::ParameterGenerationLocation *self,Effekseer::ParameterGenerationLocation::LineType value){ self->line.type = value; }
SWIGINTERN int Effekseer_ParameterRendererCommon_getUVTypes(Effekseer::ParameterRendererCommon *self,int index){ return self->UVTypes[index]; }
SWIGINTERN void Effekseer_ParameterRendererCommon_setUVTypes(Effekseer::ParameterRendererCommon *self,int index,int value){
        if (value == Effekseer::ParameterRendererCommon::UV_DEFAULT) {
            self->UVTypes[index] = Effekseer::ParameterRendererCommon::UV_DEFAULT;
        }
        else if (value == Effekseer::ParameterRendererCommon::UV_FIXED) {
            self->UVTypes[index] = Effekseer::ParameterRendererCommon::UV_FIXED;
        }
        else if (value == Effekseer::ParameterRendererCommon::UV_ANIMATION) {
            self->UVTypes[index] = Effekseer::ParameterRendererCommon::UV_ANIMATION;
        }
        else if (value == Effekseer::ParameterRendererCommon::UV_SCROLL) {
            self->UVTypes[index] = Effekseer::ParameterRendererCommon::UV_SCROLL;
        }
        else if (value == Effekseer::ParameterRendererCommon::UV_FCURVE) {
            self->UVTypes[index] = Effekseer::ParameterRendererCommon::UV_FCURVE;
        }
        else if (value == Effekseer::ParameterRendererCommon::UV_DWORD) {
            self->UVTypes[index] = Effekseer::ParameterRendererCommon::UV_DWORD;
        }
        else {
            self->UVTypes[index] = Effekseer::ParameterRendererCommon::UV_DEFAULT;
        }
    }
SWIGINTERN Effekseer::Color Effekseer_SpriteColorParameter_getFixedLowerLeftColor(Effekseer::SpriteColorParameter *self){ return self->fixed.ll; }
SWIGINTERN void Effekseer_SpriteColorParameter_setFixedLowerLeftColor(Effekseer::SpriteColorParameter *self,Effekseer::Color value){ self->fixed.ll = value; }
SWIGINTERN Effekseer::Color Effekseer_SpriteColorParameter_getFixedLowerRightColor(Effekseer::SpriteColorParameter *self){ return self->fixed.lr; }
SWIGINTERN void Effekseer_SpriteColorParameter_setFixedLowerRightColor(Effekseer::SpriteColorParameter *self,Effekseer::Color value){ self->fixed.lr = value; }
SWIGINTERN Effekseer::Color Effekseer_SpriteColorParameter_getFixedUpperLeftColor(Effekseer::SpriteColorParameter *self){ return self->fixed.ul; }
SWIGINTERN void Effekseer_SpriteColorParameter_setFixedUpperLeftColor(Effekseer::SpriteColorParameter *self,Effekseer::Color value){ self->fixed.ul = value; }
SWIGINTERN Effekseer::Color Effekseer_SpriteColorParameter_getFixedUpperRightColor(Effekseer::SpriteColorParameter *self){ return self->fixed.ur; }
SWIGINTERN void Effekseer_SpriteColorParameter_setFixedUpperRightColor(Effekseer::SpriteColorParameter *self,Effekseer::Color value){ self->fixed.ur = value; }
SWIGINTERN Effekseer::SIMD::Vec2f Effekseer_SpritePositionParameter_getFixedLowerLeftPos(Effekseer::SpritePositionParameter *self){ return self->fixed.ll; }
SWIGINTERN void Effekseer_SpritePositionParameter_setFixedLowerLeftPos(Effekseer::SpritePositionParameter *self,Effekseer::SIMD::Vec2f value){ self->fixed.ll = value; }
SWIGINTERN Effekseer::SIMD::Vec2f Effekseer_SpritePositionParameter_getFixedLowerRightPos(Effekseer::SpritePositionParameter *self){ return self->fixed.lr; }
SWIGINTERN void Effekseer_SpritePositionParameter_setFixedLowerRightPos(Effekseer::SpritePositionParameter *self,Effekseer::SIMD::Vec2f value){ self->fixed.lr = value; }
SWIGINTERN Effekseer::SIMD::Vec2f Effekseer_SpritePositionParameter_getFixedUpperLeftPos(Effekseer::SpritePositionParameter *self){ return self->fixed.ul; }
SWIGINTERN void Effekseer_SpritePositionParameter_setFixedUpperLeftPos(Effekseer::SpritePositionParameter *self,Effekseer::SIMD::Vec2f value){ self->fixed.ul = value; }
SWIGINTERN Effekseer::SIMD::Vec2f Effekseer_SpritePositionParameter_getFixedUpperRightPos(Effekseer::SpritePositionParameter *self){ return self->fixed.ur; }
SWIGINTERN void Effekseer_SpritePositionParameter_setFixedUpperRightPos(Effekseer::SpritePositionParameter *self,Effekseer::SIMD::Vec2f value){ self->fixed.ur = value; }
SWIGINTERN Effekseer::Color Effekseer_RibbonAllColorParameter_getFixedAllColor(Effekseer::RibbonAllColorParameter *self){ return self->fixed.all; }
SWIGINTERN void Effekseer_RibbonAllColorParameter_setFixedAllColor(Effekseer::RibbonAllColorParameter *self,Effekseer::Color value){ self->fixed.all = value; }
SWIGINTERN Effekseer::random_color Effekseer_RibbonAllColorParameter_getRandomAllColor(Effekseer::RibbonAllColorParameter *self){ return self->random.all; }
SWIGINTERN void Effekseer_RibbonAllColorParameter_setRandomAllColor(Effekseer::RibbonAllColorParameter *self,Effekseer::random_color value){ self->random.all = value; }
SWIGINTERN Effekseer::easing_color Effekseer_RibbonAllColorParameter_getEasingAllColor(Effekseer::RibbonAllColorParameter *self){ return self->easing.all; }
SWIGINTERN void Effekseer_RibbonAllColorParameter_setEasingAllColor(Effekseer::RibbonAllColorParameter *self,Effekseer::easing_color value){ self->easing.all = value; }
SWIGINTERN Effekseer::Color Effekseer_RibbonColorParameter_getFixedLeftColor(Effekseer::RibbonColorParameter *self){ return self->fixed.l; }
SWIGINTERN void Effekseer_RibbonColorParameter_setFixedLeftColor(Effekseer::RibbonColorParameter *self,Effekseer::Color value){ self->fixed.l = value; }
SWIGINTERN Effekseer::Color Effekseer_RibbonColorParameter_getFixedRightColor(Effekseer::RibbonColorParameter *self){ return self->fixed.r; }
SWIGINTERN void Effekseer_RibbonColorParameter_setFixedRightColor(Effekseer::RibbonColorParameter *self,Effekseer::Color value){ self->fixed.r = value; }
SWIGINTERN float Effekseer_RibbonPositionParameter_getFixedLeftCoord(Effekseer::RibbonPositionParameter *self){ return self->fixed.l; }
SWIGINTERN void Effekseer_RibbonPositionParameter_setFixedLeftCoord(Effekseer::RibbonPositionParameter *self,float value){ self->fixed.l = value; }
SWIGINTERN float Effekseer_RibbonPositionParameter_getFixedRightCoord(Effekseer::RibbonPositionParameter *self){ return self->fixed.r; }
SWIGINTERN void Effekseer_RibbonPositionParameter_setFixedRightCoord(Effekseer::RibbonPositionParameter *self,float value){ self->fixed.r = value; }
SWIGINTERN float Effekseer_TrackSizeParameter_getFixedSize(Effekseer::TrackSizeParameter *self){ return self->fixed.size; }
SWIGINTERN void Effekseer_TrackSizeParameter_setFixedSize(Effekseer::TrackSizeParameter *self,float value){ self->fixed.size = value; }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > const & reference is null");
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (bool)((std::vector< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorFloat_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1,(float const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  try {
    result = std_vector_Sl_float_Sg__doSize((std::vector< float > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_float_Sg__doAdd__SWIG_0(arg1,(float const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__doAdd__SWIG_1(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  std::vector< float >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  std::vector< float >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__doSet(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloat_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_float_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1VectorFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FloatArray2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< float,2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::array< float,2 > *)new std::array< float,2 >();
  *(std::array< float,2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FloatArray2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< float,2 > *arg1 = 0 ;
  std::array< float,2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,2 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< float,2 > const & reference is null");
    return 0;
  } 
  result = (std::array< float,2 > *)new std::array< float,2 >((std::array< float,2 > const &)*arg1);
  *(std::array< float,2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray2_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< float,2 > *arg1 = (std::array< float,2 > *) 0 ;
  std::array< float,2 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,2 > **)&jarg1; 
  result = ((std::array< float,2 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< float,2 > *arg1 = (std::array< float,2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,2 > **)&jarg1; 
  result = (bool)((std::array< float,2 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray2_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::array< float,2 > *arg1 = (std::array< float,2 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,2 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->fill((float const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::array< float,2 > *arg1 = (std::array< float,2 > *) 0 ;
  int arg2 ;
  std::array< float,2 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,2 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< float,2 >::value_type *) &std_array_Sl_float_Sc_2_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::array< float,2 > *arg1 = (std::array< float,2 > *) 0 ;
  int arg2 ;
  std::array< float,2 >::value_type *arg3 = 0 ;
  std::array< float,2 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,2 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< float,2 >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_array_Sl_float_Sc_2_Sg__set(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FloatArray2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< float,2 > *arg1 = (std::array< float,2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< float,2 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FloatArray3_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< float,3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::array< float,3 > *)new std::array< float,3 >();
  *(std::array< float,3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FloatArray3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< float,3 > *arg1 = 0 ;
  std::array< float,3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,3 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< float,3 > const & reference is null");
    return 0;
  } 
  result = (std::array< float,3 > *)new std::array< float,3 >((std::array< float,3 > const &)*arg1);
  *(std::array< float,3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray3_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< float,3 > *arg1 = (std::array< float,3 > *) 0 ;
  std::array< float,3 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,3 > **)&jarg1; 
  result = ((std::array< float,3 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray3_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< float,3 > *arg1 = (std::array< float,3 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,3 > **)&jarg1; 
  result = (bool)((std::array< float,3 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray3_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::array< float,3 > *arg1 = (std::array< float,3 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,3 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->fill((float const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::array< float,3 > *arg1 = (std::array< float,3 > *) 0 ;
  int arg2 ;
  std::array< float,3 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,3 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< float,3 >::value_type *) &std_array_Sl_float_Sc_3_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::array< float,3 > *arg1 = (std::array< float,3 > *) 0 ;
  int arg2 ;
  std::array< float,3 >::value_type *arg3 = 0 ;
  std::array< float,3 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,3 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< float,3 >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_array_Sl_float_Sc_3_Sg__set(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FloatArray3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< float,3 > *arg1 = (std::array< float,3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< float,3 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FloatArray4_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< float,4 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::array< float,4 > *)new std::array< float,4 >();
  *(std::array< float,4 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FloatArray4_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< float,4 > *arg1 = 0 ;
  std::array< float,4 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,4 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< float,4 > const & reference is null");
    return 0;
  } 
  result = (std::array< float,4 > *)new std::array< float,4 >((std::array< float,4 > const &)*arg1);
  *(std::array< float,4 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray4_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< float,4 > *arg1 = (std::array< float,4 > *) 0 ;
  std::array< float,4 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,4 > **)&jarg1; 
  result = ((std::array< float,4 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray4_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< float,4 > *arg1 = (std::array< float,4 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,4 > **)&jarg1; 
  result = (bool)((std::array< float,4 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray4_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::array< float,4 > *arg1 = (std::array< float,4 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,4 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->fill((float const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::array< float,4 > *arg1 = (std::array< float,4 > *) 0 ;
  int arg2 ;
  std::array< float,4 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,4 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< float,4 >::value_type *) &std_array_Sl_float_Sc_4_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FloatArray4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::array< float,4 > *arg1 = (std::array< float,4 > *) 0 ;
  int arg2 ;
  std::array< float,4 >::value_type *arg3 = 0 ;
  std::array< float,4 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,4 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< float,4 >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_array_Sl_float_Sc_4_Sg__set(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FloatArray4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< float,4 > *arg1 = (std::array< float,4 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< float,4 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorFloatArray4_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::array< float,4 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::array< float,4 > > *)new std::vector< std::array< float,4 > >();
  *(std::vector< std::array< float,4 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorFloatArray4_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::array< float,4 > > *arg1 = 0 ;
  std::vector< std::array< float,4 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::array< float,4 > > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::array< float,4 > > *)new std::vector< std::array< float,4 > >((std::vector< std::array< float,4 > > const &)*arg1);
  *(std::vector< std::array< float,4 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  std::vector< std::array< float,4 > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  result = ((std::vector< std::array< float,4 > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  std::vector< std::array< float,4 > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  arg2 = (std::vector< std::array< float,4 > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  result = (bool)((std::vector< std::array< float,4 > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorFloatArray4_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::array< float,4 > *arg2 = 0 ;
  std::vector< std::array< float,4 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(std::array< float,4 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< float,4 > const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< std::array< float,4 > > *)new_std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg___SWIG_2(arg1,(std::array< float,4 > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::array< float,4 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doSize((std::vector< std::array< float,4 > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  std::vector< std::array< float,4 > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  arg2 = *(std::vector< std::array< float,4 > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::array< float,4 > >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doAdd__SWIG_0(arg1,(std::array< float,4 > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  jint arg2 ;
  std::vector< std::array< float,4 > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::array< float,4 > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::array< float,4 > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(std::array< float,4 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  jint arg2 ;
  std::vector< std::array< float,4 > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::array< float,4 > >::value_type **)&jresult = new std::vector< std::array< float,4 > >::value_type((const std::vector< std::array< float,4 > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  jint arg2 ;
  std::vector< std::array< float,4 > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::array< float,4 > >::value_type *) &std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::array< float,4 > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  jint arg2 ;
  std::vector< std::array< float,4 > >::value_type *arg3 = 0 ;
  std::vector< std::array< float,4 > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::array< float,4 > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::array< float,4 > >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doSet(arg1,arg2,(std::array< float,4 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::array< float,4 > >::value_type **)&jresult = new std::vector< std::array< float,4 > >::value_type((const std::vector< std::array< float,4 > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorFloatArray4_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_array_Sl_float_Sc_4_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1VectorFloatArray4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::array< float,4 > > *arg1 = (std::vector< std::array< float,4 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::array< float,4 > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffekseerBackendCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EffekseerBackendCore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EffekseerBackendCore *)new EffekseerBackendCore();
  *(EffekseerBackendCore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffekseerBackendCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EffekseerBackendCore *arg1 = (EffekseerBackendCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EffekseerBackendCore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerBackendCore_1InitializeAsOpenGL(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)EffekseerBackendCore::InitializeAsOpenGL();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerBackendCore_1Terminate(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  EffekseerBackendCore::Terminate();
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffekseerEffectCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EffekseerEffectCore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EffekseerEffectCore *)new EffekseerEffectCore();
  *(EffekseerEffectCore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffekseerEffectCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  char16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  result = (char16_t *)(arg1)->GetName();
  {
    if(result) jresult = jenv->NewString((const jchar *) result, char16_len (result)); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (char16_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->SetName((char16_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  result = (int)(arg1)->GetVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3, jint jarg4, jfloat jarg5) {
  jboolean jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  EffekseerManagerCore *arg2 = (EffekseerManagerCore *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  float arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = *(EffekseerManagerCore **)&jarg2; 
  {
    arg3 = (unsigned char *) jenv->GetByteArrayElements(jarg3, 0);
  }
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->load(arg2,(unsigned char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3, 0);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetTextureCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  EffekseerTextureType arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (EffekseerTextureType)jarg2; 
  result = (int32_t)((EffekseerEffectCore const *)arg1)->GetTextureCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetTexturePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  EffekseerTextureType arg3 ;
  char16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (EffekseerTextureType)jarg3; 
  result = (char16_t *)((EffekseerEffectCore const *)arg1)->GetTexturePath(arg2,arg3);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, char16_len (result)); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1LoadTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int32_t arg4 ;
  EffekseerTextureType arg5 ;
  SwigValueWrapper< TextureRefWrapper > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (int)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (EffekseerTextureType)jarg5; 
  result = (arg1)->LoadTexture((unsigned char const *)arg2,arg3,arg4,arg5);
  *(TextureRefWrapper **)&jresult = new TextureRefWrapper((const TextureRefWrapper &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1SetTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  EffekseerTextureType arg3 ;
  SwigValueWrapper< TextureRefWrapper > arg4 ;
  TextureRefWrapper *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (EffekseerTextureType)jarg3; 
  argp4 = *(TextureRefWrapper **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TextureRefWrapper");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->SetTexture(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1HasTextureLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  EffekseerTextureType arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (EffekseerTextureType)jarg3; 
  result = (bool)(arg1)->HasTextureLoaded(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetModelCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  result = (int32_t)((EffekseerEffectCore const *)arg1)->GetModelCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetModelPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  char16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (char16_t *)((EffekseerEffectCore const *)arg1)->GetModelPath(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, char16_len (result)); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1LoadModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int32_t arg4 ;
  SwigValueWrapper< ModelRefWrapper > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (int)jarg3; 
  arg4 = (int32_t)jarg4; 
  result = (arg1)->LoadModel((unsigned char const *)arg2,arg3,arg4);
  *(ModelRefWrapper **)&jresult = new ModelRefWrapper((const ModelRefWrapper &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1SetModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  SwigValueWrapper< ModelRefWrapper > arg3 ;
  ModelRefWrapper *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  argp3 = *(ModelRefWrapper **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ModelRefWrapper");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetModel(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1HasModelLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (bool)(arg1)->HasModelLoaded(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetMaterialCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  result = (int32_t)((EffekseerEffectCore const *)arg1)->GetMaterialCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetMaterialPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  char16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (char16_t *)((EffekseerEffectCore const *)arg1)->GetMaterialPath(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, char16_len (result)); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1LoadMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int32_t arg4 ;
  SwigValueWrapper< MaterialRefWrapper > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
  }
  arg3 = (int)jarg3; 
  arg4 = (int32_t)jarg4; 
  result = (arg1)->LoadMaterial((unsigned char const *)arg2,arg3,arg4);
  *(MaterialRefWrapper **)&jresult = new MaterialRefWrapper((const MaterialRefWrapper &)result); 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1SetMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  SwigValueWrapper< MaterialRefWrapper > arg3 ;
  MaterialRefWrapper *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  argp3 = *(MaterialRefWrapper **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null MaterialRefWrapper");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetMaterial(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1HasMaterialLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (bool)(arg1)->HasMaterialLoaded(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1NodeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  result = (int32_t)(arg1)->NodeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerEffectCore_1GetRootNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  EffekseerEffectCore *arg1 = (EffekseerEffectCore *) 0 ;
  Effekseer::EffectNodeRoot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerEffectCore **)&jarg1; 
  result = (Effekseer::EffectNodeRoot *)(arg1)->GetRootNode();
  *(Effekseer::EffectNodeRoot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffekseerManagerCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EffekseerManagerCore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EffekseerManagerCore *)new EffekseerManagerCore();
  *(EffekseerManagerCore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffekseerManagerCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1Initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->Initialize(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1LaunchWorkerThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->LaunchWorkerThreads(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1Exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->Exists(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1Play(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  EffekseerEffectCore *arg2 = (EffekseerEffectCore *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = *(EffekseerEffectCore **)&jarg2; 
  result = (int)(arg1)->Play(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1StopEffect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->StopEffect(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1StopAllEffects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  (arg1)->StopAllEffects();
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1StopRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->StopRoot(arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetInstanceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int32_t)(arg1)->GetInstanceCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetTotalInstanceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  result = (int32_t)(arg1)->GetTotalInstanceCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloatArray jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float *)(arg1)->GetMatrix(arg2);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, 16); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float *arg3 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->SetMatrix(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetMatrixBatch2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float *arg3 ;
  int arg4 ;
  float *arg5 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  (arg1)->SetMatrixBatch2(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetMatrixBatch4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jint jarg6, jfloatArray jarg7, jint jarg8, jfloatArray jarg9) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float *arg3 ;
  int arg4 ;
  float *arg5 ;
  int arg6 ;
  float *arg7 ;
  int arg8 ;
  float *arg9 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jfloat *jarr7 ;
  jfloat *jarr9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  arg6 = (int)jarg6; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  arg8 = (int)jarg8; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr9, (float **)&arg9, jarg9)) return ; 
  (arg1)->SetMatrixBatch4(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr9, (float *)arg9, jarg9); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg7; 
  delete [] arg9; 
}


SWIGEXPORT jfloatArray JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetBaseMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloatArray jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float *)(arg1)->GetBaseMatrix(arg2);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, 16); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetBaseMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float *arg3 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->SetBaseMatrix(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  Vector3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetLocation(arg2);
  *(Vector3D **)&jresult = new Vector3D((const Vector3D &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetLocation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetLocation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetLocation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  Vector3D *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Vector3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector3D const & reference is null");
    return ;
  } 
  (arg1)->SetLocation(arg2,(Vector3D const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1AddLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  Vector3D *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Vector3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector3D const & reference is null");
    return ;
  } 
  (arg1)->AddLocation(arg2,(Vector3D const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetRotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetRotation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetRotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  Vector3D *arg3 = 0 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Vector3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector3D const & reference is null");
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->SetRotation(arg2,(Vector3D const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetScale(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetAllColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  Color arg3 ;
  Color *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(Color **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Color");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetAllColor(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetTargetLocation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetTargetLocation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetTargetLocation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  Vector3D *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Vector3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector3D const & reference is null");
    return ;
  } 
  (arg1)->SetTargetLocation(arg2,(Vector3D const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetProjectionMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jfloatArray jarg3, jboolean jarg4, jfloat jarg5, jfloat jarg6) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  float *arg2 ;
  float *arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->SetProjectionMatrix(arg2,arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetDynamicInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  int32_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32_t)jarg3; 
  result = (float)(arg1)->GetDynamicInput(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetDynamicInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloat jarg4) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  int32_t arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetDynamicInput(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetShown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetShown(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetShown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetShown(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetPaused(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetPaused(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetPausedToAllEffects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPausedToAllEffects(arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetLayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetLayer(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetLayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->SetLayer(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetGroupMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)(arg1)->GetGroupMask(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetGroupMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->SetGroupMask(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1GetSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->GetSpeed(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetSpeed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetTimeScaleByGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int64_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetTimeScaleByGroup(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetTimeScaleByHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetTimeScaleByHandle(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetAutoDrawing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetAutoDrawing(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1Flip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  (arg1)->Flip();
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1Update_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Update(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1Update_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  UpdateParameter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = *(UpdateParameter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "UpdateParameter const & reference is null");
    return ;
  } 
  (arg1)->Update((UpdateParameter const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1BeginUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  (arg1)->BeginUpdate();
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1EndUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  (arg1)->EndUpdate();
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1UpdateHandle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->UpdateHandle(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1UpdateHandle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UpdateHandle(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1UpdateHandleToMoveToFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->UpdateHandleToMoveToFrame(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1SetTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTime(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1UpdateCombined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloatArray jarg4, jfloatArray jarg5, jboolean jarg6, jfloat jarg7, jfloat jarg8) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  float arg2 ;
  float arg3 ;
  float *arg4 ;
  float *arg5 ;
  bool arg6 ;
  float arg7 ;
  float arg8 ;
  jfloat *jarr4 ;
  jfloat *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  arg6 = jarg6 ? true : false; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->UpdateCombined(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1BeginRendering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  (arg1)->BeginRendering();
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1Draw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  Effekseer::Manager::DrawParameter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = *(Effekseer::Manager::DrawParameter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::Manager::DrawParameter const & reference is null");
    return ;
  } 
  (arg1)->Draw((Effekseer::Manager::DrawParameter const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1DrawBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  (arg1)->DrawBack();
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1DrawFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  (arg1)->DrawFront();
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1EndRendering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  (arg1)->EndRendering();
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerCore_1DrawCombined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  EffekseerManagerCore *arg1 = (EffekseerManagerCore *) 0 ;
  Effekseer::Manager::DrawParameter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(EffekseerManagerCore **)&jarg1; 
  arg2 = *(Effekseer::Manager::DrawParameter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::Manager::DrawParameter const & reference is null");
    return ;
  } 
  (arg1)->DrawCombined((Effekseer::Manager::DrawParameter const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TextureRefWrapper_1hasRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TextureRefWrapper *arg1 = (TextureRefWrapper *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TextureRefWrapper **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasRef = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TextureRefWrapper_1hasRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TextureRefWrapper *arg1 = (TextureRefWrapper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TextureRefWrapper **)&jarg1; 
  result = (bool) ((arg1)->hasRef);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1TextureRefWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TextureRefWrapper *arg1 = (TextureRefWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TextureRefWrapper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ModelRefWrapper_1hasRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ModelRefWrapper *arg1 = (ModelRefWrapper *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelRefWrapper **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasRef = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ModelRefWrapper_1hasRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ModelRefWrapper *arg1 = (ModelRefWrapper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ModelRefWrapper **)&jarg1; 
  result = (bool) ((arg1)->hasRef);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ModelRefWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModelRefWrapper *arg1 = (ModelRefWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModelRefWrapper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialRefWrapper_1hasRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  MaterialRefWrapper *arg1 = (MaterialRefWrapper *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MaterialRefWrapper **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasRef = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialRefWrapper_1hasRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MaterialRefWrapper *arg1 = (MaterialRefWrapper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MaterialRefWrapper **)&jarg1; 
  result = (bool) ((arg1)->hasRef);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1MaterialRefWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MaterialRefWrapper *arg1 = (MaterialRefWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MaterialRefWrapper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector2D_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::Vector2D *arg1 = (Effekseer::Vector2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector2D_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::Vector2D *arg1 = (Effekseer::Vector2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector2D **)&jarg1; 
  result = (float) ((arg1)->X);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector2D_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::Vector2D *arg1 = (Effekseer::Vector2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector2D_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::Vector2D *arg1 = (Effekseer::Vector2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector2D **)&jarg1; 
  result = (float) ((arg1)->Y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Vector2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::Vector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Vector2D *)new Effekseer::Vector2D();
  *(Effekseer::Vector2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Vector2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Effekseer::Vector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Effekseer::Vector2D *)new Effekseer::Vector2D(arg1,arg2);
  *(Effekseer::Vector2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1Vector2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::Vector2D *arg1 = (Effekseer::Vector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::Vector2D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector3D_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::Vector3D *arg1 = (Effekseer::Vector3D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector3D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector3D_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::Vector3D *arg1 = (Effekseer::Vector3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector3D **)&jarg1; 
  result = (float) ((arg1)->X);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector3D_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::Vector3D *arg1 = (Effekseer::Vector3D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector3D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector3D_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::Vector3D *arg1 = (Effekseer::Vector3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector3D **)&jarg1; 
  result = (float) ((arg1)->Y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector3D_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::Vector3D *arg1 = (Effekseer::Vector3D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector3D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Vector3D_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::Vector3D *arg1 = (Effekseer::Vector3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector3D **)&jarg1; 
  result = (float) ((arg1)->Z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Vector3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Vector3D *)new Effekseer::Vector3D();
  *(Effekseer::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Vector3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Effekseer::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Effekseer::Vector3D *)new Effekseer::Vector3D(arg1,arg2,arg3);
  *(Effekseer::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1Vector3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::Vector3D *arg1 = (Effekseer::Vector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::Vector3D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Matrix43_1Value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Effekseer::Matrix43 *arg1 = (Effekseer::Matrix43 *) 0 ;
  float (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Matrix43 **)&jarg1; 
  arg2 = *(float (**)[3])&jarg2; 
  {
    float (*inp)[3] = (float (*)[3])(arg2);
    float (*dest)[3] = (float (*)[3])(arg1->Value);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Matrix43_1Value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::Matrix43 *arg1 = (Effekseer::Matrix43 *) 0 ;
  float (*result)[3] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Matrix43 **)&jarg1; 
  result = (float (*)[3])(float (*)[3]) ((arg1)->Value);
  *(float (**)[3])&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Matrix43(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::Matrix43 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Matrix43 *)new Effekseer::Matrix43();
  *(Effekseer::Matrix43 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1Matrix43(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::Matrix43 *arg1 = (Effekseer::Matrix43 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::Matrix43 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Matrix44(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::Matrix44 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Matrix44 *)new Effekseer::Matrix44();
  *(Effekseer::Matrix44 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Matrix44_1Values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Effekseer::Matrix44 *arg1 = (Effekseer::Matrix44 *) 0 ;
  float (*arg2)[4] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Matrix44 **)&jarg1; 
  arg2 = *(float (**)[4])&jarg2; 
  {
    float (*inp)[4] = (float (*)[4])(arg2);
    float (*dest)[4] = (float (*)[4])(arg1->Values);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Matrix44_1Values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::Matrix44 *arg1 = (Effekseer::Matrix44 *) 0 ;
  float (*result)[4] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Matrix44 **)&jarg1; 
  result = (float (*)[4])(float (*)[4]) ((arg1)->Values);
  *(float (**)[4])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1Matrix44(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::Matrix44 *arg1 = (Effekseer::Matrix44 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::Matrix44 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec2f_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Vec2f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SIMD::Vec2f *)new Effekseer::SIMD::Vec2f();
  *(Effekseer::SIMD::Vec2f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec2f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Vec2f *arg1 = 0 ;
  Effekseer::SIMD::Vec2f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Vec2f **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::SIMD::Vec2f const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Vec2f *)new Effekseer::SIMD::Vec2f((Effekseer::SIMD::Vec2f const &)*arg1);
  *(Effekseer::SIMD::Vec2f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec2f_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Effekseer::SIMD::Vec2f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Effekseer::SIMD::Vec2f *)new Effekseer::SIMD::Vec2f(arg1,arg2);
  *(Effekseer::SIMD::Vec2f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec2f_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< float,2 > *arg1 = 0 ;
  Effekseer::SIMD::Vec2f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,2 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< float,2 > const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Vec2f *)new Effekseer::SIMD::Vec2f((std::array< float,2 > const &)*arg1);
  *(Effekseer::SIMD::Vec2f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec2f_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::Vector2D *arg1 = 0 ;
  Effekseer::SIMD::Vec2f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector2D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::Vector2D const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Vec2f *)new Effekseer::SIMD::Vec2f((Effekseer::Vector2D const &)*arg1);
  *(Effekseer::SIMD::Vec2f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec2f_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::vector2d *arg1 = 0 ;
  Effekseer::SIMD::Vec2f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::vector2d const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Vec2f *)new Effekseer::SIMD::Vec2f((Effekseer::vector2d const &)*arg1);
  *(Effekseer::SIMD::Vec2f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1SIMDVec2f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::SIMD::Vec2f *arg1 = (Effekseer::SIMD::Vec2f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::SIMD::Vec2f **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec3f_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SIMD::Vec3f *)new Effekseer::SIMD::Vec3f();
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec3f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Vec3f *arg1 = 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Vec3f **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::SIMD::Vec3f const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Vec3f *)new Effekseer::SIMD::Vec3f((Effekseer::SIMD::Vec3f const &)*arg1);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec3f_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Effekseer::SIMD::Vec3f *)new Effekseer::SIMD::Vec3f(arg1,arg2,arg3);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec3f_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::Vector3D *arg1 = 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Vector3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::Vector3D const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Vec3f *)new Effekseer::SIMD::Vec3f((Effekseer::Vector3D const &)*arg1);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec3f_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::vector3d *arg1 = 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector3d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::vector3d const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Vec3f *)new Effekseer::SIMD::Vec3f((Effekseer::vector3d const &)*arg1);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDVec3f_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< float,3 > *arg1 = 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< float,3 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< float,3 > const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Vec3f *)new Effekseer::SIMD::Vec3f((std::array< float,3 > const &)*arg1);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SIMDVec3f_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::SIMD::Vec3f *arg1 = (Effekseer::SIMD::Vec3f *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Vec3f **)&jarg1; 
  result = (float)((Effekseer::SIMD::Vec3f const *)arg1)->GetX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SIMDVec3f_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::SIMD::Vec3f *arg1 = (Effekseer::SIMD::Vec3f *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Vec3f **)&jarg1; 
  result = (float)((Effekseer::SIMD::Vec3f const *)arg1)->GetY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SIMDVec3f_1getZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::SIMD::Vec3f *arg1 = (Effekseer::SIMD::Vec3f *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Vec3f **)&jarg1; 
  result = (float)((Effekseer::SIMD::Vec3f const *)arg1)->GetZ();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SIMDVec3f_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::SIMD::Vec3f *arg1 = (Effekseer::SIMD::Vec3f *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Vec3f **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetX(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SIMDVec3f_1setY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::SIMD::Vec3f *arg1 = (Effekseer::SIMD::Vec3f *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Vec3f **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetY(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SIMDVec3f_1setZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::SIMD::Vec3f *arg1 = (Effekseer::SIMD::Vec3f *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Vec3f **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetZ(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1SIMDVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::SIMD::Vec3f *arg1 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::SIMD::Vec3f **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat43f_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Mat43f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SIMD::Mat43f *)new Effekseer::SIMD::Mat43f();
  *(Effekseer::SIMD::Mat43f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat43f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Mat43f *arg1 = 0 ;
  Effekseer::SIMD::Mat43f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Mat43f **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::SIMD::Mat43f const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Mat43f *)new Effekseer::SIMD::Mat43f((Effekseer::SIMD::Mat43f const &)*arg1);
  *(Effekseer::SIMD::Mat43f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat43f_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  Effekseer::SIMD::Mat43f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  result = (Effekseer::SIMD::Mat43f *)new Effekseer::SIMD::Mat43f(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(Effekseer::SIMD::Mat43f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat43f_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::Matrix43 *arg1 = 0 ;
  Effekseer::SIMD::Mat43f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Matrix43 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::Matrix43 const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Mat43f *)new Effekseer::SIMD::Mat43f((Effekseer::Matrix43 const &)*arg1);
  *(Effekseer::SIMD::Mat43f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SIMDMat43f_1Identity_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Mat43f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SIMD::Mat43f *)&Effekseer::SIMD::Mat43f::Identity;
  *(Effekseer::SIMD::Mat43f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1SIMDMat43f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::SIMD::Mat43f *arg1 = (Effekseer::SIMD::Mat43f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::SIMD::Mat43f **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat44f_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SIMD::Mat44f *)new Effekseer::SIMD::Mat44f();
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat44f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Mat44f *arg1 = 0 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Mat44f **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::SIMD::Mat44f const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Mat44f *)new Effekseer::SIMD::Mat44f((Effekseer::SIMD::Mat44f const &)*arg1);
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat44f_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14, jfloat jarg15, jfloat jarg16) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  result = (Effekseer::SIMD::Mat44f *)new Effekseer::SIMD::Mat44f(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat44f_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Mat43f *arg1 = 0 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SIMD::Mat43f **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::SIMD::Mat43f const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Mat44f *)new Effekseer::SIMD::Mat44f((Effekseer::SIMD::Mat43f const &)*arg1);
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SIMDMat44f_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::Matrix44 *arg1 = 0 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Matrix44 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::Matrix44 const & reference is null");
    return 0;
  } 
  result = (Effekseer::SIMD::Mat44f *)new Effekseer::SIMD::Mat44f((Effekseer::Matrix44 const &)*arg1);
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SIMDMat44f_1Identity_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SIMD::Mat44f *)&Effekseer::SIMD::Mat44f::Identity;
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1SIMDMat44f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::SIMD::Mat44f *arg1 = (Effekseer::SIMD::Mat44f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::SIMD::Mat44f **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_COLOR_1MODE_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ColorMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ColorMode)Effekseer::COLOR_MODE_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Color_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Color **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->R = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Color_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Color **)&jarg1; 
  result = (uint8_t) ((arg1)->R);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Color_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Color **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->G = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Color_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Color **)&jarg1; 
  result = (uint8_t) ((arg1)->G);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Color_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Color **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->B = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Color_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Color **)&jarg1; 
  result = (uint8_t) ((arg1)->B);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Color_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Color **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->A = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Color_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Color **)&jarg1; 
  result = (uint8_t) ((arg1)->A);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Color_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Color *)new Effekseer::Color();
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Color_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = (Effekseer::Color *)new Effekseer::Color(arg1,arg2,arg3,arg4);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1Color_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (Effekseer::Color *)new Effekseer::Color(arg1,arg2,arg3);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1Color(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::Color *arg1 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::Color **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorMaterialTextureParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Effekseer::MaterialTextureParameter > *)new std::vector< Effekseer::MaterialTextureParameter >();
  *(std::vector< Effekseer::MaterialTextureParameter > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorMaterialTextureParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Effekseer::MaterialTextureParameter > const & reference is null");
    return 0;
  } 
  result = (std::vector< Effekseer::MaterialTextureParameter > *)new std::vector< Effekseer::MaterialTextureParameter >((std::vector< Effekseer::MaterialTextureParameter > const &)*arg1);
  *(std::vector< Effekseer::MaterialTextureParameter > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  std::vector< Effekseer::MaterialTextureParameter >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  arg2 = (std::vector< Effekseer::MaterialTextureParameter >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  result = (bool)((std::vector< Effekseer::MaterialTextureParameter > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1VectorMaterialTextureParameter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  Effekseer::MaterialTextureParameter *arg2 = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(Effekseer::MaterialTextureParameter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::MaterialTextureParameter const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< Effekseer::MaterialTextureParameter > *)new_std_vector_Sl_Effekseer_MaterialTextureParameter_Sg___SWIG_2(arg1,(Effekseer::MaterialTextureParameter const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Effekseer::MaterialTextureParameter > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  try {
    result = std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doSize((std::vector< Effekseer::MaterialTextureParameter > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  std::vector< Effekseer::MaterialTextureParameter >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  arg2 = *(std::vector< Effekseer::MaterialTextureParameter >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Effekseer::MaterialTextureParameter >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doAdd__SWIG_0(arg1,(Effekseer::MaterialTextureParameter const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  jint arg2 ;
  std::vector< Effekseer::MaterialTextureParameter >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Effekseer::MaterialTextureParameter >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Effekseer::MaterialTextureParameter >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doAdd__SWIG_1(arg1,arg2,(Effekseer::MaterialTextureParameter const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  jint arg2 ;
  std::vector< Effekseer::MaterialTextureParameter >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Effekseer::MaterialTextureParameter >::value_type **)&jresult = new std::vector< Effekseer::MaterialTextureParameter >::value_type((const std::vector< Effekseer::MaterialTextureParameter >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  jint arg2 ;
  std::vector< Effekseer::MaterialTextureParameter >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< Effekseer::MaterialTextureParameter >::value_type *) &std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Effekseer::MaterialTextureParameter >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  jint arg2 ;
  std::vector< Effekseer::MaterialTextureParameter >::value_type *arg3 = 0 ;
  std::vector< Effekseer::MaterialTextureParameter >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< Effekseer::MaterialTextureParameter >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Effekseer::MaterialTextureParameter >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doSet(arg1,arg2,(Effekseer::MaterialTextureParameter const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< Effekseer::MaterialTextureParameter >::value_type **)&jresult = new std::vector< Effekseer::MaterialTextureParameter >::value_type((const std::vector< Effekseer::MaterialTextureParameter >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_VectorMaterialTextureParameter_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_Effekseer_MaterialTextureParameter_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1VectorMaterialTextureParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Effekseer::MaterialTextureParameter > *arg1 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TextureSlotMax_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)(int32_t)Effekseer::TextureSlotMax;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ArrayTextureIndexes_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< int32_t,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::array< int32_t,8 > *)new std::array< int32_t,8 >();
  *(std::array< int32_t,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ArrayTextureIndexes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< int32_t,8 > *arg1 = 0 ;
  std::array< int32_t,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< int32_t,8 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< int32_t,8 > const & reference is null");
    return 0;
  } 
  result = (std::array< int32_t,8 > *)new std::array< int32_t,8 >((std::array< int32_t,8 > const &)*arg1);
  *(std::array< int32_t,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureIndexes_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< int32_t,8 > *arg1 = (std::array< int32_t,8 > *) 0 ;
  std::array< int,8 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< int32_t,8 > **)&jarg1; 
  result = ((std::array< int32_t,8 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureIndexes_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< int32_t,8 > *arg1 = (std::array< int32_t,8 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< int32_t,8 > **)&jarg1; 
  result = (bool)((std::array< int32_t,8 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureIndexes_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::array< int32_t,8 > *arg1 = (std::array< int32_t,8 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< int32_t,8 > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->fill((int const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureIndexes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::array< int32_t,8 > *arg1 = (std::array< int32_t,8 > *) 0 ;
  int arg2 ;
  std::array< int,8 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< int32_t,8 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< int,8 >::value_type *) &std_array_Sl_int32_t_Sc_8_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureIndexes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::array< int32_t,8 > *arg1 = (std::array< int32_t,8 > *) 0 ;
  int arg2 ;
  std::array< int,8 >::value_type *arg3 = 0 ;
  std::array< int,8 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< int32_t,8 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< int,8 >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_array_Sl_int32_t_Sc_8_Sg__set(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ArrayTextureIndexes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< int32_t,8 > *arg1 = (std::array< int32_t,8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< int32_t,8 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ArrayTextureFilters_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< Effekseer::TextureFilterType,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::array< Effekseer::TextureFilterType,8 > *)new std::array< Effekseer::TextureFilterType,8 >();
  *(std::array< Effekseer::TextureFilterType,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ArrayTextureFilters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< Effekseer::TextureFilterType,8 > *arg1 = 0 ;
  std::array< Effekseer::TextureFilterType,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< Effekseer::TextureFilterType,8 > const & reference is null");
    return 0;
  } 
  result = (std::array< Effekseer::TextureFilterType,8 > *)new std::array< Effekseer::TextureFilterType,8 >((std::array< Effekseer::TextureFilterType,8 > const &)*arg1);
  *(std::array< Effekseer::TextureFilterType,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureFilters_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< Effekseer::TextureFilterType,8 > *arg1 = (std::array< Effekseer::TextureFilterType,8 > *) 0 ;
  std::array< enum Effekseer::TextureFilterType,8 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg1; 
  result = ((std::array< Effekseer::TextureFilterType,8 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureFilters_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< Effekseer::TextureFilterType,8 > *arg1 = (std::array< Effekseer::TextureFilterType,8 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg1; 
  result = (bool)((std::array< Effekseer::TextureFilterType,8 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureFilters_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::array< Effekseer::TextureFilterType,8 > *arg1 = (std::array< Effekseer::TextureFilterType,8 > *) 0 ;
  Effekseer::TextureFilterType *arg2 = 0 ;
  Effekseer::TextureFilterType temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg1; 
  temp2 = (Effekseer::TextureFilterType)jarg2; 
  arg2 = &temp2; 
  (arg1)->fill((Effekseer::TextureFilterType const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureFilters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::array< Effekseer::TextureFilterType,8 > *arg1 = (std::array< Effekseer::TextureFilterType,8 > *) 0 ;
  int arg2 ;
  std::array< enum Effekseer::TextureFilterType,8 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< enum Effekseer::TextureFilterType,8 >::value_type *) &std_array_Sl_Effekseer_TextureFilterType_Sc_8_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureFilters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::array< Effekseer::TextureFilterType,8 > *arg1 = (std::array< Effekseer::TextureFilterType,8 > *) 0 ;
  int arg2 ;
  std::array< enum Effekseer::TextureFilterType,8 >::value_type *arg3 = 0 ;
  std::array< enum Effekseer::TextureFilterType,8 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< enum Effekseer::TextureFilterType,8 >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_array_Sl_Effekseer_TextureFilterType_Sc_8_Sg__set(arg1,arg2,(enum Effekseer::TextureFilterType const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ArrayTextureFilters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< Effekseer::TextureFilterType,8 > *arg1 = (std::array< Effekseer::TextureFilterType,8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ArrayTextureWraps_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< Effekseer::TextureWrapType,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::array< Effekseer::TextureWrapType,8 > *)new std::array< Effekseer::TextureWrapType,8 >();
  *(std::array< Effekseer::TextureWrapType,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ArrayTextureWraps_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< Effekseer::TextureWrapType,8 > *arg1 = 0 ;
  std::array< Effekseer::TextureWrapType,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< Effekseer::TextureWrapType,8 > const & reference is null");
    return 0;
  } 
  result = (std::array< Effekseer::TextureWrapType,8 > *)new std::array< Effekseer::TextureWrapType,8 >((std::array< Effekseer::TextureWrapType,8 > const &)*arg1);
  *(std::array< Effekseer::TextureWrapType,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureWraps_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< Effekseer::TextureWrapType,8 > *arg1 = (std::array< Effekseer::TextureWrapType,8 > *) 0 ;
  std::array< enum Effekseer::TextureWrapType,8 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg1; 
  result = ((std::array< Effekseer::TextureWrapType,8 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureWraps_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< Effekseer::TextureWrapType,8 > *arg1 = (std::array< Effekseer::TextureWrapType,8 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg1; 
  result = (bool)((std::array< Effekseer::TextureWrapType,8 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureWraps_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::array< Effekseer::TextureWrapType,8 > *arg1 = (std::array< Effekseer::TextureWrapType,8 > *) 0 ;
  Effekseer::TextureWrapType *arg2 = 0 ;
  Effekseer::TextureWrapType temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg1; 
  temp2 = (Effekseer::TextureWrapType)jarg2; 
  arg2 = &temp2; 
  (arg1)->fill((Effekseer::TextureWrapType const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureWraps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::array< Effekseer::TextureWrapType,8 > *arg1 = (std::array< Effekseer::TextureWrapType,8 > *) 0 ;
  int arg2 ;
  std::array< enum Effekseer::TextureWrapType,8 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< enum Effekseer::TextureWrapType,8 >::value_type *) &std_array_Sl_Effekseer_TextureWrapType_Sc_8_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayTextureWraps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::array< Effekseer::TextureWrapType,8 > *arg1 = (std::array< Effekseer::TextureWrapType,8 > *) 0 ;
  int arg2 ;
  std::array< enum Effekseer::TextureWrapType,8 >::value_type *arg3 = 0 ;
  std::array< enum Effekseer::TextureWrapType,8 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< enum Effekseer::TextureWrapType,8 >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_array_Sl_Effekseer_TextureWrapType_Sc_8_Sg__set(arg1,arg2,(enum Effekseer::TextureWrapType const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ArrayTextureWraps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< Effekseer::TextureWrapType,8 > *arg1 = (std::array< Effekseer::TextureWrapType,8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_UserTextureSlotMax_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)(int32_t)Effekseer::UserTextureSlotMax;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_UserUniformSlotMax_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)(int32_t)Effekseer::UserUniformSlotMax;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalFieldSlotMax_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)(int32_t)Effekseer::LocalFieldSlotMax;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFK_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)Effekseer::EFK_PI;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_AlphaBlendType_1Opacity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::AlphaBlendType)Effekseer::AlphaBlendType::Opacity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_AlphaBlendType_1Blend_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::AlphaBlendType)Effekseer::AlphaBlendType::Blend;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_AlphaBlendType_1Add_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::AlphaBlendType)Effekseer::AlphaBlendType::Add;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_AlphaBlendType_1Sub_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::AlphaBlendType)Effekseer::AlphaBlendType::Sub;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_AlphaBlendType_1Mul_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::AlphaBlendType)Effekseer::AlphaBlendType::Mul;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TextureFilterType_1Nearest_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TextureFilterType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TextureFilterType)Effekseer::TextureFilterType::Nearest;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TextureFilterType_1Linear_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TextureFilterType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TextureFilterType)Effekseer::TextureFilterType::Linear;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TextureWrapType_1Repeat_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TextureWrapType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TextureWrapType)Effekseer::TextureWrapType::Repeat;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TextureWrapType_1Clamp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TextureWrapType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TextureWrapType)Effekseer::TextureWrapType::Clamp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_CullingType_1Front_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::CullingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::CullingType)Effekseer::CullingType::Front;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_CullingType_1Back_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::CullingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::CullingType)Effekseer::CullingType::Back;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_CullingType_1Double_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::CullingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::CullingType)Effekseer::CullingType::Double;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_BillboardType_1Billboard_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::BillboardType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::BillboardType)Effekseer::BillboardType::Billboard;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_BillboardType_1YAxisFixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::BillboardType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::BillboardType)Effekseer::BillboardType::YAxisFixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_BillboardType_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::BillboardType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::BillboardType)Effekseer::BillboardType::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_BillboardType_1RotatedBillboard_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::BillboardType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::BillboardType)Effekseer::BillboardType::RotatedBillboard;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_CullingShape_1NoneShape_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::CullingShape result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::CullingShape)Effekseer::CullingShape::NoneShape;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_CullingShape_1Sphere_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::CullingShape result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::CullingShape)Effekseer::CullingShape::Sphere;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RendererMaterialType_1Default_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::RendererMaterialType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RendererMaterialType)Effekseer::RendererMaterialType::Default;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RendererMaterialType_1BackDistortion_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::RendererMaterialType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RendererMaterialType)Effekseer::RendererMaterialType::BackDistortion;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RendererMaterialType_1Lighting_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::RendererMaterialType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RendererMaterialType)Effekseer::RendererMaterialType::Lighting;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RendererMaterialType_1File_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::RendererMaterialType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RendererMaterialType)Effekseer::RendererMaterialType::File;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialTextureParameter_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::MaterialTextureParameter *arg1 = (Effekseer::MaterialTextureParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::MaterialTextureParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialTextureParameter_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::MaterialTextureParameter *arg1 = (Effekseer::MaterialTextureParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::MaterialTextureParameter **)&jarg1; 
  result = (int32_t) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialTextureParameter_1Index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::MaterialTextureParameter *arg1 = (Effekseer::MaterialTextureParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::MaterialTextureParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Index = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialTextureParameter_1Index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::MaterialTextureParameter *arg1 = (Effekseer::MaterialTextureParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::MaterialTextureParameter **)&jarg1; 
  result = (int32_t) ((arg1)->Index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1MaterialTextureParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::MaterialTextureParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::MaterialTextureParameter *)new Effekseer::MaterialTextureParameter();
  *(Effekseer::MaterialTextureParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1MaterialTextureParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::MaterialTextureParameter *arg1 = (Effekseer::MaterialTextureParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::MaterialTextureParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialRenderData_1MaterialIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::MaterialRenderData *arg1 = (Effekseer::MaterialRenderData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::MaterialRenderData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->MaterialIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialRenderData_1MaterialIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::MaterialRenderData *arg1 = (Effekseer::MaterialRenderData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::MaterialRenderData **)&jarg1; 
  result = (int32_t) ((arg1)->MaterialIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialRenderData_1MaterialTextures_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::MaterialRenderData *arg1 = (Effekseer::MaterialRenderData *) 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *arg2 = (std::vector< Effekseer::MaterialTextureParameter > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::MaterialRenderData **)&jarg1; 
  arg2 = *(std::vector< Effekseer::MaterialTextureParameter > **)&jarg2; 
  if (arg1) (arg1)->MaterialTextures = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialRenderData_1MaterialTextures_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::MaterialRenderData *arg1 = (Effekseer::MaterialRenderData *) 0 ;
  std::vector< Effekseer::MaterialTextureParameter > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::MaterialRenderData **)&jarg1; 
  result = (std::vector< Effekseer::MaterialTextureParameter > *)& ((arg1)->MaterialTextures);
  *(std::vector< Effekseer::MaterialTextureParameter > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialRenderData_1MaterialUniforms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::MaterialRenderData *arg1 = (Effekseer::MaterialRenderData *) 0 ;
  std::vector< std::array< float,4 > > *arg2 = (std::vector< std::array< float,4 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::MaterialRenderData **)&jarg1; 
  arg2 = *(std::vector< std::array< float,4 > > **)&jarg2; 
  if (arg1) (arg1)->MaterialUniforms = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_MaterialRenderData_1MaterialUniforms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::MaterialRenderData *arg1 = (Effekseer::MaterialRenderData *) 0 ;
  std::vector< std::array< float,4 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::MaterialRenderData **)&jarg1; 
  result = (std::vector< std::array< float,4 > > *)& ((arg1)->MaterialUniforms);
  *(std::vector< std::array< float,4 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1MaterialRenderData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::MaterialRenderData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::MaterialRenderData *)new Effekseer::MaterialRenderData();
  *(Effekseer::MaterialRenderData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1MaterialRenderData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::MaterialRenderData *arg1 = (Effekseer::MaterialRenderData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::MaterialRenderData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1DepthOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DepthOffset = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1DepthOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  result = (float) ((arg1)->DepthOffset);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1IsDepthOffsetScaledWithCamera_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsDepthOffsetScaledWithCamera = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1IsDepthOffsetScaledWithCamera_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  result = (bool) ((arg1)->IsDepthOffsetScaledWithCamera);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1IsDepthOffsetScaledWithParticleScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsDepthOffsetScaledWithParticleScale = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1IsDepthOffsetScaledWithParticleScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  result = (bool) ((arg1)->IsDepthOffsetScaledWithParticleScale);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1ZSort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  Effekseer::ZSortType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  arg2 = (Effekseer::ZSortType)jarg2; 
  if (arg1) (arg1)->ZSort = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1ZSort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  Effekseer::ZSortType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  result = (Effekseer::ZSortType) ((arg1)->ZSort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1SuppressionOfScalingByDepth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SuppressionOfScalingByDepth = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1SuppressionOfScalingByDepth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  result = (float) ((arg1)->SuppressionOfScalingByDepth);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1DepthClipping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DepthClipping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererDepthParameter_1DepthClipping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  result = (float) ((arg1)->DepthClipping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1NodeRendererDepthParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::NodeRendererDepthParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::NodeRendererDepthParameter *)new Effekseer::NodeRendererDepthParameter();
  *(Effekseer::NodeRendererDepthParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1NodeRendererDepthParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::NodeRendererDepthParameter *arg1 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::NodeRendererDepthParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1MaterialType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  Effekseer::RendererMaterialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (Effekseer::RendererMaterialType)jarg2; 
  if (arg1) (arg1)->MaterialType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1MaterialType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  Effekseer::RendererMaterialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (Effekseer::RendererMaterialType) ((arg1)->MaterialType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1TextureIndexes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  std::array< int32_t,8 > *arg2 = (std::array< int32_t,8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = *(std::array< int32_t,8 > **)&jarg2; 
  if (arg1) (arg1)->TextureIndexes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1TextureIndexes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  std::array< int32_t,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (std::array< int32_t,8 > *)& ((arg1)->TextureIndexes);
  *(std::array< int32_t,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1DistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1DistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->DistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1MaterialRenderDataPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  Effekseer::MaterialRenderData *arg2 = (Effekseer::MaterialRenderData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = *(Effekseer::MaterialRenderData **)&jarg2; 
  if (arg1) (arg1)->MaterialRenderDataPtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1MaterialRenderDataPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  Effekseer::MaterialRenderData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (Effekseer::MaterialRenderData *) ((arg1)->MaterialRenderDataPtr);
  *(Effekseer::MaterialRenderData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1AlphaBlend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  Effekseer::AlphaBlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (Effekseer::AlphaBlendType)jarg2; 
  if (arg1) (arg1)->AlphaBlend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1AlphaBlend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (Effekseer::AlphaBlendType) ((arg1)->AlphaBlend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1TextureFilters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  std::array< Effekseer::TextureFilterType,8 > *arg2 = (std::array< Effekseer::TextureFilterType,8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg2; 
  if (arg1) (arg1)->TextureFilters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1TextureFilters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  std::array< Effekseer::TextureFilterType,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (std::array< Effekseer::TextureFilterType,8 > *)& ((arg1)->TextureFilters);
  *(std::array< Effekseer::TextureFilterType,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1TextureWraps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  std::array< Effekseer::TextureWrapType,8 > *arg2 = (std::array< Effekseer::TextureWrapType,8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg2; 
  if (arg1) (arg1)->TextureWraps = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1TextureWraps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  std::array< Effekseer::TextureWrapType,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (std::array< Effekseer::TextureWrapType,8 > *)& ((arg1)->TextureWraps);
  *(std::array< Effekseer::TextureWrapType,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1UVDistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->UVDistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1UVDistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->UVDistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1TextureBlendType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TextureBlendType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1TextureBlendType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (int32_t) ((arg1)->TextureBlendType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1BlendUVDistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->BlendUVDistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1BlendUVDistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->BlendUVDistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EnableInterpolation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EnableInterpolation = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EnableInterpolation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (bool) ((arg1)->EnableInterpolation);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1UVLoopType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->UVLoopType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1UVLoopType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (int32_t) ((arg1)->UVLoopType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1InterpolationType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->InterpolationType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1InterpolationType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (int32_t) ((arg1)->InterpolationType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1FlipbookDivideX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->FlipbookDivideX = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1FlipbookDivideX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (int32_t) ((arg1)->FlipbookDivideX);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1FlipbookDivideY_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->FlipbookDivideY = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1FlipbookDivideY_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (int32_t) ((arg1)->FlipbookDivideY);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EmissiveScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EmissiveScaling = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EmissiveScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->EmissiveScaling);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EdgeThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EdgeThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EdgeThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->EdgeThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EdgeColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  uint8_t *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->EdgeColor;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EdgeColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->EdgeColor);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 4); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EdgeColorScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EdgeColorScaling = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1EdgeColorScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->EdgeColorScaling);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1IsAlphaCutoffEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsAlphaCutoffEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1IsAlphaCutoffEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (bool) ((arg1)->IsAlphaCutoffEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1SoftParticleDistanceFar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SoftParticleDistanceFar = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1SoftParticleDistanceFar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->SoftParticleDistanceFar);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1SoftParticleDistanceNear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SoftParticleDistanceNear = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1SoftParticleDistanceNear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->SoftParticleDistanceNear);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1SoftParticleDistanceNearOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SoftParticleDistanceNearOffset = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererBasicParameter_1SoftParticleDistanceNearOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  result = (float) ((arg1)->SoftParticleDistanceNearOffset);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1NodeRendererBasicParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::NodeRendererBasicParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::NodeRendererBasicParameter *)new Effekseer::NodeRendererBasicParameter();
  *(Effekseer::NodeRendererBasicParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1NodeRendererBasicParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::NodeRendererBasicParameter *arg1 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::NodeRendererBasicParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_INSTANCE_1STATE_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eInstanceState result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eInstanceState)Effekseer::INSTANCE_STATE_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFFECT_1NODE_1TYPE_1ROOT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eEffectNodeType)Effekseer::EFFECT_NODE_TYPE_ROOT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFFECT_1NODE_1TYPE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eEffectNodeType)Effekseer::EFFECT_NODE_TYPE_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFFECT_1NODE_1TYPE_1SPRITE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eEffectNodeType)Effekseer::EFFECT_NODE_TYPE_SPRITE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFFECT_1NODE_1TYPE_1RIBBON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eEffectNodeType)Effekseer::EFFECT_NODE_TYPE_RIBBON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFFECT_1NODE_1TYPE_1RING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eEffectNodeType)Effekseer::EFFECT_NODE_TYPE_RING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFFECT_1NODE_1TYPE_1MODEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eEffectNodeType)Effekseer::EFFECT_NODE_TYPE_MODEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFFECT_1NODE_1TYPE_1TRACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eEffectNodeType)Effekseer::EFFECT_NODE_TYPE_TRACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EFFECT_1NODE_1TYPE_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eEffectNodeType)Effekseer::EFFECT_NODE_TYPE_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomFloat_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::random_float *arg1 = (Effekseer::random_float *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_float **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomFloat_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::random_float *arg1 = (Effekseer::random_float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_float **)&jarg1; 
  result = (float) ((arg1)->max);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomFloat_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::random_float *arg1 = (Effekseer::random_float *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_float **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomFloat_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::random_float *arg1 = (Effekseer::random_float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_float **)&jarg1; 
  result = (float) ((arg1)->min);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructRandomFloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::random_float *)new Effekseer::random_float();
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructRandomFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::random_float *arg1 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::random_float **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomInt_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::random_int *arg1 = (Effekseer::random_int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_int **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomInt_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::random_int *arg1 = (Effekseer::random_int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_int **)&jarg1; 
  result = (int) ((arg1)->max);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomInt_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::random_int *arg1 = (Effekseer::random_int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_int **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomInt_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::random_int *arg1 = (Effekseer::random_int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_int **)&jarg1; 
  result = (int) ((arg1)->min);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructRandomInt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::random_int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::random_int *)new Effekseer::random_int();
  *(Effekseer::random_int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructRandomInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::random_int *arg1 = (Effekseer::random_int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::random_int **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector2D_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::vector2d *arg1 = (Effekseer::vector2d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector2D_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::vector2d *arg1 = (Effekseer::vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector2d **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector2D_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::vector2d *arg1 = (Effekseer::vector2d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector2D_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::vector2d *arg1 = (Effekseer::vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector2d **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructVector2D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::vector2d *)new Effekseer::vector2d();
  *(Effekseer::vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructVector2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::vector2d *arg1 = (Effekseer::vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::vector2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRectF_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRectF_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRectF_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRectF_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRectF_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRectF_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  result = (float) ((arg1)->w);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRectF_1h_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRectF_1h_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  result = (float) ((arg1)->h);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructRectF(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::rectf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::rectf *)new Effekseer::rectf();
  *(Effekseer::rectf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructRectF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::rectf *arg1 = (Effekseer::rectf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::rectf **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomVector2D_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::random_vector2d *arg1 = (Effekseer::random_vector2d *) 0 ;
  Effekseer::vector2d *arg2 = (Effekseer::vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::random_vector2d **)&jarg1; 
  arg2 = *(Effekseer::vector2d **)&jarg2; 
  if (arg1) (arg1)->max = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomVector2D_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::random_vector2d *arg1 = (Effekseer::random_vector2d *) 0 ;
  Effekseer::vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_vector2d **)&jarg1; 
  result = (Effekseer::vector2d *)& ((arg1)->max);
  *(Effekseer::vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomVector2D_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::random_vector2d *arg1 = (Effekseer::random_vector2d *) 0 ;
  Effekseer::vector2d *arg2 = (Effekseer::vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::random_vector2d **)&jarg1; 
  arg2 = *(Effekseer::vector2d **)&jarg2; 
  if (arg1) (arg1)->min = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomVector2D_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::random_vector2d *arg1 = (Effekseer::random_vector2d *) 0 ;
  Effekseer::vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_vector2d **)&jarg1; 
  result = (Effekseer::vector2d *)& ((arg1)->min);
  *(Effekseer::vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructRandomVector2D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::random_vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::random_vector2d *)new Effekseer::random_vector2d();
  *(Effekseer::random_vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructRandomVector2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::random_vector2d *arg1 = (Effekseer::random_vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::random_vector2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructFloatWithoutRandom_1easingA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_float_without_random *arg1 = (Effekseer::easing_float_without_random *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float_without_random **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingA = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructFloatWithoutRandom_1easingA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_float_without_random *arg1 = (Effekseer::easing_float_without_random *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float_without_random **)&jarg1; 
  result = (float) ((arg1)->easingA);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructFloatWithoutRandom_1easingB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_float_without_random *arg1 = (Effekseer::easing_float_without_random *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float_without_random **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingB = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructFloatWithoutRandom_1easingB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_float_without_random *arg1 = (Effekseer::easing_float_without_random *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float_without_random **)&jarg1; 
  result = (float) ((arg1)->easingB);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructFloatWithoutRandom_1easingC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_float_without_random *arg1 = (Effekseer::easing_float_without_random *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float_without_random **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingC = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructFloatWithoutRandom_1easingC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_float_without_random *arg1 = (Effekseer::easing_float_without_random *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float_without_random **)&jarg1; 
  result = (float) ((arg1)->easingC);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructFloatWithoutRandom(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::easing_float_without_random *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::easing_float_without_random *)new Effekseer::easing_float_without_random();
  *(Effekseer::easing_float_without_random **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructFloatWithoutRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::easing_float_without_random *arg1 = (Effekseer::easing_float_without_random *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::easing_float_without_random **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->start);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->end = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->end);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1easingA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingA = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1easingA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  result = (float) ((arg1)->easingA);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1easingB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingB = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1easingB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  result = (float) ((arg1)->easingB);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1easingC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingC = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingFloat_1easingC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  result = (float) ((arg1)->easingC);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructEasingFloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::easing_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::easing_float *)new Effekseer::easing_float();
  *(Effekseer::easing_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructEasingFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::easing_float *arg1 = (Effekseer::easing_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::easing_float **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  Effekseer::random_vector2d *arg2 = (Effekseer::random_vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  arg2 = *(Effekseer::random_vector2d **)&jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  Effekseer::random_vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  result = (Effekseer::random_vector2d *)& ((arg1)->start);
  *(Effekseer::random_vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  Effekseer::random_vector2d *arg2 = (Effekseer::random_vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  arg2 = *(Effekseer::random_vector2d **)&jarg2; 
  if (arg1) (arg1)->end = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  Effekseer::random_vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  result = (Effekseer::random_vector2d *)& ((arg1)->end);
  *(Effekseer::random_vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1easingA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingA = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1easingA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  result = (float) ((arg1)->easingA);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1easingB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingB = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1easingB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  result = (float) ((arg1)->easingB);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1easingC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingC = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector2D_1easingC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  result = (float) ((arg1)->easingC);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructEasingVector2D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::easing_vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::easing_vector2d *)new Effekseer::easing_vector2d();
  *(Effekseer::easing_vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructEasingVector2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::easing_vector2d *arg1 = (Effekseer::easing_vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::easing_vector2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector3D_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::vector3d *arg1 = (Effekseer::vector3d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector3d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector3D_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::vector3d *arg1 = (Effekseer::vector3d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector3d **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector3D_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::vector3d *arg1 = (Effekseer::vector3d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector3d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector3D_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::vector3d *arg1 = (Effekseer::vector3d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector3d **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector3D_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::vector3d *arg1 = (Effekseer::vector3d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector3d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructVector3D_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::vector3d *arg1 = (Effekseer::vector3d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::vector3d **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructVector3D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::vector3d *)new Effekseer::vector3d();
  *(Effekseer::vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructVector3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::vector3d *arg1 = (Effekseer::vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::vector3d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomVector3D_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::random_vector3d *arg1 = (Effekseer::random_vector3d *) 0 ;
  Effekseer::vector3d *arg2 = (Effekseer::vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::random_vector3d **)&jarg1; 
  arg2 = *(Effekseer::vector3d **)&jarg2; 
  if (arg1) (arg1)->max = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomVector3D_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::random_vector3d *arg1 = (Effekseer::random_vector3d *) 0 ;
  Effekseer::vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_vector3d **)&jarg1; 
  result = (Effekseer::vector3d *)& ((arg1)->max);
  *(Effekseer::vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomVector3D_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::random_vector3d *arg1 = (Effekseer::random_vector3d *) 0 ;
  Effekseer::vector3d *arg2 = (Effekseer::vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::random_vector3d **)&jarg1; 
  arg2 = *(Effekseer::vector3d **)&jarg2; 
  if (arg1) (arg1)->min = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomVector3D_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::random_vector3d *arg1 = (Effekseer::random_vector3d *) 0 ;
  Effekseer::vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_vector3d **)&jarg1; 
  result = (Effekseer::vector3d *)& ((arg1)->min);
  *(Effekseer::vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructRandomVector3D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::random_vector3d *)new Effekseer::random_vector3d();
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructRandomVector3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::random_vector3d *arg1 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::random_vector3d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->start);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->end = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->end);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1easingA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingA = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1easingA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  result = (float) ((arg1)->easingA);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1easingB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingB = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1easingB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  result = (float) ((arg1)->easingB);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1easingC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingC = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingVector3D_1easingC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  result = (float) ((arg1)->easingC);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructEasingVector3D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::easing_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::easing_vector3d *)new Effekseer::easing_vector3d();
  *(Effekseer::easing_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructEasingVector3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::easing_vector3d *arg1 = (Effekseer::easing_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::easing_vector3d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomColor_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::random_color *arg1 = (Effekseer::random_color *) 0 ;
  Effekseer::ColorMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_color **)&jarg1; 
  arg2 = (Effekseer::ColorMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomColor_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::random_color *arg1 = (Effekseer::random_color *) 0 ;
  Effekseer::ColorMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_color **)&jarg1; 
  result = (Effekseer::ColorMode) ((arg1)->mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomColor_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::random_color *arg1 = (Effekseer::random_color *) 0 ;
  Effekseer::Color *arg2 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::random_color **)&jarg1; 
  arg2 = *(Effekseer::Color **)&jarg2; 
  if (arg1) (arg1)->max = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomColor_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::random_color *arg1 = (Effekseer::random_color *) 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_color **)&jarg1; 
  result = (Effekseer::Color *)& ((arg1)->max);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomColor_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::random_color *arg1 = (Effekseer::random_color *) 0 ;
  Effekseer::Color *arg2 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::random_color **)&jarg1; 
  arg2 = *(Effekseer::Color **)&jarg2; 
  if (arg1) (arg1)->min = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructRandomColor_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::random_color *arg1 = (Effekseer::random_color *) 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::random_color **)&jarg1; 
  result = (Effekseer::Color *)& ((arg1)->min);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructRandomColor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::random_color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::random_color *)new Effekseer::random_color();
  *(Effekseer::random_color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructRandomColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::random_color *arg1 = (Effekseer::random_color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::random_color **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  Effekseer::random_color *arg2 = (Effekseer::random_color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  arg2 = *(Effekseer::random_color **)&jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  Effekseer::random_color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  result = (Effekseer::random_color *)& ((arg1)->start);
  *(Effekseer::random_color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  Effekseer::random_color *arg2 = (Effekseer::random_color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  arg2 = *(Effekseer::random_color **)&jarg2; 
  if (arg1) (arg1)->end = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  Effekseer::random_color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  result = (Effekseer::random_color *)& ((arg1)->end);
  *(Effekseer::random_color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1easingA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingA = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1easingA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  result = (float) ((arg1)->easingA);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1easingB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingB = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1easingB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  result = (float) ((arg1)->easingB);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1easingC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easingC = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InternalStructEasingColor_1easingC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  result = (float) ((arg1)->easingC);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InternalStructEasingColor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::easing_color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::easing_color *)new Effekseer::easing_color();
  *(Effekseer::easing_color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InternalStructEasingColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::easing_color *arg1 = (Effekseer::easing_color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::easing_color **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  Effekseer::TextureUVType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  arg2 = (Effekseer::TextureUVType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  Effekseer::TextureUVType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  result = (Effekseer::TextureUVType) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TileLength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  result = (float) ((arg1)->TileLength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileEdgeHead_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TileEdgeHead = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileEdgeHead_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  result = (int32_t) ((arg1)->TileEdgeHead);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileEdgeTail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TileEdgeTail = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileEdgeTail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  result = (int32_t) ((arg1)->TileEdgeTail);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileLoopAreaBegin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TileLoopAreaBegin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileLoopAreaBegin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  result = (float) ((arg1)->TileLoopAreaBegin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileLoopAreaEnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TileLoopAreaEnd = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_NodeRendererTextureUVTypeParameter_1TileLoopAreaEnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  result = (float) ((arg1)->TileLoopAreaEnd);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1NodeRendererTextureUVTypeParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::NodeRendererTextureUVTypeParameter *)new Effekseer::NodeRendererTextureUVTypeParameter();
  *(Effekseer::NodeRendererTextureUVTypeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1NodeRendererTextureUVTypeParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::NodeRendererTextureUVTypeParameter *arg1 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1Add_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::FalloffParameter::BlendType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FalloffParameter::BlendType)Effekseer::FalloffParameter::Add;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1Sub_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::FalloffParameter::BlendType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FalloffParameter::BlendType)Effekseer::FalloffParameter::Sub;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1Mul_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::FalloffParameter::BlendType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FalloffParameter::BlendType)Effekseer::FalloffParameter::Mul;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1ColorBlendType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  enum Effekseer::FalloffParameter::BlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  arg2 = (enum Effekseer::FalloffParameter::BlendType)jarg2; 
  if (arg1) (arg1)->ColorBlendType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1ColorBlendType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  enum Effekseer::FalloffParameter::BlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  result = (enum Effekseer::FalloffParameter::BlendType) ((arg1)->ColorBlendType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1BeginColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  Effekseer::Color *arg2 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  arg2 = *(Effekseer::Color **)&jarg2; 
  if (arg1) (arg1)->BeginColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1BeginColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  result = (Effekseer::Color *)& ((arg1)->BeginColor);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1EndColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  Effekseer::Color *arg2 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  arg2 = *(Effekseer::Color **)&jarg2; 
  if (arg1) (arg1)->EndColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1EndColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  result = (Effekseer::Color *)& ((arg1)->EndColor);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1Pow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Pow = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FalloffParameter_1Pow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  result = (float) ((arg1)->Pow);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FalloffParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::FalloffParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FalloffParameter *)new Effekseer::FalloffParameter();
  *(Effekseer::FalloffParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FalloffParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::FalloffParameter *arg1 = (Effekseer::FalloffParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::FalloffParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RefMinMax_1Max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RefMinMax *arg1 = (Effekseer::RefMinMax *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RefMinMax **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Max = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RefMinMax_1Max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RefMinMax *arg1 = (Effekseer::RefMinMax *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RefMinMax **)&jarg1; 
  result = (int32_t) ((arg1)->Max);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RefMinMax_1Min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RefMinMax *arg1 = (Effekseer::RefMinMax *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RefMinMax **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Min = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RefMinMax_1Min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RefMinMax *arg1 = (Effekseer::RefMinMax *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RefMinMax **)&jarg1; 
  result = (int32_t) ((arg1)->Min);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RefMinMax(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RefMinMax *)new Effekseer::RefMinMax();
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RefMinMax(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RefMinMax *arg1 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RefMinMax **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1StartEndSpeed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::StartEndSpeed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1Linear_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::Linear;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInQuadratic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInQuadratic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseOutQuadratic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseOutQuadratic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInOutQuadratic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInOutQuadratic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInCubic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInCubic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseOutCubic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseOutCubic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInOutCubic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInOutCubic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInQuartic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInQuartic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseOutQuartic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseOutQuartic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInOutQuartic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInOutQuartic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInQuintic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInQuintic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseOutQuintic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseOutQuintic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInOutQuintic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInOutQuintic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInBack_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInBack;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseOutBack_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseOutBack;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInOutBack_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInOutBack;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInBounce_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInBounce;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseOutBounce_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseOutBounce;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing3Type_1EaseInOutBounce_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Easing3Type)Effekseer::Easing3Type::EaseInOutBounce;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterEasingFloatCore(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int32_t arg2 ;
  Effekseer::ParameterEasingFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (Effekseer::ParameterEasingFloat *)new Effekseer::ParameterEasingFloat(arg1,arg2);
  *(Effekseer::ParameterEasingFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterEasingFloatCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterEasingFloat *arg1 = (Effekseer::ParameterEasingFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterEasingFloat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterEasingSIMDVec3Core(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterEasingSIMDVec3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterEasingSIMDVec3 *)new Effekseer::ParameterEasingSIMDVec3();
  *(Effekseer::ParameterEasingSIMDVec3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterEasingSIMDVec3Core(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterEasingSIMDVec3 *arg1 = (Effekseer::ParameterEasingSIMDVec3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterEasingSIMDVec3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InstanceEasingFloat_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InstanceEasingFloat_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  result = (float) ((arg1)->start);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InstanceEasingFloat_1middle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->middle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InstanceEasingFloat_1middle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  result = (float) ((arg1)->middle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InstanceEasingFloat_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InstanceEasingFloat_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  result = (float) ((arg1)->end);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InstanceEasingFloat_1Rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Rate = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_InstanceEasingFloat_1Rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  result = (float) ((arg1)->Rate);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1InstanceEasingFloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::InstanceEasing< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::InstanceEasing< float > *)new Effekseer::InstanceEasing< float >();
  *(Effekseer::InstanceEasing< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1InstanceEasingFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::InstanceEasing< float > *arg1 = (Effekseer::InstanceEasing< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::InstanceEasing< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1RefEqS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqS = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1RefEqS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqS);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1RefEqE_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqE = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1RefEqE_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqE);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1RefEqM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1RefEqM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqM);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1type_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  Effekseer::Easing3Type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  arg2 = (Effekseer::Easing3Type)jarg2; 
  if (arg1) (arg1)->type_ = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1type_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  Effekseer::Easing3Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  result = (Effekseer::Easing3Type) ((arg1)->type_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  std::array< float,4 > *arg2 = (std::array< float,4 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  arg2 = *(std::array< float,4 > **)&jarg2; 
  if (arg1) (arg1)->params = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  std::array< float,4 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  result = (std::array< float,4 > *)& ((arg1)->params);
  *(std::array< float,4 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1channelCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->channelCount = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1channelCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  result = (int32_t) ((arg1)->channelCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1isMiddleEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMiddleEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1isMiddleEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  result = (bool) ((arg1)->isMiddleEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1isIndividualEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isIndividualEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterEasingFloatBaseCore_1isIndividualEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  result = (bool) ((arg1)->isIndividualEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterEasingFloatBaseCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterEasing< float > *arg1 = (Effekseer::ParameterEasing< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterEasing< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveTimelineType_1Time_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::FCurveTimelineType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FCurveTimelineType)Effekseer::FCurveTimelineType::Time;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveTimelineType_1Percent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::FCurveTimelineType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FCurveTimelineType)Effekseer::FCurveTimelineType::Percent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FCurve(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (Effekseer::FCurve *)new Effekseer::FCurve(arg1);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::FCurve *arg1 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::FCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveScalar_1Timeline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::FCurveScalar *arg1 = (Effekseer::FCurveScalar *) 0 ;
  Effekseer::FCurveTimelineType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveScalar **)&jarg1; 
  arg2 = (Effekseer::FCurveTimelineType)jarg2; 
  if (arg1) (arg1)->Timeline = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveScalar_1Timeline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::FCurveScalar *arg1 = (Effekseer::FCurveScalar *) 0 ;
  Effekseer::FCurveTimelineType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveScalar **)&jarg1; 
  result = (Effekseer::FCurveTimelineType) ((arg1)->Timeline);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveScalar_1S_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveScalar *arg1 = (Effekseer::FCurveScalar *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveScalar **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->S = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveScalar_1S_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveScalar *arg1 = (Effekseer::FCurveScalar *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveScalar **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->S);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FCurveScalar(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::FCurveScalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FCurveScalar *)new Effekseer::FCurveScalar();
  *(Effekseer::FCurveScalar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FCurveScalar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::FCurveScalar *arg1 = (Effekseer::FCurveScalar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::FCurveScalar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector2D_1Timeline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::FCurveVector2D *arg1 = (Effekseer::FCurveVector2D *) 0 ;
  Effekseer::FCurveTimelineType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector2D **)&jarg1; 
  arg2 = (Effekseer::FCurveTimelineType)jarg2; 
  if (arg1) (arg1)->Timeline = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector2D_1Timeline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::FCurveVector2D *arg1 = (Effekseer::FCurveVector2D *) 0 ;
  Effekseer::FCurveTimelineType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector2D **)&jarg1; 
  result = (Effekseer::FCurveTimelineType) ((arg1)->Timeline);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector2D_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVector2D *arg1 = (Effekseer::FCurveVector2D *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVector2D **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->X = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector2D_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVector2D *arg1 = (Effekseer::FCurveVector2D *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector2D **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->X);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector2D_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVector2D *arg1 = (Effekseer::FCurveVector2D *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVector2D **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->Y = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector2D_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVector2D *arg1 = (Effekseer::FCurveVector2D *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector2D **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->Y);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FCurveVector2D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::FCurveVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FCurveVector2D *)new Effekseer::FCurveVector2D();
  *(Effekseer::FCurveVector2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FCurveVector2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::FCurveVector2D *arg1 = (Effekseer::FCurveVector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::FCurveVector2D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector3D_1Timeline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  Effekseer::FCurveTimelineType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  arg2 = (Effekseer::FCurveTimelineType)jarg2; 
  if (arg1) (arg1)->Timeline = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector3D_1Timeline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  Effekseer::FCurveTimelineType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  result = (Effekseer::FCurveTimelineType) ((arg1)->Timeline);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector3D_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->X = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector3D_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->X);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector3D_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->Y = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector3D_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->Y);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector3D_1Z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->Z = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVector3D_1Z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->Z);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FCurveVector3D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::FCurveVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FCurveVector3D *)new Effekseer::FCurveVector3D();
  *(Effekseer::FCurveVector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FCurveVector3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::FCurveVector3D *arg1 = (Effekseer::FCurveVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::FCurveVector3D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1Timeline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurveTimelineType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  arg2 = (Effekseer::FCurveTimelineType)jarg2; 
  if (arg1) (arg1)->Timeline = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1Timeline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurveTimelineType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  result = (Effekseer::FCurveTimelineType) ((arg1)->Timeline);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1R_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->R = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1R_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->R);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1G_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->G = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1G_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->G);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1B_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->B = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1B_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->B);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1A_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurve *arg2 = (Effekseer::FCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  arg2 = *(Effekseer::FCurve **)&jarg2; 
  if (arg1) (arg1)->A = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveVectorColor_1A_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  Effekseer::FCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  result = (Effekseer::FCurve *)& ((arg1)->A);
  *(Effekseer::FCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1FCurveVectorColor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::FCurveVectorColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::FCurveVectorColor *)new Effekseer::FCurveVectorColor();
  *(Effekseer::FCurveVectorColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1FCurveVectorColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::FCurveVectorColor *arg1 = (Effekseer::FCurveVectorColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::FCurveVectorColor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1PerlinNoise_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::PerlinNoise *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::PerlinNoise *)new Effekseer::PerlinNoise();
  *(Effekseer::PerlinNoise **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1PerlinNoise_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::uint_fast32_t arg1 ;
  Effekseer::PerlinNoise *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint_fast32_t)jarg1; 
  result = (Effekseer::PerlinNoise *)new Effekseer::PerlinNoise(arg1);
  *(Effekseer::PerlinNoise **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1PerlinNoise(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::PerlinNoise *arg1 = (Effekseer::PerlinNoise *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::PerlinNoise **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ArrayLocalForceFieldVelocities_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::array< Effekseer::SIMD::Vec3f,4 > *)new std::array< Effekseer::SIMD::Vec3f,4 >();
  *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ArrayLocalForceFieldVelocities_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 > *arg1 = 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< Effekseer::SIMD::Vec3f,4 > const & reference is null");
    return 0;
  } 
  result = (std::array< Effekseer::SIMD::Vec3f,4 > *)new std::array< Effekseer::SIMD::Vec3f,4 >((std::array< Effekseer::SIMD::Vec3f,4 > const &)*arg1);
  *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayLocalForceFieldVelocities_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 > *arg1 = (std::array< Effekseer::SIMD::Vec3f,4 > *) 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jarg1; 
  result = ((std::array< Effekseer::SIMD::Vec3f,4 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayLocalForceFieldVelocities_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 > *arg1 = (std::array< Effekseer::SIMD::Vec3f,4 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jarg1; 
  result = (bool)((std::array< Effekseer::SIMD::Vec3f,4 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayLocalForceFieldVelocities_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::array< Effekseer::SIMD::Vec3f,4 > *arg1 = (std::array< Effekseer::SIMD::Vec3f,4 > *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::SIMD::Vec3f const & reference is null");
    return ;
  } 
  (arg1)->fill((Effekseer::SIMD::Vec3f const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayLocalForceFieldVelocities_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 > *arg1 = (std::array< Effekseer::SIMD::Vec3f,4 > *) 0 ;
  int arg2 ;
  std::array< Effekseer::SIMD::Vec3f,4 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< Effekseer::SIMD::Vec3f,4 >::value_type *) &std_array_Sl_Effekseer_SIMD_Vec3f_Sc_4_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::array< Effekseer::SIMD::Vec3f,4 >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ArrayLocalForceFieldVelocities_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::array< Effekseer::SIMD::Vec3f,4 > *arg1 = (std::array< Effekseer::SIMD::Vec3f,4 > *) 0 ;
  int arg2 ;
  std::array< Effekseer::SIMD::Vec3f,4 >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::array< Effekseer::SIMD::Vec3f,4 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< Effekseer::SIMD::Vec3f,4 >::value_type const & reference is null");
    return ;
  } 
  try {
    std_array_Sl_Effekseer_SIMD_Vec3f_Sc_4_Sg__set(arg1,arg2,(Effekseer::SIMD::Vec3f const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ArrayLocalForceFieldVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< Effekseer::SIMD::Vec3f,4 > *arg1 = (std::array< Effekseer::SIMD::Vec3f,4 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->Position);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1PreviousVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->PreviousVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1PreviousVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->PreviousVelocity);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1PreviousSumVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->PreviousSumVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1PreviousSumVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->PreviousSumVelocity);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1FieldCenter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->FieldCenter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1FieldCenter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->FieldCenter);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1TargetPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->TargetPosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1TargetPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->TargetPosition);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1FieldRotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Mat44f *arg2 = (Effekseer::SIMD::Mat44f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Mat44f **)&jarg2; 
  if (arg1) (arg1)->FieldRotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1FieldRotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  result = (Effekseer::SIMD::Mat44f *)& ((arg1)->FieldRotation);
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1IsFieldRotated_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsFieldRotated = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1IsFieldRotated_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  result = (bool) ((arg1)->IsFieldRotated);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1DeltaFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DeltaFrame = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldCommonParameter_1DeltaFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  result = (float) ((arg1)->DeltaFrame);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldCommonParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldCommonParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldCommonParameter *)new Effekseer::ForceFieldCommonParameter();
  *(Effekseer::ForceFieldCommonParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldCommonParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldCommonParameter *arg1 = (Effekseer::ForceFieldCommonParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldCommonParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffCommonParameter_1Power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffCommonParameter *arg1 = (Effekseer::ForceFieldFalloffCommonParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffCommonParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffCommonParameter_1Power_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffCommonParameter *arg1 = (Effekseer::ForceFieldFalloffCommonParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffCommonParameter **)&jarg1; 
  result = (float) ((arg1)->Power);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffCommonParameter_1MinDistance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffCommonParameter *arg1 = (Effekseer::ForceFieldFalloffCommonParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffCommonParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinDistance = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffCommonParameter_1MinDistance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffCommonParameter *arg1 = (Effekseer::ForceFieldFalloffCommonParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffCommonParameter **)&jarg1; 
  result = (float) ((arg1)->MinDistance);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffCommonParameter_1MaxDistance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffCommonParameter *arg1 = (Effekseer::ForceFieldFalloffCommonParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffCommonParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaxDistance = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffCommonParameter_1MaxDistance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffCommonParameter *arg1 = (Effekseer::ForceFieldFalloffCommonParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffCommonParameter **)&jarg1; 
  result = (float) ((arg1)->MaxDistance);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldFalloffCommonParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldFalloffCommonParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldFalloffCommonParameter *)new Effekseer::ForceFieldFalloffCommonParameter();
  *(Effekseer::ForceFieldFalloffCommonParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldFalloffCommonParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldFalloffCommonParameter *arg1 = (Effekseer::ForceFieldFalloffCommonParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldFalloffCommonParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldFalloffSphereParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldFalloffSphereParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldFalloffSphereParameter *)new Effekseer::ForceFieldFalloffSphereParameter();
  *(Effekseer::ForceFieldFalloffSphereParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldFalloffSphereParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldFalloffSphereParameter *arg1 = (Effekseer::ForceFieldFalloffSphereParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldFalloffSphereParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffTubeParameter_1RadiusPower_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffTubeParameter *arg1 = (Effekseer::ForceFieldFalloffTubeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffTubeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RadiusPower = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffTubeParameter_1RadiusPower_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffTubeParameter *arg1 = (Effekseer::ForceFieldFalloffTubeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffTubeParameter **)&jarg1; 
  result = (float) ((arg1)->RadiusPower);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffTubeParameter_1MinRadius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffTubeParameter *arg1 = (Effekseer::ForceFieldFalloffTubeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffTubeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinRadius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffTubeParameter_1MinRadius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffTubeParameter *arg1 = (Effekseer::ForceFieldFalloffTubeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffTubeParameter **)&jarg1; 
  result = (float) ((arg1)->MinRadius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffTubeParameter_1MaxRadius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffTubeParameter *arg1 = (Effekseer::ForceFieldFalloffTubeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffTubeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaxRadius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffTubeParameter_1MaxRadius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffTubeParameter *arg1 = (Effekseer::ForceFieldFalloffTubeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffTubeParameter **)&jarg1; 
  result = (float) ((arg1)->MaxRadius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldFalloffTubeParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldFalloffTubeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldFalloffTubeParameter *)new Effekseer::ForceFieldFalloffTubeParameter();
  *(Effekseer::ForceFieldFalloffTubeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldFalloffTubeParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldFalloffTubeParameter *arg1 = (Effekseer::ForceFieldFalloffTubeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldFalloffTubeParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffConeParameter_1AnglePower_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffConeParameter *arg1 = (Effekseer::ForceFieldFalloffConeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffConeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AnglePower = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffConeParameter_1AnglePower_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffConeParameter *arg1 = (Effekseer::ForceFieldFalloffConeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffConeParameter **)&jarg1; 
  result = (float) ((arg1)->AnglePower);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffConeParameter_1MinAngle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffConeParameter *arg1 = (Effekseer::ForceFieldFalloffConeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffConeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinAngle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffConeParameter_1MinAngle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffConeParameter *arg1 = (Effekseer::ForceFieldFalloffConeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffConeParameter **)&jarg1; 
  result = (float) ((arg1)->MinAngle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffConeParameter_1MaxAngle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldFalloffConeParameter *arg1 = (Effekseer::ForceFieldFalloffConeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffConeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaxAngle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldFalloffConeParameter_1MaxAngle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldFalloffConeParameter *arg1 = (Effekseer::ForceFieldFalloffConeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldFalloffConeParameter **)&jarg1; 
  result = (float) ((arg1)->MaxAngle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldFalloffConeParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldFalloffConeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldFalloffConeParameter *)new Effekseer::ForceFieldFalloffConeParameter();
  *(Effekseer::ForceFieldFalloffConeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldFalloffConeParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldFalloffConeParameter *arg1 = (Effekseer::ForceFieldFalloffConeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldFalloffConeParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldForceParameter_1Power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldForceParameter *arg1 = (Effekseer::ForceFieldForceParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldForceParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldForceParameter_1Power_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldForceParameter *arg1 = (Effekseer::ForceFieldForceParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldForceParameter **)&jarg1; 
  result = (float) ((arg1)->Power);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldForceParameter_1Gravitation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ForceFieldForceParameter *arg1 = (Effekseer::ForceFieldForceParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldForceParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Gravitation = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldForceParameter_1Gravitation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ForceFieldForceParameter *arg1 = (Effekseer::ForceFieldForceParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldForceParameter **)&jarg1; 
  result = (bool) ((arg1)->Gravitation);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldForceParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldForceParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldForceParameter *)new Effekseer::ForceFieldForceParameter();
  *(Effekseer::ForceFieldForceParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldForceParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldForceParameter *arg1 = (Effekseer::ForceFieldForceParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldForceParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldWindParameter_1Power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldWindParameter *arg1 = (Effekseer::ForceFieldWindParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldWindParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldWindParameter_1Power_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldWindParameter *arg1 = (Effekseer::ForceFieldWindParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldWindParameter **)&jarg1; 
  result = (float) ((arg1)->Power);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldWindParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldWindParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldWindParameter *)new Effekseer::ForceFieldWindParameter();
  *(Effekseer::ForceFieldWindParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldWindParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldWindParameter *arg1 = (Effekseer::ForceFieldWindParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldWindParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldVortexType_1ConstantAngle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ForceFieldVortexType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldVortexType)Effekseer::ForceFieldVortexType::ConstantAngle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldVortexType_1ConstantSpeed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ForceFieldVortexType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldVortexType)Effekseer::ForceFieldVortexType::ConstantSpeed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldVortexParameter_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ForceFieldVortexParameter *arg1 = (Effekseer::ForceFieldVortexParameter *) 0 ;
  Effekseer::ForceFieldVortexType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldVortexParameter **)&jarg1; 
  arg2 = (Effekseer::ForceFieldVortexType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldVortexParameter_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ForceFieldVortexParameter *arg1 = (Effekseer::ForceFieldVortexParameter *) 0 ;
  Effekseer::ForceFieldVortexType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldVortexParameter **)&jarg1; 
  result = (Effekseer::ForceFieldVortexType) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldVortexParameter_1Power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldVortexParameter *arg1 = (Effekseer::ForceFieldVortexParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldVortexParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldVortexParameter_1Power_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldVortexParameter *arg1 = (Effekseer::ForceFieldVortexParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldVortexParameter **)&jarg1; 
  result = (float) ((arg1)->Power);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldVortexParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldVortexParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldVortexParameter *)new Effekseer::ForceFieldVortexParameter();
  *(Effekseer::ForceFieldVortexParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldVortexParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldVortexParameter *arg1 = (Effekseer::ForceFieldVortexParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldVortexParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldTurbulenceType_1Simple_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ForceFieldTurbulenceType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldTurbulenceType)Effekseer::ForceFieldTurbulenceType::Simple;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldTurbulenceType_1Complicated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ForceFieldTurbulenceType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldTurbulenceType)Effekseer::ForceFieldTurbulenceType::Complicated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldTurbulenceParameter_1Power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldTurbulenceParameter *arg1 = (Effekseer::ForceFieldTurbulenceParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldTurbulenceParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldTurbulenceParameter_1Power_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldTurbulenceParameter *arg1 = (Effekseer::ForceFieldTurbulenceParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldTurbulenceParameter **)&jarg1; 
  result = (float) ((arg1)->Power);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldTurbulenceParameter(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloat jarg3, jfloat jarg4, jint jarg5) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldTurbulenceType arg1 ;
  int32_t arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  Effekseer::ForceFieldTurbulenceParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Effekseer::ForceFieldTurbulenceType)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (Effekseer::ForceFieldTurbulenceParameter *)new Effekseer::ForceFieldTurbulenceParameter(arg1,arg2,arg3,arg4,arg5);
  *(Effekseer::ForceFieldTurbulenceParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldTurbulenceParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldTurbulenceParameter *arg1 = (Effekseer::ForceFieldTurbulenceParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldTurbulenceParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldDragParameter_1Power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldDragParameter *arg1 = (Effekseer::ForceFieldDragParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldDragParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldDragParameter_1Power_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldDragParameter *arg1 = (Effekseer::ForceFieldDragParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldDragParameter **)&jarg1; 
  result = (float) ((arg1)->Power);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldDragParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldDragParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldDragParameter *)new Effekseer::ForceFieldDragParameter();
  *(Effekseer::ForceFieldDragParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldDragParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldDragParameter *arg1 = (Effekseer::ForceFieldDragParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldDragParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldGravityParameter_1Gravity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ForceFieldGravityParameter *arg1 = (Effekseer::ForceFieldGravityParameter *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ForceFieldGravityParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->Gravity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldGravityParameter_1Gravity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldGravityParameter *arg1 = (Effekseer::ForceFieldGravityParameter *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldGravityParameter **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->Gravity);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldGravityParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldGravityParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldGravityParameter *)new Effekseer::ForceFieldGravityParameter();
  *(Effekseer::ForceFieldGravityParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldGravityParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldGravityParameter *arg1 = (Effekseer::ForceFieldGravityParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldGravityParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldAttractiveForceParameter_1Force_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Force = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldAttractiveForceParameter_1Force_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  result = (float) ((arg1)->Force);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldAttractiveForceParameter_1Control_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Control = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldAttractiveForceParameter_1Control_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  result = (float) ((arg1)->Control);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldAttractiveForceParameter_1MinRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinRange = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldAttractiveForceParameter_1MinRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  result = (float) ((arg1)->MinRange);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldAttractiveForceParameter_1MaxRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaxRange = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ForceFieldAttractiveForceParameter_1MaxRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  result = (float) ((arg1)->MaxRange);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldAttractiveForceParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldAttractiveForceParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldAttractiveForceParameter *)new Effekseer::ForceFieldAttractiveForceParameter();
  *(Effekseer::ForceFieldAttractiveForceParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldAttractiveForceParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldAttractiveForceParameter *arg1 = (Effekseer::ForceFieldAttractiveForceParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldAttractiveForceParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceFieldFalloff(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceFieldFalloff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceFieldFalloff *)new Effekseer::ForceFieldFalloff();
  *(Effekseer::ForceFieldFalloff **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceFieldFalloff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceFieldFalloff *arg1 = (Effekseer::ForceFieldFalloff *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceFieldFalloff **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ForceField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ForceField *)new Effekseer::ForceField();
  *(Effekseer::ForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ForceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ForceField *arg1 = (Effekseer::ForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ForceField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldFalloffType_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldFalloffType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldFalloffType)Effekseer::LocalForceFieldFalloffType::None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldFalloffType_1Sphere_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldFalloffType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldFalloffType)Effekseer::LocalForceFieldFalloffType::Sphere;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldFalloffType_1Tube_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldFalloffType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldFalloffType)Effekseer::LocalForceFieldFalloffType::Tube;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldFalloffType_1Cone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldFalloffType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldFalloffType)Effekseer::LocalForceFieldFalloffType::Cone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldType_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldType)Effekseer::LocalForceFieldType::None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldType_1Force_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldType)Effekseer::LocalForceFieldType::Force;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldType_1Wind_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldType)Effekseer::LocalForceFieldType::Wind;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldType_1Vortex_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldType)Effekseer::LocalForceFieldType::Vortex;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldType_1Turbulence_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldType)Effekseer::LocalForceFieldType::Turbulence;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldType_1Drag_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldType)Effekseer::LocalForceFieldType::Drag;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldType_1Gravity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldType)Effekseer::LocalForceFieldType::Gravity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldType_1AttractiveForce_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocalForceFieldType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldType)Effekseer::LocalForceFieldType::AttractiveForce;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  Effekseer::Vector3D *arg2 = (Effekseer::Vector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  arg2 = *(Effekseer::Vector3D **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  Effekseer::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  result = (Effekseer::Vector3D *)& ((arg1)->Position);
  *(Effekseer::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1Rotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  Effekseer::SIMD::Mat44f *arg2 = (Effekseer::SIMD::Mat44f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Mat44f **)&jarg2; 
  if (arg1) (arg1)->Rotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1Rotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  result = (Effekseer::SIMD::Mat44f *)& ((arg1)->Rotation);
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1InvRotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  Effekseer::SIMD::Mat44f *arg2 = (Effekseer::SIMD::Mat44f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Mat44f **)&jarg2; 
  if (arg1) (arg1)->InvRotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1InvRotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  Effekseer::SIMD::Mat44f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  result = (Effekseer::SIMD::Mat44f *)& ((arg1)->InvRotation);
  *(Effekseer::SIMD::Mat44f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1IsRotated_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsRotated = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1IsRotated_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  result = (bool) ((arg1)->IsRotated);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1IsGlobal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsGlobal = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1IsGlobal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  result = (bool) ((arg1)->IsGlobal);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1HasValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HasValue = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldElementParameter_1HasValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  result = (bool) ((arg1)->HasValue);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1LocalForceFieldElementParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldElementParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldElementParameter *)new Effekseer::LocalForceFieldElementParameter();
  *(Effekseer::LocalForceFieldElementParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1LocalForceFieldElementParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::LocalForceFieldElementParameter *arg1 = (Effekseer::LocalForceFieldElementParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::LocalForceFieldElementParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldParameter_1HasValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::LocalForceFieldParameter *arg1 = (Effekseer::LocalForceFieldParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HasValue = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldParameter_1HasValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::LocalForceFieldParameter *arg1 = (Effekseer::LocalForceFieldParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldParameter **)&jarg1; 
  result = (bool) ((arg1)->HasValue);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldParameter_1IsGlobalEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::LocalForceFieldParameter *arg1 = (Effekseer::LocalForceFieldParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsGlobalEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldParameter_1IsGlobalEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::LocalForceFieldParameter *arg1 = (Effekseer::LocalForceFieldParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldParameter **)&jarg1; 
  result = (bool) ((arg1)->IsGlobalEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1LocalForceFieldParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldParameter *)new Effekseer::LocalForceFieldParameter();
  *(Effekseer::LocalForceFieldParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1LocalForceFieldParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::LocalForceFieldParameter *arg1 = (Effekseer::LocalForceFieldParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::LocalForceFieldParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1Velocities_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 > *arg2 = (std::array< Effekseer::SIMD::Vec3f,4 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  arg2 = *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jarg2; 
  if (arg1) (arg1)->Velocities = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1Velocities_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  std::array< Effekseer::SIMD::Vec3f,4 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  result = (std::array< Effekseer::SIMD::Vec3f,4 > *)& ((arg1)->Velocities);
  *(std::array< Effekseer::SIMD::Vec3f,4 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1ExternalVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->ExternalVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1ExternalVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->ExternalVelocity);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1VelocitySum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->VelocitySum = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1VelocitySum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->VelocitySum);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1ModifyLocation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->ModifyLocation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1ModifyLocation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->ModifyLocation);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1GlobalVelocitySum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->GlobalVelocitySum = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1GlobalVelocitySum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->GlobalVelocitySum);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1GlobalModifyLocation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->GlobalModifyLocation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocalForceFieldInstance_1GlobalModifyLocation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->GlobalModifyLocation);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1LocalForceFieldInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::LocalForceFieldInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocalForceFieldInstance *)new Effekseer::LocalForceFieldInstance();
  *(Effekseer::LocalForceFieldInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1LocalForceFieldInstance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::LocalForceFieldInstance *arg1 = (Effekseer::LocalForceFieldInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::LocalForceFieldInstance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectTerm_1TermMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectTerm *arg1 = (Effekseer::EffectTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TermMin = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectTerm_1TermMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectTerm *arg1 = (Effekseer::EffectTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectTerm **)&jarg1; 
  result = (int32_t) ((arg1)->TermMin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectTerm_1TermMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectTerm *arg1 = (Effekseer::EffectTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TermMax = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectTerm_1TermMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectTerm *arg1 = (Effekseer::EffectTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectTerm **)&jarg1; 
  result = (int32_t) ((arg1)->TermMax);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectTerm(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::EffectTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::EffectTerm *)new Effekseer::EffectTerm();
  *(Effekseer::EffectTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectTerm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectTerm *arg1 = (Effekseer::EffectTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectTerm **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1FirstInstanceStartMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->FirstInstanceStartMin = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1FirstInstanceStartMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  result = (int32_t) ((arg1)->FirstInstanceStartMin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1FirstInstanceStartMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->FirstInstanceStartMax = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1FirstInstanceStartMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  result = (int32_t) ((arg1)->FirstInstanceStartMax);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1FirstInstanceEndMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->FirstInstanceEndMin = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1FirstInstanceEndMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  result = (int32_t) ((arg1)->FirstInstanceEndMin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1FirstInstanceEndMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->FirstInstanceEndMax = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1FirstInstanceEndMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  result = (int32_t) ((arg1)->FirstInstanceEndMax);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1LastInstanceStartMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->LastInstanceStartMin = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1LastInstanceStartMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  result = (int32_t) ((arg1)->LastInstanceStartMin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1LastInstanceStartMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->LastInstanceStartMax = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1LastInstanceStartMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  result = (int32_t) ((arg1)->LastInstanceStartMax);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1LastInstanceEndMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->LastInstanceEndMin = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1LastInstanceEndMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  result = (int32_t) ((arg1)->LastInstanceEndMin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1LastInstanceEndMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->LastInstanceEndMax = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectInstanceTerm_1LastInstanceEndMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  result = (int32_t) ((arg1)->LastInstanceEndMax);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectInstanceTerm(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::EffectInstanceTerm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::EffectInstanceTerm *)new Effekseer::EffectInstanceTerm();
  *(Effekseer::EffectInstanceTerm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectInstanceTerm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectInstanceTerm *arg1 = (Effekseer::EffectInstanceTerm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectInstanceTerm **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1MaterialIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->MaterialIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1MaterialIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (int32_t) ((arg1)->MaterialIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1ColorTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->ColorTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1ColorTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (int32_t) ((arg1)->ColorTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1AlphaTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->AlphaTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1AlphaTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (int32_t) ((arg1)->AlphaTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1AlphaTexWrapType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::TextureWrapType)jarg2; 
  if (arg1) (arg1)->AlphaTexWrapType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1AlphaTexWrapType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::TextureWrapType) ((arg1)->AlphaTexWrapType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1UVDistortionIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->UVDistortionIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1UVDistortionIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (int32_t) ((arg1)->UVDistortionIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1UVDistortionTexWrapType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::TextureWrapType)jarg2; 
  if (arg1) (arg1)->UVDistortionTexWrapType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1UVDistortionTexWrapType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::TextureWrapType) ((arg1)->UVDistortionTexWrapType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->BlendTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (int32_t) ((arg1)->BlendTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendTexWrapType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::TextureWrapType)jarg2; 
  if (arg1) (arg1)->BlendTexWrapType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendTexWrapType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::TextureWrapType) ((arg1)->BlendTexWrapType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendAlphaTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->BlendAlphaTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendAlphaTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (int32_t) ((arg1)->BlendAlphaTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendAlphaTexWrapType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::TextureWrapType)jarg2; 
  if (arg1) (arg1)->BlendAlphaTexWrapType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendAlphaTexWrapType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::TextureWrapType) ((arg1)->BlendAlphaTexWrapType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendUVDistortionTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->BlendUVDistortionTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendUVDistortionTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (int32_t) ((arg1)->BlendUVDistortionTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendUVDistortionTexWrapType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::TextureWrapType)jarg2; 
  if (arg1) (arg1)->BlendUVDistortionTexWrapType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendUVDistortionTexWrapType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::TextureWrapType) ((arg1)->BlendUVDistortionTexWrapType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParameters_1Enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParameters_1Enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  result = (bool) ((arg1)->Enable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParameters_1LoopType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->LoopType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParameters_1LoopType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  result = (int32_t) ((arg1)->LoopType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParameters_1DivideX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->DivideX = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParameters_1DivideX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  result = (int32_t) ((arg1)->DivideX);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParameters_1DivideY_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->DivideY = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParameters_1DivideY_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  result = (int32_t) ((arg1)->DivideY);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectBasicRenderParameter_1FlipbookParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *)new Effekseer::EffectBasicRenderParameter::FlipbookParameters();
  *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectBasicRenderParameter_1FlipbookParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg1 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *arg2 = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jarg2; 
  if (arg1) (arg1)->FlipbookParams = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FlipbookParams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::EffectBasicRenderParameter::FlipbookParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::EffectBasicRenderParameter::FlipbookParameters *)& ((arg1)->FlipbookParams);
  *(Effekseer::EffectBasicRenderParameter::FlipbookParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1MaterialType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::RendererMaterialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::RendererMaterialType)jarg2; 
  if (arg1) (arg1)->MaterialType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1MaterialType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::RendererMaterialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::RendererMaterialType) ((arg1)->MaterialType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1UVDistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->UVDistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1UVDistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (float) ((arg1)->UVDistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1TextureBlendType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TextureBlendType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1TextureBlendType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (int32_t) ((arg1)->TextureBlendType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendUVDistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->BlendUVDistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1BlendUVDistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (float) ((arg1)->BlendUVDistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1EnableFalloff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EnableFalloff = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1EnableFalloff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (bool) ((arg1)->EnableFalloff);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1EmissiveScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EmissiveScaling = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1EmissiveScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (float) ((arg1)->EmissiveScaling);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1AlphaBlend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::AlphaBlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::AlphaBlendType)jarg2; 
  if (arg1) (arg1)->AlphaBlend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1AlphaBlend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::AlphaBlendType) ((arg1)->AlphaBlend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FilterType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureFilterType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::TextureFilterType)jarg2; 
  if (arg1) (arg1)->FilterType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1FilterType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureFilterType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::TextureFilterType) ((arg1)->FilterType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1WrapType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (Effekseer::TextureWrapType)jarg2; 
  if (arg1) (arg1)->WrapType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1WrapType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  Effekseer::TextureWrapType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (Effekseer::TextureWrapType) ((arg1)->WrapType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1ZWrite_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ZWrite = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1ZWrite_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (bool) ((arg1)->ZWrite);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1ZTest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ZTest = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1ZTest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (bool) ((arg1)->ZTest);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1Distortion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Distortion = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1Distortion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (bool) ((arg1)->Distortion);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1DistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1DistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (float) ((arg1)->DistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1SoftParticleDistanceFar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SoftParticleDistanceFar = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1SoftParticleDistanceFar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (float) ((arg1)->SoftParticleDistanceFar);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1SoftParticleDistanceNear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SoftParticleDistanceNear = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1SoftParticleDistanceNear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (float) ((arg1)->SoftParticleDistanceNear);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1SoftParticleDistanceNearOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SoftParticleDistanceNearOffset = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectBasicRenderParameter_1SoftParticleDistanceNearOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  result = (float) ((arg1)->SoftParticleDistanceNearOffset);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectBasicRenderParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::EffectBasicRenderParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::EffectBasicRenderParameter *)new Effekseer::EffectBasicRenderParameter();
  *(Effekseer::EffectBasicRenderParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectBasicRenderParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectBasicRenderParameter *arg1 = (Effekseer::EffectBasicRenderParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectBasicRenderParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectModelParameter_1Lighting_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectModelParameter *arg1 = (Effekseer::EffectModelParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectModelParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Lighting = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectModelParameter_1Lighting_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectModelParameter *arg1 = (Effekseer::EffectModelParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectModelParameter **)&jarg1; 
  result = (bool) ((arg1)->Lighting);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectModelParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::EffectModelParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::EffectModelParameter *)new Effekseer::EffectModelParameter();
  *(Effekseer::EffectModelParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectModelParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectModelParameter *arg1 = (Effekseer::EffectModelParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectModelParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getEffect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  Effekseer::Effect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  result = (Effekseer::Effect *)((Effekseer::EffectNode const *)arg1)->GetEffect();
  *(Effekseer::Effect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getGeneration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  result = (int)((Effekseer::EffectNode const *)arg1)->GetGeneration();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getChildrenCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  result = (int)((Effekseer::EffectNode const *)arg1)->GetChildrenCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getNonImplementedChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int arg2 ;
  Effekseer::EffectNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Effekseer::EffectNode *)((Effekseer::EffectNode const *)arg1)->GetChild(arg2);
  *(Effekseer::EffectNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getBasicRenderParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  Effekseer::EffectBasicRenderParameter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  result = (arg1)->GetBasicRenderParameter();
  *(Effekseer::EffectBasicRenderParameter **)&jresult = new Effekseer::EffectBasicRenderParameter((const Effekseer::EffectBasicRenderParameter &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1setBasicRenderParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  Effekseer::EffectBasicRenderParameter arg2 ;
  Effekseer::EffectBasicRenderParameter *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  argp2 = *(Effekseer::EffectBasicRenderParameter **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::EffectBasicRenderParameter");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetBasicRenderParameter(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getEffectModelParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  Effekseer::EffectModelParameter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  result = (arg1)->GetEffectModelParameter();
  *(Effekseer::EffectModelParameter **)&jresult = new Effekseer::EffectModelParameter((const Effekseer::EffectModelParameter &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1calculateInstanceTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  Effekseer::EffectInstanceTerm *arg2 = 0 ;
  Effekseer::EffectInstanceTerm result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  arg2 = *(Effekseer::EffectInstanceTerm **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Effekseer::EffectInstanceTerm & reference is null");
    return 0;
  } 
  result = ((Effekseer::EffectNode const *)arg1)->CalculateInstanceTerm(*arg2);
  *(Effekseer::EffectInstanceTerm **)&jresult = new Effekseer::EffectInstanceTerm((const Effekseer::EffectInstanceTerm &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int arg2 ;
  Effekseer::EffectNodeImplemented *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Effekseer::EffectNodeImplemented *)Effekseer_EffectNode_getChild(arg1,arg2);
  *(Effekseer::EffectNodeImplemented **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getChildAsSprite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int arg2 ;
  Effekseer::EffectNodeSprite *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Effekseer::EffectNodeSprite *)Effekseer_EffectNode_getChildAsSprite(arg1,arg2);
  *(Effekseer::EffectNodeSprite **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getChildAsRibbon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int arg2 ;
  Effekseer::EffectNodeRibbon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Effekseer::EffectNodeRibbon *)Effekseer_EffectNode_getChildAsRibbon(arg1,arg2);
  *(Effekseer::EffectNodeRibbon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getChildAsTrack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int arg2 ;
  Effekseer::EffectNodeTrack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Effekseer::EffectNodeTrack *)Effekseer_EffectNode_getChildAsTrack(arg1,arg2);
  *(Effekseer::EffectNodeTrack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getChildAsRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int arg2 ;
  Effekseer::EffectNodeRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Effekseer::EffectNodeRing *)Effekseer_EffectNode_getChildAsRing(arg1,arg2);
  *(Effekseer::EffectNodeRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNode_1getChildAsModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Effekseer::EffectNode *arg1 = (Effekseer::EffectNode *) 0 ;
  int arg2 ;
  Effekseer::EffectNodeModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Effekseer::EffectNodeModel *)Effekseer_EffectNode_getChildAsModel(arg1,arg2);
  *(Effekseer::EffectNodeModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_BindType_1NotBind_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::BindType)Effekseer::BindType::NotBind;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_BindType_1NotBind_1Root_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::BindType)Effekseer::BindType::NotBind_Root;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_BindType_1WhenCreating_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::BindType)Effekseer::BindType::WhenCreating;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_BindType_1Always_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::BindType)Effekseer::BindType::Always;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TranslationParentBindType_1NotBind_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TranslationParentBindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TranslationParentBindType)Effekseer::TranslationParentBindType::NotBind;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TranslationParentBindType_1NotBind_1Root_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TranslationParentBindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TranslationParentBindType)Effekseer::TranslationParentBindType::NotBind_Root;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TranslationParentBindType_1WhenCreating_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TranslationParentBindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TranslationParentBindType)Effekseer::TranslationParentBindType::WhenCreating;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TranslationParentBindType_1Always_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TranslationParentBindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TranslationParentBindType)Effekseer::TranslationParentBindType::Always;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TranslationParentBindType_1NotBind_1FollowParent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TranslationParentBindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TranslationParentBindType)Effekseer::TranslationParentBindType::NotBind_FollowParent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TranslationParentBindType_1WhenCreating_1FollowParent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::TranslationParentBindType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TranslationParentBindType)Effekseer::TranslationParentBindType::WhenCreating_FollowParent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::StandardColorParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1Random_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::StandardColorParameter::Random;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1Easing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::StandardColorParameter::Easing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1FCurve_1RGBA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::StandardColorParameter::FCurve_RGBA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::StandardColorParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1StandardColorParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::StandardColorParameter *)new Effekseer::StandardColorParameter();
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1StandardColorParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1getFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  Effekseer::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  result = Effekseer_StandardColorParameter_getFixed(arg1);
  *(Effekseer::Color **)&jresult = new Effekseer::Color((const Effekseer::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1setFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  Effekseer::Color arg2 ;
  Effekseer::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  argp2 = *(Effekseer::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::Color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_StandardColorParameter_setFixed(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1getRandom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  Effekseer::random_color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  result = Effekseer_StandardColorParameter_getRandom(arg1);
  *(Effekseer::random_color **)&jresult = new Effekseer::random_color((const Effekseer::random_color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1setRandom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  Effekseer::random_color arg2 ;
  Effekseer::random_color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  argp2 = *(Effekseer::random_color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_StandardColorParameter_setRandom(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1getEasing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  Effekseer::easing_color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  result = Effekseer_StandardColorParameter_getEasing(arg1);
  *(Effekseer::easing_color **)&jresult = new Effekseer::easing_color((const Effekseer::easing_color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1setEasing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  Effekseer::easing_color arg2 ;
  Effekseer::easing_color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  argp2 = *(Effekseer::easing_color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::easing_color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_StandardColorParameter_setEasing(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1getFCurveRGBA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  Effekseer::FCurveVectorColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  result = (Effekseer::FCurveVectorColor *)Effekseer_StandardColorParameter_getFCurveRGBA(arg1);
  *(Effekseer::FCurveVectorColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_StandardColorParameterCore_1setFCurveRGBA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::StandardColorParameter *arg1 = (Effekseer::StandardColorParameter *) 0 ;
  Effekseer::FCurveVectorColor *arg2 = (Effekseer::FCurveVectorColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::StandardColorParameter **)&jarg1; 
  arg2 = *(Effekseer::FCurveVectorColor **)&jarg2; 
  Effekseer_StandardColorParameter_setFCurveRGBA(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1MaxGeneration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxGeneration = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1MaxGeneration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (int) ((arg1)->MaxGeneration);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1TranslationBindType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  Effekseer::BindType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (Effekseer::BindType)jarg2; 
  if (arg1) (arg1)->TranslationBindType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1TranslationBindType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (Effekseer::BindType) ((arg1)->TranslationBindType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1RotationBindType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  Effekseer::BindType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (Effekseer::BindType)jarg2; 
  if (arg1) (arg1)->RotationBindType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1RotationBindType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (Effekseer::BindType) ((arg1)->RotationBindType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1ScalingBindType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  Effekseer::BindType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (Effekseer::BindType)jarg2; 
  if (arg1) (arg1)->ScalingBindType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1ScalingBindType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (Effekseer::BindType) ((arg1)->ScalingBindType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1RemoveWhenLifeIsExtinct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RemoveWhenLifeIsExtinct = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1RemoveWhenLifeIsExtinct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (int) ((arg1)->RemoveWhenLifeIsExtinct);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1RemoveWhenParentIsRemoved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RemoveWhenParentIsRemoved = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1RemoveWhenParentIsRemoved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (int) ((arg1)->RemoveWhenParentIsRemoved);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1RemoveWhenChildrenIsExtinct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RemoveWhenChildrenIsExtinct = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1RemoveWhenChildrenIsExtinct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (int) ((arg1)->RemoveWhenChildrenIsExtinct);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1life_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  Effekseer::random_int *arg2 = (Effekseer::random_int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = *(Effekseer::random_int **)&jarg2; 
  if (arg1) (arg1)->life = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1life_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  Effekseer::random_int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (Effekseer::random_int *)& ((arg1)->life);
  *(Effekseer::random_int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1GenerationTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GenerationTime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1GenerationTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (float) ((arg1)->GenerationTime);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1GenerationTimeOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GenerationTimeOffset = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_18_1GenerationTimeOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  result = (float) ((arg1)->GenerationTimeOffset);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterCommonValues_18(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues_8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCommonValues_8 *)new Effekseer::ParameterCommonValues_8();
  *(Effekseer::ParameterCommonValues_8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterCommonValues_18(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterCommonValues_8 *arg1 = (Effekseer::ParameterCommonValues_8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterCommonValues_8 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RefEqMaxGeneration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->RefEqMaxGeneration = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RefEqMaxGeneration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (int32_t) ((arg1)->RefEqMaxGeneration);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RefEqLife_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqLife = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RefEqLife_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqLife);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RefEqGenerationTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqGenerationTime = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RefEqGenerationTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqGenerationTime);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RefEqGenerationTimeOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqGenerationTimeOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RefEqGenerationTimeOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqGenerationTimeOffset);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1MaxGeneration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxGeneration = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1MaxGeneration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (int) ((arg1)->MaxGeneration);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1TranslationBindType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::TranslationParentBindType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = (Effekseer::TranslationParentBindType)jarg2; 
  if (arg1) (arg1)->TranslationBindType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1TranslationBindType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::TranslationParentBindType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::TranslationParentBindType) ((arg1)->TranslationBindType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RotationBindType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::BindType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = (Effekseer::BindType)jarg2; 
  if (arg1) (arg1)->RotationBindType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RotationBindType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::BindType) ((arg1)->RotationBindType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1ScalingBindType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::BindType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = (Effekseer::BindType)jarg2; 
  if (arg1) (arg1)->ScalingBindType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1ScalingBindType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::BindType) ((arg1)->ScalingBindType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RemoveWhenLifeIsExtinct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RemoveWhenLifeIsExtinct = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RemoveWhenLifeIsExtinct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (int) ((arg1)->RemoveWhenLifeIsExtinct);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RemoveWhenParentIsRemoved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RemoveWhenParentIsRemoved = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RemoveWhenParentIsRemoved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (int) ((arg1)->RemoveWhenParentIsRemoved);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RemoveWhenChildrenIsExtinct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RemoveWhenChildrenIsExtinct = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1RemoveWhenChildrenIsExtinct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (int) ((arg1)->RemoveWhenChildrenIsExtinct);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1life_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::random_int *arg2 = (Effekseer::random_int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = *(Effekseer::random_int **)&jarg2; 
  if (arg1) (arg1)->life = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1life_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::random_int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::random_int *)& ((arg1)->life);
  *(Effekseer::random_int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1GenerationTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->GenerationTime = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1GenerationTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->GenerationTime);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1GenerationTimeOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->GenerationTimeOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCommonValues_1GenerationTimeOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->GenerationTimeOffset);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterCommonValues(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterCommonValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCommonValues *)new Effekseer::ParameterCommonValues();
  *(Effekseer::ParameterCommonValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterCommonValues(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterCommonValues *arg1 = (Effekseer::ParameterCommonValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterCommonValues **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1DepthOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DepthOffset = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1DepthOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  result = (float) ((arg1)->DepthOffset);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1IsDepthOffsetScaledWithCamera_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsDepthOffsetScaledWithCamera = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1IsDepthOffsetScaledWithCamera_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  result = (bool) ((arg1)->IsDepthOffsetScaledWithCamera);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1IsDepthOffsetScaledWithParticleScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsDepthOffsetScaledWithParticleScale = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1IsDepthOffsetScaledWithParticleScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  result = (bool) ((arg1)->IsDepthOffsetScaledWithParticleScale);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1ZSort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  Effekseer::ZSortType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  arg2 = (Effekseer::ZSortType)jarg2; 
  if (arg1) (arg1)->ZSort = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1ZSort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  Effekseer::ZSortType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  result = (Effekseer::ZSortType) ((arg1)->ZSort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1DrawingPriority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->DrawingPriority = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1DrawingPriority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  result = (int32_t) ((arg1)->DrawingPriority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1SoftParticle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SoftParticle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1SoftParticle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  result = (float) ((arg1)->SoftParticle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1DepthParameter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  Effekseer::NodeRendererDepthParameter *arg2 = (Effekseer::NodeRendererDepthParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  arg2 = *(Effekseer::NodeRendererDepthParameter **)&jarg2; 
  if (arg1) (arg1)->DepthParameter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterDepthValues_1DepthParameter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  Effekseer::NodeRendererDepthParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  result = (Effekseer::NodeRendererDepthParameter *)& ((arg1)->DepthParameter);
  *(Effekseer::NodeRendererDepthParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterDepthValues(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterDepthValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterDepthValues *)new Effekseer::ParameterDepthValues();
  *(Effekseer::ParameterDepthValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterDepthValues(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterDepthValues *arg1 = (Effekseer::ParameterDepthValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterDepthValues **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SteeringBehaviorParameter_1MaxFollowSpeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SteeringBehaviorParameter *arg1 = (Effekseer::SteeringBehaviorParameter *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SteeringBehaviorParameter **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->MaxFollowSpeed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SteeringBehaviorParameter_1MaxFollowSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SteeringBehaviorParameter *arg1 = (Effekseer::SteeringBehaviorParameter *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SteeringBehaviorParameter **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->MaxFollowSpeed);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SteeringBehaviorParameter_1SteeringSpeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SteeringBehaviorParameter *arg1 = (Effekseer::SteeringBehaviorParameter *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SteeringBehaviorParameter **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->SteeringSpeed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SteeringBehaviorParameter_1SteeringSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SteeringBehaviorParameter *arg1 = (Effekseer::SteeringBehaviorParameter *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SteeringBehaviorParameter **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->SteeringSpeed);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SteeringBehaviorParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SteeringBehaviorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SteeringBehaviorParameter *)new Effekseer::SteeringBehaviorParameter();
  *(Effekseer::SteeringBehaviorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1SteeringBehaviorParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::SteeringBehaviorParameter *arg1 = (Effekseer::SteeringBehaviorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::SteeringBehaviorParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationType_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationType)Effekseer::ParameterTranslationType_Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationType_1PVA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationType)Effekseer::ParameterTranslationType_PVA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationType_1Easing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationType)Effekseer::ParameterTranslationType_Easing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationType_1FCurve_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationType)Effekseer::ParameterTranslationType_FCurve;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationType_1NurbsCurve_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationType)Effekseer::ParameterTranslationType_NurbsCurve;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationType_1ViewOffset_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationType)Effekseer::ParameterTranslationType_ViewOffset;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationType_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationType)Effekseer::ParameterTranslationType_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationType_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationType)Effekseer::ParameterTranslationType_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationFixed_1RefEq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterTranslationFixed *arg1 = (Effekseer::ParameterTranslationFixed *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationFixed **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->RefEq = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationFixed_1RefEq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationFixed *arg1 = (Effekseer::ParameterTranslationFixed *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationFixed **)&jarg1; 
  result = (int32_t) ((arg1)->RefEq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationFixed_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationFixed *arg1 = (Effekseer::ParameterTranslationFixed *) 0 ;
  Effekseer::Vector3D *arg2 = (Effekseer::Vector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationFixed **)&jarg1; 
  arg2 = *(Effekseer::Vector3D **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationFixed_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationFixed *arg1 = (Effekseer::ParameterTranslationFixed *) 0 ;
  Effekseer::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationFixed **)&jarg1; 
  result = (Effekseer::Vector3D *)& ((arg1)->Position);
  *(Effekseer::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterTranslationFixed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationFixed *)new Effekseer::ParameterTranslationFixed();
  *(Effekseer::ParameterTranslationFixed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterTranslationFixed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterTranslationFixed *arg1 = (Effekseer::ParameterTranslationFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterTranslationFixed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1RefEqP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1RefEqP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqP);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1RefEqV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqV = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1RefEqV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqV);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1RefEqA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1RefEqA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqA);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1location_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->location = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1location_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->location);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1velocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->velocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1velocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->velocity);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1acceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->acceleration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationPVA_1acceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->acceleration);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterTranslationPVA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationPVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationPVA *)new Effekseer::ParameterTranslationPVA();
  *(Effekseer::ParameterTranslationPVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterTranslationPVA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterTranslationPVA *arg1 = (Effekseer::ParameterTranslationPVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterTranslationPVA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationEasing_1RefEqS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationEasing *arg1 = (Effekseer::ParameterTranslationEasing *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationEasing **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqS = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationEasing_1RefEqS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationEasing *arg1 = (Effekseer::ParameterTranslationEasing *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationEasing **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqS);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationEasing_1RefEqE_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationEasing *arg1 = (Effekseer::ParameterTranslationEasing *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationEasing **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqE = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationEasing_1RefEqE_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationEasing *arg1 = (Effekseer::ParameterTranslationEasing *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationEasing **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqE);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationEasing_1location_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationEasing *arg1 = (Effekseer::ParameterTranslationEasing *) 0 ;
  Effekseer::easing_vector3d *arg2 = (Effekseer::easing_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationEasing **)&jarg1; 
  arg2 = *(Effekseer::easing_vector3d **)&jarg2; 
  if (arg1) (arg1)->location = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationEasing_1location_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationEasing *arg1 = (Effekseer::ParameterTranslationEasing *) 0 ;
  Effekseer::easing_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationEasing **)&jarg1; 
  result = (Effekseer::easing_vector3d *)& ((arg1)->location);
  *(Effekseer::easing_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterTranslationEasing(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationEasing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationEasing *)new Effekseer::ParameterTranslationEasing();
  *(Effekseer::ParameterTranslationEasing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterTranslationEasing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterTranslationEasing *arg1 = (Effekseer::ParameterTranslationEasing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterTranslationEasing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationNurbsCurve_1Index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Index = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationNurbsCurve_1Index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  result = (int32_t) ((arg1)->Index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationNurbsCurve_1Scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationNurbsCurve_1Scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  result = (float) ((arg1)->Scale);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationNurbsCurve_1MoveSpeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MoveSpeed = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationNurbsCurve_1MoveSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  result = (float) ((arg1)->MoveSpeed);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationNurbsCurve_1LoopType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->LoopType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationNurbsCurve_1LoopType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  result = (int32_t) ((arg1)->LoopType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterTranslationNurbsCurve(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationNurbsCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationNurbsCurve *)new Effekseer::ParameterTranslationNurbsCurve();
  *(Effekseer::ParameterTranslationNurbsCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterTranslationNurbsCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterTranslationNurbsCurve *arg1 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationViewOffset_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterTranslationViewOffset *arg1 = (Effekseer::ParameterTranslationViewOffset *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterTranslationViewOffset **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->distance = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterTranslationViewOffset_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationViewOffset *arg1 = (Effekseer::ParameterTranslationViewOffset *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterTranslationViewOffset **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->distance);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterTranslationViewOffset(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterTranslationViewOffset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterTranslationViewOffset *)new Effekseer::ParameterTranslationViewOffset();
  *(Effekseer::ParameterTranslationViewOffset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterTranslationViewOffset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterTranslationViewOffset *arg1 = (Effekseer::ParameterTranslationViewOffset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterTranslationViewOffset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocationAbsType_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocationAbsType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocationAbsType)Effekseer::LocationAbsType::None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocationAbsType_1Gravity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocationAbsType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocationAbsType)Effekseer::LocationAbsType::Gravity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocationAbsType_1AttractiveForce_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::LocationAbsType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocationAbsType)Effekseer::LocationAbsType::AttractiveForce;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocationAbsParameter_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::LocationAbsParameter *arg1 = (Effekseer::LocationAbsParameter *) 0 ;
  Effekseer::LocationAbsType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocationAbsParameter **)&jarg1; 
  arg2 = (Effekseer::LocationAbsType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocationAbsParameter_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::LocationAbsParameter *arg1 = (Effekseer::LocationAbsParameter *) 0 ;
  Effekseer::LocationAbsType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocationAbsParameter **)&jarg1; 
  result = (Effekseer::LocationAbsType) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocationAbsParameter_1gravity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::LocationAbsParameter *arg1 = (Effekseer::LocationAbsParameter *) 0 ;
  Effekseer::SIMD::Vec3f *arg2 = (Effekseer::SIMD::Vec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::LocationAbsParameter **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec3f **)&jarg2; 
  if (arg1) (arg1)->gravity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_LocationAbsParameter_1gravity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::LocationAbsParameter *arg1 = (Effekseer::LocationAbsParameter *) 0 ;
  Effekseer::SIMD::Vec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::LocationAbsParameter **)&jarg1; 
  result = (Effekseer::SIMD::Vec3f *)& ((arg1)->gravity);
  *(Effekseer::SIMD::Vec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1LocationAbsParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::LocationAbsParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::LocationAbsParameter *)new Effekseer::LocationAbsParameter();
  *(Effekseer::LocationAbsParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1LocationAbsParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::LocationAbsParameter *arg1 = (Effekseer::LocationAbsParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::LocationAbsParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationType_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationType)Effekseer::ParameterRotationType_Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationType_1PVA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationType)Effekseer::ParameterRotationType_PVA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationType_1Easing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationType)Effekseer::ParameterRotationType_Easing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationType_1AxisPVA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationType)Effekseer::ParameterRotationType_AxisPVA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationType_1AxisEasing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationType)Effekseer::ParameterRotationType_AxisEasing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationType_1FCurve_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationType)Effekseer::ParameterRotationType_FCurve;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationType_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationType)Effekseer::ParameterRotationType_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationType_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationType)Effekseer::ParameterRotationType_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationFixed_1RefEq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRotationFixed *arg1 = (Effekseer::ParameterRotationFixed *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationFixed **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->RefEq = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationFixed_1RefEq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRotationFixed *arg1 = (Effekseer::ParameterRotationFixed *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationFixed **)&jarg1; 
  result = (int32_t) ((arg1)->RefEq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationFixed_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationFixed *arg1 = (Effekseer::ParameterRotationFixed *) 0 ;
  Effekseer::Vector3D *arg2 = (Effekseer::Vector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationFixed **)&jarg1; 
  arg2 = *(Effekseer::Vector3D **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationFixed_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationFixed *arg1 = (Effekseer::ParameterRotationFixed *) 0 ;
  Effekseer::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationFixed **)&jarg1; 
  result = (Effekseer::Vector3D *)& ((arg1)->Position);
  *(Effekseer::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterRotationFixed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationFixed *)new Effekseer::ParameterRotationFixed();
  *(Effekseer::ParameterRotationFixed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterRotationFixed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterRotationFixed *arg1 = (Effekseer::ParameterRotationFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterRotationFixed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1RefEqP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1RefEqP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqP);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1RefEqV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqV = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1RefEqV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqV);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1RefEqA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1RefEqA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqA);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1rotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1rotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->rotation);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1velocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->velocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1velocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->velocity);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1acceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->acceleration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationPVA_1acceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->acceleration);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterRotationPVA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationPVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationPVA *)new Effekseer::ParameterRotationPVA();
  *(Effekseer::ParameterRotationPVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterRotationPVA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterRotationPVA *arg1 = (Effekseer::ParameterRotationPVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterRotationPVA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationEasing_1RefEqS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationEasing *arg1 = (Effekseer::ParameterRotationEasing *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationEasing **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqS = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationEasing_1RefEqS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationEasing *arg1 = (Effekseer::ParameterRotationEasing *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationEasing **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqS);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationEasing_1RefEqE_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationEasing *arg1 = (Effekseer::ParameterRotationEasing *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationEasing **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqE = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationEasing_1RefEqE_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationEasing *arg1 = (Effekseer::ParameterRotationEasing *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationEasing **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqE);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationEasing_1rotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationEasing *arg1 = (Effekseer::ParameterRotationEasing *) 0 ;
  Effekseer::easing_vector3d *arg2 = (Effekseer::easing_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationEasing **)&jarg1; 
  arg2 = *(Effekseer::easing_vector3d **)&jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationEasing_1rotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationEasing *arg1 = (Effekseer::ParameterRotationEasing *) 0 ;
  Effekseer::easing_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationEasing **)&jarg1; 
  result = (Effekseer::easing_vector3d *)& ((arg1)->rotation);
  *(Effekseer::easing_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterRotationEasing(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationEasing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationEasing *)new Effekseer::ParameterRotationEasing();
  *(Effekseer::ParameterRotationEasing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterRotationEasing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterRotationEasing *arg1 = (Effekseer::ParameterRotationEasing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterRotationEasing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisPVA_1axis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->axis = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisPVA_1axis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->axis);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisPVA_1rotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisPVA_1rotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->rotation);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisPVA_1velocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->velocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisPVA_1velocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->velocity);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisPVA_1acceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->acceleration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisPVA_1acceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->acceleration);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterRotationAxisPVA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationAxisPVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationAxisPVA *)new Effekseer::ParameterRotationAxisPVA();
  *(Effekseer::ParameterRotationAxisPVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterRotationAxisPVA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterRotationAxisPVA *arg1 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterRotationAxisPVA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisEasing_1axis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationAxisEasing *arg1 = (Effekseer::ParameterRotationAxisEasing *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationAxisEasing **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->axis = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisEasing_1axis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationAxisEasing *arg1 = (Effekseer::ParameterRotationAxisEasing *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationAxisEasing **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->axis);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisEasing_1easing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRotationAxisEasing *arg1 = (Effekseer::ParameterRotationAxisEasing *) 0 ;
  Effekseer::ParameterEasingFloat *arg2 = (Effekseer::ParameterEasingFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRotationAxisEasing **)&jarg1; 
  arg2 = *(Effekseer::ParameterEasingFloat **)&jarg2; 
  if (arg1) (arg1)->easing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRotationAxisEasing_1easing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationAxisEasing *arg1 = (Effekseer::ParameterRotationAxisEasing *) 0 ;
  Effekseer::ParameterEasingFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRotationAxisEasing **)&jarg1; 
  result = (Effekseer::ParameterEasingFloat *)& ((arg1)->easing);
  *(Effekseer::ParameterEasingFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterRotationAxisEasing(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterRotationAxisEasing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRotationAxisEasing *)new Effekseer::ParameterRotationAxisEasing();
  *(Effekseer::ParameterRotationAxisEasing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterRotationAxisEasing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterRotationAxisEasing *arg1 = (Effekseer::ParameterRotationAxisEasing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterRotationAxisEasing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1PVA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_PVA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1Easing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_Easing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1SinglePVA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_SinglePVA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1SingleEasing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_SingleEasing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1FCurve_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_FCurve;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1SingleFCurve_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_SingleFCurve;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingType_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingType)Effekseer::ParameterScalingType_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingFixed_1RefEq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterScalingFixed *arg1 = (Effekseer::ParameterScalingFixed *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingFixed **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->RefEq = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingFixed_1RefEq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterScalingFixed *arg1 = (Effekseer::ParameterScalingFixed *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingFixed **)&jarg1; 
  result = (int32_t) ((arg1)->RefEq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingFixed_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingFixed *arg1 = (Effekseer::ParameterScalingFixed *) 0 ;
  Effekseer::Vector3D *arg2 = (Effekseer::Vector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingFixed **)&jarg1; 
  arg2 = *(Effekseer::Vector3D **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingFixed_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingFixed *arg1 = (Effekseer::ParameterScalingFixed *) 0 ;
  Effekseer::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingFixed **)&jarg1; 
  result = (Effekseer::Vector3D *)& ((arg1)->Position);
  *(Effekseer::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterScalingFixed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingFixed *)new Effekseer::ParameterScalingFixed();
  *(Effekseer::ParameterScalingFixed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterScalingFixed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterScalingFixed *arg1 = (Effekseer::ParameterScalingFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterScalingFixed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1RefEqP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1RefEqP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqP);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1RefEqV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqV = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1RefEqV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqV);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1RefEqA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1RefEqA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqA);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->Position);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1Velocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->Velocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1Velocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->Velocity);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1Acceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::random_vector3d *arg2 = (Effekseer::random_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  arg2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (arg1) (arg1)->Acceleration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingPVA_1Acceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  Effekseer::random_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  result = (Effekseer::random_vector3d *)& ((arg1)->Acceleration);
  *(Effekseer::random_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterScalingPVA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingPVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingPVA *)new Effekseer::ParameterScalingPVA();
  *(Effekseer::ParameterScalingPVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterScalingPVA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterScalingPVA *arg1 = (Effekseer::ParameterScalingPVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterScalingPVA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingEasing_1RefEqS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingEasing *arg1 = (Effekseer::ParameterScalingEasing *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingEasing **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqS = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingEasing_1RefEqS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingEasing *arg1 = (Effekseer::ParameterScalingEasing *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingEasing **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqS);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingEasing_1RefEqE_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingEasing *arg1 = (Effekseer::ParameterScalingEasing *) 0 ;
  Effekseer::RefMinMax *arg2 = (Effekseer::RefMinMax *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingEasing **)&jarg1; 
  arg2 = *(Effekseer::RefMinMax **)&jarg2; 
  if (arg1) (arg1)->RefEqE = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingEasing_1RefEqE_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingEasing *arg1 = (Effekseer::ParameterScalingEasing *) 0 ;
  Effekseer::RefMinMax *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingEasing **)&jarg1; 
  result = (Effekseer::RefMinMax *)& ((arg1)->RefEqE);
  *(Effekseer::RefMinMax **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingEasing_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingEasing *arg1 = (Effekseer::ParameterScalingEasing *) 0 ;
  Effekseer::easing_vector3d *arg2 = (Effekseer::easing_vector3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingEasing **)&jarg1; 
  arg2 = *(Effekseer::easing_vector3d **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingEasing_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingEasing *arg1 = (Effekseer::ParameterScalingEasing *) 0 ;
  Effekseer::easing_vector3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingEasing **)&jarg1; 
  result = (Effekseer::easing_vector3d *)& ((arg1)->Position);
  *(Effekseer::easing_vector3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterScalingEasing(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingEasing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingEasing *)new Effekseer::ParameterScalingEasing();
  *(Effekseer::ParameterScalingEasing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterScalingEasing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterScalingEasing *arg1 = (Effekseer::ParameterScalingEasing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterScalingEasing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingSinglePVA_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingSinglePVA *arg1 = (Effekseer::ParameterScalingSinglePVA *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingSinglePVA **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingSinglePVA_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingSinglePVA *arg1 = (Effekseer::ParameterScalingSinglePVA *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingSinglePVA **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->Position);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingSinglePVA_1Velocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingSinglePVA *arg1 = (Effekseer::ParameterScalingSinglePVA *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingSinglePVA **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->Velocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingSinglePVA_1Velocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingSinglePVA *arg1 = (Effekseer::ParameterScalingSinglePVA *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingSinglePVA **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->Velocity);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingSinglePVA_1Acceleration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterScalingSinglePVA *arg1 = (Effekseer::ParameterScalingSinglePVA *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterScalingSinglePVA **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->Acceleration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterScalingSinglePVA_1Acceleration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingSinglePVA *arg1 = (Effekseer::ParameterScalingSinglePVA *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterScalingSinglePVA **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->Acceleration);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterScalingSinglePVA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterScalingSinglePVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterScalingSinglePVA *)new Effekseer::ParameterScalingSinglePVA();
  *(Effekseer::ParameterScalingSinglePVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterScalingSinglePVA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterScalingSinglePVA *arg1 = (Effekseer::ParameterScalingSinglePVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterScalingSinglePVA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1EffectsRotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EffectsRotation = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1EffectsRotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (int) ((arg1)->EffectsRotation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1TYPE_1POINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterGenerationLocation::TYPE_POINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1TYPE_1SPHERE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterGenerationLocation::TYPE_SPHERE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1TYPE_1MODEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterGenerationLocation::TYPE_MODEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1TYPE_1CIRCLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterGenerationLocation::TYPE_CIRCLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1TYPE_1LINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterGenerationLocation::TYPE_LINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1TYPE_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterGenerationLocation::TYPE_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1MODELTYPE_1RANDOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eModelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eModelType)Effekseer::ParameterGenerationLocation::MODELTYPE_RANDOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1MODELTYPE_1VERTEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eModelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eModelType)Effekseer::ParameterGenerationLocation::MODELTYPE_VERTEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1MODELTYPE_1VERTEX_1RANDOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eModelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eModelType)Effekseer::ParameterGenerationLocation::MODELTYPE_VERTEX_RANDOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1MODELTYPE_1FACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eModelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eModelType)Effekseer::ParameterGenerationLocation::MODELTYPE_FACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1MODELTYPE_1FACE_1RANDOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eModelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eModelType)Effekseer::ParameterGenerationLocation::MODELTYPE_FACE_RANDOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1MODELTYPE_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eModelType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eModelType)Effekseer::ParameterGenerationLocation::MODELTYPE_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1CIRCLE_1TYPE_1RANDOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eCircleType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eCircleType)Effekseer::ParameterGenerationLocation::CIRCLE_TYPE_RANDOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1CIRCLE_1TYPE_1ORDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eCircleType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eCircleType)Effekseer::ParameterGenerationLocation::CIRCLE_TYPE_ORDER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1CIRCLE_1TYPE_1REVERSE_1ORDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::eCircleType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::eCircleType)Effekseer::ParameterGenerationLocation::CIRCLE_TYPE_REVERSE_ORDER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1LineType_1Random_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::LineType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::LineType)Effekseer::ParameterGenerationLocation::LineType::Random;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1LineType_1Order_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation::LineType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation::LineType)Effekseer::ParameterGenerationLocation::LineType::Order;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getPointLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_vector3d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getPointLocation(arg1);
  *(Effekseer::random_vector3d **)&jresult = new Effekseer::random_vector3d((const Effekseer::random_vector3d &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setPointLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_vector3d arg2 ;
  Effekseer::random_vector3d *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_vector3d");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setPointLocation(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getSphereRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getSphereRadius(arg1);
  *(Effekseer::random_float **)&jresult = new Effekseer::random_float((const Effekseer::random_float &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setSphereRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float arg2 ;
  Effekseer::random_float *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_float **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_float");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setSphereRadius(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getSphereRotationX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getSphereRotationX(arg1);
  *(Effekseer::random_float **)&jresult = new Effekseer::random_float((const Effekseer::random_float &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setSphereRotationX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float arg2 ;
  Effekseer::random_float *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_float **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_float");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setSphereRotationX(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getSphereRotationY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getSphereRotationY(arg1);
  *(Effekseer::random_float **)&jresult = new Effekseer::random_float((const Effekseer::random_float &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setSphereRotationY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float arg2 ;
  Effekseer::random_float *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_float **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_float");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setSphereRotationY(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getModelReferenceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ModelReferenceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (Effekseer::ModelReferenceType)Effekseer_ParameterGenerationLocation_getModelReferenceType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setModelReferenceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ModelReferenceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (Effekseer::ModelReferenceType)jarg2; 
  Effekseer_ParameterGenerationLocation_setModelReferenceType(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getModelIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (int32_t)Effekseer_ParameterGenerationLocation_getModelIndex(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setModelIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  Effekseer_ParameterGenerationLocation_setModelIndex(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getModelType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ParameterGenerationLocation::eModelType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (Effekseer::ParameterGenerationLocation::eModelType)Effekseer_ParameterGenerationLocation_getModelType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setModelType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ParameterGenerationLocation::eModelType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (Effekseer::ParameterGenerationLocation::eModelType)jarg2; 
  Effekseer_ParameterGenerationLocation_setModelType(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getCircleDivision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (int32_t)Effekseer_ParameterGenerationLocation_getCircleDivision(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setCircleDivision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  Effekseer_ParameterGenerationLocation_setCircleDivision(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getCircleRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getCircleRadius(arg1);
  *(Effekseer::random_float **)&jresult = new Effekseer::random_float((const Effekseer::random_float &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setCircleRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float arg2 ;
  Effekseer::random_float *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_float **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_float");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setCircleRadius(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getCircleAngleStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getCircleAngleStart(arg1);
  *(Effekseer::random_float **)&jresult = new Effekseer::random_float((const Effekseer::random_float &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setCircleAngleStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float arg2 ;
  Effekseer::random_float *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_float **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_float");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setCircleAngleStart(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getCircleAngleEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getCircleAngleEnd(arg1);
  *(Effekseer::random_float **)&jresult = new Effekseer::random_float((const Effekseer::random_float &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setCircleAngleEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float arg2 ;
  Effekseer::random_float *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_float **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_float");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setCircleAngleEnd(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getCircleType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ParameterGenerationLocation::eCircleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (Effekseer::ParameterGenerationLocation::eCircleType)Effekseer_ParameterGenerationLocation_getCircleType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setCircleType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ParameterGenerationLocation::eCircleType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (Effekseer::ParameterGenerationLocation::eCircleType)jarg2; 
  Effekseer_ParameterGenerationLocation_setCircleType(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getCircleAxisDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ParameterGenerationLocation::AxisType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (Effekseer::ParameterGenerationLocation::AxisType)Effekseer_ParameterGenerationLocation_getCircleAxisDirection(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setCircleAxisDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ParameterGenerationLocation::AxisType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (Effekseer::ParameterGenerationLocation::AxisType)jarg2; 
  Effekseer_ParameterGenerationLocation_setCircleAxisDirection(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getCircleAngleNoise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getCircleAngleNoise(arg1);
  *(Effekseer::random_float **)&jresult = new Effekseer::random_float((const Effekseer::random_float &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setCircleAngleNoise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float arg2 ;
  Effekseer::random_float *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_float **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_float");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setCircleAngleNoise(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getLineDivision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (int32_t)Effekseer_ParameterGenerationLocation_getLineDivision(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setLineDivision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  Effekseer_ParameterGenerationLocation_setLineDivision(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getLinePositionStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_vector3d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getLinePositionStart(arg1);
  *(Effekseer::random_vector3d **)&jresult = new Effekseer::random_vector3d((const Effekseer::random_vector3d &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setLinePositionStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_vector3d arg2 ;
  Effekseer::random_vector3d *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_vector3d");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setLinePositionStart(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getLinePositionEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_vector3d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getLinePositionEnd(arg1);
  *(Effekseer::random_vector3d **)&jresult = new Effekseer::random_vector3d((const Effekseer::random_vector3d &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setLinePositionEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_vector3d arg2 ;
  Effekseer::random_vector3d *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_vector3d **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_vector3d");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setLinePositionEnd(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getLinePositionNoise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = Effekseer_ParameterGenerationLocation_getLinePositionNoise(arg1);
  *(Effekseer::random_float **)&jresult = new Effekseer::random_float((const Effekseer::random_float &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setLinePositionNoise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::random_float arg2 ;
  Effekseer::random_float *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  argp2 = *(Effekseer::random_float **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_float");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_ParameterGenerationLocation_setLinePositionNoise(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1getLineType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ParameterGenerationLocation::LineType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  result = (Effekseer::ParameterGenerationLocation::LineType)Effekseer_ParameterGenerationLocation_getLineType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterGenerationLocation_1setLineType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  Effekseer::ParameterGenerationLocation::LineType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  arg2 = (Effekseer::ParameterGenerationLocation::LineType)jarg2; 
  Effekseer_ParameterGenerationLocation_setLineType(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterGenerationLocation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterGenerationLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterGenerationLocation *)new Effekseer::ParameterGenerationLocation();
  *(Effekseer::ParameterGenerationLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterGenerationLocation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterGenerationLocation *arg1 = (Effekseer::ParameterGenerationLocation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterGenerationLocation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataType)Effekseer::None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Fixed2D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataType)Effekseer::Fixed2D;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Random2D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataType)Effekseer::Random2D;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Easing2D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataType)Effekseer::Easing2D;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurve2D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataType)Effekseer::FCurve2D;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_Fixed4D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataType)Effekseer::Fixed4D;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_FCurveColor_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataType)Effekseer::FCurveColor;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicInput_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataType)Effekseer::DynamicInput;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataFixed_1Values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomDataFixed *arg1 = (Effekseer::ParameterCustomDataFixed *) 0 ;
  Effekseer::vector2d *arg2 = (Effekseer::vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomDataFixed **)&jarg1; 
  arg2 = *(Effekseer::vector2d **)&jarg2; 
  if (arg1) (arg1)->Values = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataFixed_1Values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataFixed *arg1 = (Effekseer::ParameterCustomDataFixed *) 0 ;
  Effekseer::vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomDataFixed **)&jarg1; 
  result = (Effekseer::vector2d *)& ((arg1)->Values);
  *(Effekseer::vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterCustomDataFixed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataFixed *)new Effekseer::ParameterCustomDataFixed();
  *(Effekseer::ParameterCustomDataFixed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterCustomDataFixed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterCustomDataFixed *arg1 = (Effekseer::ParameterCustomDataFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterCustomDataFixed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataRandom_1Values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomDataRandom *arg1 = (Effekseer::ParameterCustomDataRandom *) 0 ;
  Effekseer::random_vector2d *arg2 = (Effekseer::random_vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomDataRandom **)&jarg1; 
  arg2 = *(Effekseer::random_vector2d **)&jarg2; 
  if (arg1) (arg1)->Values = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataRandom_1Values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataRandom *arg1 = (Effekseer::ParameterCustomDataRandom *) 0 ;
  Effekseer::random_vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomDataRandom **)&jarg1; 
  result = (Effekseer::random_vector2d *)& ((arg1)->Values);
  *(Effekseer::random_vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterCustomDataRandom(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataRandom *)new Effekseer::ParameterCustomDataRandom();
  *(Effekseer::ParameterCustomDataRandom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterCustomDataRandom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterCustomDataRandom *arg1 = (Effekseer::ParameterCustomDataRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterCustomDataRandom **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataEasing_1Values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomDataEasing *arg1 = (Effekseer::ParameterCustomDataEasing *) 0 ;
  Effekseer::easing_vector2d *arg2 = (Effekseer::easing_vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomDataEasing **)&jarg1; 
  arg2 = *(Effekseer::easing_vector2d **)&jarg2; 
  if (arg1) (arg1)->Values = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataEasing_1Values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataEasing *arg1 = (Effekseer::ParameterCustomDataEasing *) 0 ;
  Effekseer::easing_vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomDataEasing **)&jarg1; 
  result = (Effekseer::easing_vector2d *)& ((arg1)->Values);
  *(Effekseer::easing_vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterCustomDataEasing(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataEasing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataEasing *)new Effekseer::ParameterCustomDataEasing();
  *(Effekseer::ParameterCustomDataEasing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterCustomDataEasing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterCustomDataEasing *arg1 = (Effekseer::ParameterCustomDataEasing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterCustomDataEasing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataFCurve_1Values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomDataFCurve *arg1 = (Effekseer::ParameterCustomDataFCurve *) 0 ;
  Effekseer::FCurveVector2D *arg2 = (Effekseer::FCurveVector2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomDataFCurve **)&jarg1; 
  arg2 = *(Effekseer::FCurveVector2D **)&jarg2; 
  if (arg1) (arg1)->Values = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataFCurve_1Values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataFCurve *arg1 = (Effekseer::ParameterCustomDataFCurve *) 0 ;
  Effekseer::FCurveVector2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomDataFCurve **)&jarg1; 
  result = (Effekseer::FCurveVector2D *) ((arg1)->Values);
  *(Effekseer::FCurveVector2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterCustomDataFCurve(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataFCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataFCurve *)new Effekseer::ParameterCustomDataFCurve();
  *(Effekseer::ParameterCustomDataFCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterCustomDataFCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterCustomDataFCurve *arg1 = (Effekseer::ParameterCustomDataFCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterCustomDataFCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataFCurveColor_1Values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomDataFCurveColor *arg1 = (Effekseer::ParameterCustomDataFCurveColor *) 0 ;
  Effekseer::FCurveVectorColor *arg2 = (Effekseer::FCurveVectorColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomDataFCurveColor **)&jarg1; 
  arg2 = *(Effekseer::FCurveVectorColor **)&jarg2; 
  if (arg1) (arg1)->Values = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomDataFCurveColor_1Values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataFCurveColor *arg1 = (Effekseer::ParameterCustomDataFCurveColor *) 0 ;
  Effekseer::FCurveVectorColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomDataFCurveColor **)&jarg1; 
  result = (Effekseer::FCurveVectorColor *) ((arg1)->Values);
  *(Effekseer::FCurveVectorColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterCustomDataFCurveColor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomDataFCurveColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomDataFCurveColor *)new Effekseer::ParameterCustomDataFCurveColor();
  *(Effekseer::ParameterCustomDataFCurveColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterCustomDataFCurveColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterCustomDataFCurveColor *arg1 = (Effekseer::ParameterCustomDataFCurveColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterCustomDataFCurveColor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  arg2 = (Effekseer::ParameterCustomDataType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  result = (Effekseer::ParameterCustomDataType) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Fixed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataFixed *arg2 = (Effekseer::ParameterCustomDataFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  arg2 = *(Effekseer::ParameterCustomDataFixed **)&jarg2; 
  if (arg1) (arg1)->Fixed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Fixed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  result = (Effekseer::ParameterCustomDataFixed *)& ((arg1)->Fixed);
  *(Effekseer::ParameterCustomDataFixed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Random_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataRandom *arg2 = (Effekseer::ParameterCustomDataRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  arg2 = *(Effekseer::ParameterCustomDataRandom **)&jarg2; 
  if (arg1) (arg1)->Random = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Random_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  result = (Effekseer::ParameterCustomDataRandom *)& ((arg1)->Random);
  *(Effekseer::ParameterCustomDataRandom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Easing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataEasing *arg2 = (Effekseer::ParameterCustomDataEasing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  arg2 = *(Effekseer::ParameterCustomDataEasing **)&jarg2; 
  if (arg1) (arg1)->Easing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Easing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataEasing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  result = (Effekseer::ParameterCustomDataEasing *)& ((arg1)->Easing);
  *(Effekseer::ParameterCustomDataEasing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1FCurve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataFCurve *arg2 = (Effekseer::ParameterCustomDataFCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  arg2 = *(Effekseer::ParameterCustomDataFCurve **)&jarg2; 
  if (arg1) (arg1)->FCurve = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1FCurve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataFCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  result = (Effekseer::ParameterCustomDataFCurve *)& ((arg1)->FCurve);
  *(Effekseer::ParameterCustomDataFCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Fixed4D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  std::array< float,4 > *arg2 = (std::array< float,4 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  arg2 = *(std::array< float,4 > **)&jarg2; 
  if (arg1) (arg1)->Fixed4D = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1Fixed4D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  std::array< float,4 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  result = (std::array< float,4 > *)& ((arg1)->Fixed4D);
  *(std::array< float,4 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1FCurveColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataFCurveColor *arg2 = (Effekseer::ParameterCustomDataFCurveColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  arg2 = *(Effekseer::ParameterCustomDataFCurveColor **)&jarg2; 
  if (arg1) (arg1)->FCurveColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterCustomData_1FCurveColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  Effekseer::ParameterCustomDataFCurveColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  result = (Effekseer::ParameterCustomDataFCurveColor *)& ((arg1)->FCurveColor);
  *(Effekseer::ParameterCustomDataFCurveColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterCustomData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterCustomData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterCustomData *)new Effekseer::ParameterCustomData();
  *(Effekseer::ParameterCustomData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterCustomData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterCustomData *arg1 = (Effekseer::ParameterCustomData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterCustomData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UVParameterNum_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::UVParameterNum;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1MaterialType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::RendererMaterialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (Effekseer::RendererMaterialType)jarg2; 
  if (arg1) (arg1)->MaterialType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1MaterialType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::RendererMaterialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (Effekseer::RendererMaterialType) ((arg1)->MaterialType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1ColorTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->ColorTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1ColorTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int32_t) ((arg1)->ColorTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1Texture2Index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Texture2Index = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1Texture2Index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int32_t) ((arg1)->Texture2Index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1AlphaTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->AlphaTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1AlphaTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int32_t) ((arg1)->AlphaTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UVDistortionTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->UVDistortionTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UVDistortionTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int32_t) ((arg1)->UVDistortionTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BlendTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->BlendTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BlendTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int32_t) ((arg1)->BlendTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BlendAlphaTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->BlendAlphaTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BlendAlphaTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int32_t) ((arg1)->BlendAlphaTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BlendUVDistortionTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->BlendUVDistortionTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BlendUVDistortionTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int32_t) ((arg1)->BlendUVDistortionTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1MaterialData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::MaterialRenderData *arg2 = (Effekseer::MaterialRenderData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = *(Effekseer::MaterialRenderData **)&jarg2; 
  if (arg1) (arg1)->MaterialData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1MaterialData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::MaterialRenderData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (Effekseer::MaterialRenderData *)& ((arg1)->MaterialData);
  *(Effekseer::MaterialRenderData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1AlphaBlend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::AlphaBlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (Effekseer::AlphaBlendType)jarg2; 
  if (arg1) (arg1)->AlphaBlend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1AlphaBlend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (Effekseer::AlphaBlendType) ((arg1)->AlphaBlend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FilterTypes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  std::array< Effekseer::TextureFilterType,8 > *arg2 = (std::array< Effekseer::TextureFilterType,8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = *(std::array< Effekseer::TextureFilterType,8 > **)&jarg2; 
  if (arg1) (arg1)->FilterTypes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FilterTypes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  std::array< Effekseer::TextureFilterType,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (std::array< Effekseer::TextureFilterType,8 > *)& ((arg1)->FilterTypes);
  *(std::array< Effekseer::TextureFilterType,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1WrapTypes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  std::array< Effekseer::TextureWrapType,8 > *arg2 = (std::array< Effekseer::TextureWrapType,8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = *(std::array< Effekseer::TextureWrapType,8 > **)&jarg2; 
  if (arg1) (arg1)->WrapTypes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1WrapTypes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  std::array< Effekseer::TextureWrapType,8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (std::array< Effekseer::TextureWrapType,8 > *)& ((arg1)->WrapTypes);
  *(std::array< Effekseer::TextureWrapType,8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UVDistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->UVDistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UVDistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (float) ((arg1)->UVDistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1TextureBlendType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TextureBlendType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1TextureBlendType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int32_t) ((arg1)->TextureBlendType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BlendUVDistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->BlendUVDistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BlendUVDistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (float) ((arg1)->BlendUVDistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1EmissiveScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EmissiveScaling = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1EmissiveScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (float) ((arg1)->EmissiveScaling);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1ZWrite_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ZWrite = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1ZWrite_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (bool) ((arg1)->ZWrite);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1ZTest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ZTest = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1ZTest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (bool) ((arg1)->ZTest);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1Distortion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Distortion = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1Distortion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (bool) ((arg1)->Distortion);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1DistortionIntensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DistortionIntensity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1DistortionIntensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (float) ((arg1)->DistortionIntensity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1ColorBindType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::BindType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (Effekseer::BindType)jarg2; 
  if (arg1) (arg1)->ColorBindType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1ColorBindType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::BindType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (Effekseer::BindType) ((arg1)->ColorBindType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BasicParameter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::NodeRendererBasicParameter *arg2 = (Effekseer::NodeRendererBasicParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = *(Effekseer::NodeRendererBasicParameter **)&jarg2; 
  if (arg1) (arg1)->BasicParameter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1BasicParameter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::NodeRendererBasicParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (Effekseer::NodeRendererBasicParameter *)& ((arg1)->BasicParameter);
  *(Effekseer::NodeRendererBasicParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1CustomData1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::ParameterCustomData *arg2 = (Effekseer::ParameterCustomData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = *(Effekseer::ParameterCustomData **)&jarg2; 
  if (arg1) (arg1)->CustomData1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1CustomData1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::ParameterCustomData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (Effekseer::ParameterCustomData *)& ((arg1)->CustomData1);
  *(Effekseer::ParameterCustomData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1CustomData2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::ParameterCustomData *arg2 = (Effekseer::ParameterCustomData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = *(Effekseer::ParameterCustomData **)&jarg2; 
  if (arg1) (arg1)->CustomData2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1CustomData2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  Effekseer::ParameterCustomData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (Effekseer::ParameterCustomData *)& ((arg1)->CustomData2);
  *(Effekseer::ParameterCustomData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FADEIN_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::FADEIN_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FADEIN_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::FADEIN_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FADEIN_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::FADEIN_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FadeInType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->FadeInType)) *(int*)(void*)&((arg1)->FadeInType) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FadeInType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int) ((arg1)->FadeInType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FADEOUT_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::FADEOUT_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FADEOUT_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::FADEOUT_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FADEOUT_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::FADEOUT_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FadeOutType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->FadeOutType)) *(int*)(void*)&((arg1)->FadeOutType) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1FadeOutType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  result = (int) ((arg1)->FadeOutType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UV_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::UV_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UV_1FIXED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::UV_FIXED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UV_1ANIMATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::UV_ANIMATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UV_1SCROLL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::UV_SCROLL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UV_1FCURVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::UV_FCURVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1UV_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::ParameterRendererCommon::UV_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterRendererCommon(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterRendererCommon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterRendererCommon *)new Effekseer::ParameterRendererCommon();
  *(Effekseer::ParameterRendererCommon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterRendererCommon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1getUVTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Effekseer_ParameterRendererCommon_getUVTypes(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterRendererCommon_1setUVTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Effekseer::ParameterRendererCommon *arg1 = (Effekseer::ParameterRendererCommon *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterRendererCommon **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Effekseer_ParameterRendererCommon_setUVTypes(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1FPI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterAlphaCutoff::EType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterAlphaCutoff::EType)Effekseer::ParameterAlphaCutoff::FPI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  enum Effekseer::ParameterAlphaCutoff::EType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  arg2 = (enum Effekseer::ParameterAlphaCutoff::EType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  enum Effekseer::ParameterAlphaCutoff::EType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  result = (enum Effekseer::ParameterAlphaCutoff::EType) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1Easing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  Effekseer::ParameterEasingFloat *arg2 = (Effekseer::ParameterEasingFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  arg2 = *(Effekseer::ParameterEasingFloat **)&jarg2; 
  if (arg1) (arg1)->Easing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1Easing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  Effekseer::ParameterEasingFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  result = (Effekseer::ParameterEasingFloat *)& ((arg1)->Easing);
  *(Effekseer::ParameterEasingFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1EdgeThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EdgeThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1EdgeThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  result = (float) ((arg1)->EdgeThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1EdgeColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  Effekseer::Color *arg2 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  arg2 = *(Effekseer::Color **)&jarg2; 
  if (arg1) (arg1)->EdgeColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1EdgeColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  result = (Effekseer::Color *)& ((arg1)->EdgeColor);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1EdgeColorScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EdgeColorScaling = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterAlphaCutoff_1EdgeColorScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  result = (float) ((arg1)->EdgeColorScaling);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterAlphaCutoff(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterAlphaCutoff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterAlphaCutoff *)new Effekseer::ParameterAlphaCutoff();
  *(Effekseer::ParameterAlphaCutoff **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterAlphaCutoff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterAlphaCutoff *arg1 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterAlphaCutoff **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSoundType_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterSoundType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterSoundType)Effekseer::ParameterSoundType_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSoundType_1Use_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterSoundType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterSoundType)Effekseer::ParameterSoundType_Use;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSoundType_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterSoundType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterSoundType)Effekseer::ParameterSoundType_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSoundPanType_12D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterSoundPanType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterSoundPanType)Effekseer::ParameterSoundPanType_2D;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSoundPanType_13D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterSoundPanType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterSoundPanType)Effekseer::ParameterSoundPanType_3D;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSoundPanType_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::ParameterSoundPanType result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterSoundPanType)Effekseer::ParameterSoundPanType_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1WaveId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->WaveId = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1WaveId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  result = (int32_t) ((arg1)->WaveId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->Volume = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->Volume);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Pitch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->Pitch = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Pitch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->Pitch);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1PanType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::ParameterSoundPanType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  arg2 = (Effekseer::ParameterSoundPanType)jarg2; 
  if (arg1) (arg1)->PanType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1PanType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::ParameterSoundPanType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  result = (Effekseer::ParameterSoundPanType) ((arg1)->PanType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Pan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->Pan = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Pan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->Pan);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Distance = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  result = (float) ((arg1)->Distance);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::random_int *arg2 = (Effekseer::random_int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  arg2 = *(Effekseer::random_int **)&jarg2; 
  if (arg1) (arg1)->Delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_ParameterSound_1Delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  Effekseer::random_int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  result = (Effekseer::random_int *)& ((arg1)->Delay);
  *(Effekseer::random_int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1ParameterSound(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::ParameterSound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::ParameterSound *)new Effekseer::ParameterSound();
  *(Effekseer::ParameterSound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1ParameterSound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::ParameterSound *arg1 = (Effekseer::ParameterSound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::ParameterSound **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1Tra_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *arg2 = (std::array< float,3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  arg2 = *(std::array< float,3 > **)&jarg2; 
  if (arg1) (arg1)->Tra = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1Tra_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  result = (std::array< float,3 > *)& ((arg1)->Tra);
  *(std::array< float,3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1TraInv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *arg2 = (std::array< float,3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  arg2 = *(std::array< float,3 > **)&jarg2; 
  if (arg1) (arg1)->TraInv = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1TraInv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  result = (std::array< float,3 > *)& ((arg1)->TraInv);
  *(std::array< float,3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1Rot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *arg2 = (std::array< float,3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  arg2 = *(std::array< float,3 > **)&jarg2; 
  if (arg1) (arg1)->Rot = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1Rot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  result = (std::array< float,3 > *)& ((arg1)->Rot);
  *(std::array< float,3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1RotInv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *arg2 = (std::array< float,3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  arg2 = *(std::array< float,3 > **)&jarg2; 
  if (arg1) (arg1)->RotInv = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1RotInv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  result = (std::array< float,3 > *)& ((arg1)->RotInv);
  *(std::array< float,3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1Scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *arg2 = (std::array< float,3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  arg2 = *(std::array< float,3 > **)&jarg2; 
  if (arg1) (arg1)->Scale = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1Scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  result = (std::array< float,3 > *)& ((arg1)->Scale);
  *(std::array< float,3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1ScaleInv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *arg2 = (std::array< float,3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  arg2 = *(std::array< float,3 > **)&jarg2; 
  if (arg1) (arg1)->ScaleInv = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_DynamicFactorParameter_1ScaleInv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  std::array< float,3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  result = (std::array< float,3 > *)& ((arg1)->ScaleInv);
  *(std::array< float,3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1DynamicFactorParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::DynamicFactorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::DynamicFactorParameter *)new Effekseer::DynamicFactorParameter();
  *(Effekseer::DynamicFactorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1DynamicFactorParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::DynamicFactorParameter *arg1 = (Effekseer::DynamicFactorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::DynamicFactorParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RenderingOrder_1FirstCreatedInstanceIsFirst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eRenderingOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eRenderingOrder)Effekseer::RenderingOrder_FirstCreatedInstanceIsFirst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RenderingOrder_1FirstCreatedInstanceIsLast_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eRenderingOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eRenderingOrder)Effekseer::RenderingOrder_FirstCreatedInstanceIsLast;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RenderingOrder_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Effekseer::eRenderingOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::eRenderingOrder)Effekseer::RenderingOrder_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1IsRendered_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsRendered = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1IsRendered_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (bool) ((arg1)->IsRendered);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1CommonValues_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterCommonValues *arg2 = (Effekseer::ParameterCommonValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterCommonValues **)&jarg2; 
  if (arg1) (arg1)->CommonValues = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1CommonValues_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterCommonValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterCommonValues *)& ((arg1)->CommonValues);
  *(Effekseer::ParameterCommonValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1SteeringBehaviorParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::SteeringBehaviorParameter *arg2 = (Effekseer::SteeringBehaviorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::SteeringBehaviorParameter **)&jarg2; 
  if (arg1) (arg1)->SteeringBehaviorParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1SteeringBehaviorParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::SteeringBehaviorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::SteeringBehaviorParameter *)& ((arg1)->SteeringBehaviorParam);
  *(Effekseer::SteeringBehaviorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = (Effekseer::ParameterTranslationType)jarg2; 
  if (arg1) (arg1)->TranslationType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterTranslationType) ((arg1)->TranslationType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationFixed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationFixed *arg2 = (Effekseer::ParameterTranslationFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterTranslationFixed **)&jarg2; 
  if (arg1) (arg1)->TranslationFixed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationFixed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterTranslationFixed *)& ((arg1)->TranslationFixed);
  *(Effekseer::ParameterTranslationFixed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationPVA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationPVA *arg2 = (Effekseer::ParameterTranslationPVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterTranslationPVA **)&jarg2; 
  if (arg1) (arg1)->TranslationPVA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationPVA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationPVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterTranslationPVA *)& ((arg1)->TranslationPVA);
  *(Effekseer::ParameterTranslationPVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationEasing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterEasingSIMDVec3 *arg2 = (Effekseer::ParameterEasingSIMDVec3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterEasingSIMDVec3 **)&jarg2; 
  if (arg1) (arg1)->TranslationEasing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationEasing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterEasingSIMDVec3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterEasingSIMDVec3 *)& ((arg1)->TranslationEasing);
  *(Effekseer::ParameterEasingSIMDVec3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationFCurve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FCurveVector3D *arg2 = (Effekseer::FCurveVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::FCurveVector3D **)&jarg2; 
  if (arg1) (arg1)->TranslationFCurve = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationFCurve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FCurveVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::FCurveVector3D *) ((arg1)->TranslationFCurve);
  *(Effekseer::FCurveVector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationNurbsCurve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationNurbsCurve *arg2 = (Effekseer::ParameterTranslationNurbsCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterTranslationNurbsCurve **)&jarg2; 
  if (arg1) (arg1)->TranslationNurbsCurve = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationNurbsCurve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationNurbsCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterTranslationNurbsCurve *)& ((arg1)->TranslationNurbsCurve);
  *(Effekseer::ParameterTranslationNurbsCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationViewOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationViewOffset *arg2 = (Effekseer::ParameterTranslationViewOffset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterTranslationViewOffset **)&jarg2; 
  if (arg1) (arg1)->TranslationViewOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1TranslationViewOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterTranslationViewOffset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterTranslationViewOffset *)& ((arg1)->TranslationViewOffset);
  *(Effekseer::ParameterTranslationViewOffset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = (Effekseer::ParameterRotationType)jarg2; 
  if (arg1) (arg1)->RotationType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterRotationType) ((arg1)->RotationType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationFixed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationFixed *arg2 = (Effekseer::ParameterRotationFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterRotationFixed **)&jarg2; 
  if (arg1) (arg1)->RotationFixed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationFixed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterRotationFixed *)& ((arg1)->RotationFixed);
  *(Effekseer::ParameterRotationFixed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationPVA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationPVA *arg2 = (Effekseer::ParameterRotationPVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterRotationPVA **)&jarg2; 
  if (arg1) (arg1)->RotationPVA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationPVA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationPVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterRotationPVA *)& ((arg1)->RotationPVA);
  *(Effekseer::ParameterRotationPVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationEasing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterEasingSIMDVec3 *arg2 = (Effekseer::ParameterEasingSIMDVec3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterEasingSIMDVec3 **)&jarg2; 
  if (arg1) (arg1)->RotationEasing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationEasing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterEasingSIMDVec3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterEasingSIMDVec3 *)& ((arg1)->RotationEasing);
  *(Effekseer::ParameterEasingSIMDVec3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationFCurve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FCurveVector3D *arg2 = (Effekseer::FCurveVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::FCurveVector3D **)&jarg2; 
  if (arg1) (arg1)->RotationFCurve = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationFCurve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FCurveVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::FCurveVector3D *) ((arg1)->RotationFCurve);
  *(Effekseer::FCurveVector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationAxisPVA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationAxisPVA *arg2 = (Effekseer::ParameterRotationAxisPVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterRotationAxisPVA **)&jarg2; 
  if (arg1) (arg1)->RotationAxisPVA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationAxisPVA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationAxisPVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterRotationAxisPVA *)& ((arg1)->RotationAxisPVA);
  *(Effekseer::ParameterRotationAxisPVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationAxisEasing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationAxisEasing *arg2 = (Effekseer::ParameterRotationAxisEasing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterRotationAxisEasing **)&jarg2; 
  if (arg1) (arg1)->RotationAxisEasing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RotationAxisEasing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRotationAxisEasing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterRotationAxisEasing *)& ((arg1)->RotationAxisEasing);
  *(Effekseer::ParameterRotationAxisEasing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterScalingType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = (Effekseer::ParameterScalingType)jarg2; 
  if (arg1) (arg1)->ScalingType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterScalingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterScalingType) ((arg1)->ScalingType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingFixed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterScalingFixed *arg2 = (Effekseer::ParameterScalingFixed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterScalingFixed **)&jarg2; 
  if (arg1) (arg1)->ScalingFixed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingFixed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterScalingFixed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterScalingFixed *)& ((arg1)->ScalingFixed);
  *(Effekseer::ParameterScalingFixed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingPVA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterScalingPVA *arg2 = (Effekseer::ParameterScalingPVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterScalingPVA **)&jarg2; 
  if (arg1) (arg1)->ScalingPVA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingPVA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterScalingPVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterScalingPVA *)& ((arg1)->ScalingPVA);
  *(Effekseer::ParameterScalingPVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingEasing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterEasingSIMDVec3 *arg2 = (Effekseer::ParameterEasingSIMDVec3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterEasingSIMDVec3 **)&jarg2; 
  if (arg1) (arg1)->ScalingEasing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingEasing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterEasingSIMDVec3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterEasingSIMDVec3 *)& ((arg1)->ScalingEasing);
  *(Effekseer::ParameterEasingSIMDVec3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingSinglePVA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterScalingSinglePVA *arg2 = (Effekseer::ParameterScalingSinglePVA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterScalingSinglePVA **)&jarg2; 
  if (arg1) (arg1)->ScalingSinglePVA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingSinglePVA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterScalingSinglePVA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterScalingSinglePVA *)& ((arg1)->ScalingSinglePVA);
  *(Effekseer::ParameterScalingSinglePVA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingSingleEasing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterEasingFloat *arg2 = (Effekseer::ParameterEasingFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterEasingFloat **)&jarg2; 
  if (arg1) (arg1)->ScalingSingleEasing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingSingleEasing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterEasingFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterEasingFloat *)& ((arg1)->ScalingSingleEasing);
  *(Effekseer::ParameterEasingFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingFCurve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FCurveVector3D *arg2 = (Effekseer::FCurveVector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::FCurveVector3D **)&jarg2; 
  if (arg1) (arg1)->ScalingFCurve = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingFCurve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FCurveVector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::FCurveVector3D *) ((arg1)->ScalingFCurve);
  *(Effekseer::FCurveVector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingSingleFCurve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FCurveScalar *arg2 = (Effekseer::FCurveScalar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::FCurveScalar **)&jarg2; 
  if (arg1) (arg1)->ScalingSingleFCurve = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1ScalingSingleFCurve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FCurveScalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::FCurveScalar *) ((arg1)->ScalingSingleFCurve);
  *(Effekseer::FCurveScalar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1GenerationLocation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterGenerationLocation *arg2 = (Effekseer::ParameterGenerationLocation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterGenerationLocation **)&jarg2; 
  if (arg1) (arg1)->GenerationLocation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1GenerationLocation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterGenerationLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterGenerationLocation *)& ((arg1)->GenerationLocation);
  *(Effekseer::ParameterGenerationLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1DepthValues_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterDepthValues *arg2 = (Effekseer::ParameterDepthValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterDepthValues **)&jarg2; 
  if (arg1) (arg1)->DepthValues = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1DepthValues_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterDepthValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterDepthValues *)& ((arg1)->DepthValues);
  *(Effekseer::ParameterDepthValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RendererCommon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRendererCommon *arg2 = (Effekseer::ParameterRendererCommon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterRendererCommon **)&jarg2; 
  if (arg1) (arg1)->RendererCommon = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RendererCommon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterRendererCommon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterRendererCommon *)& ((arg1)->RendererCommon);
  *(Effekseer::ParameterRendererCommon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1AlphaCutoff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterAlphaCutoff *arg2 = (Effekseer::ParameterAlphaCutoff *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterAlphaCutoff **)&jarg2; 
  if (arg1) (arg1)->AlphaCutoff = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1AlphaCutoff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterAlphaCutoff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterAlphaCutoff *)& ((arg1)->AlphaCutoff);
  *(Effekseer::ParameterAlphaCutoff **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1EnableFalloff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EnableFalloff = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1EnableFalloff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (bool) ((arg1)->EnableFalloff);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1FalloffParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FalloffParameter *arg2 = (Effekseer::FalloffParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::FalloffParameter **)&jarg2; 
  if (arg1) (arg1)->FalloffParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1FalloffParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::FalloffParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::FalloffParameter *)& ((arg1)->FalloffParam);
  *(Effekseer::FalloffParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1SoundType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterSoundType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = (Effekseer::ParameterSoundType)jarg2; 
  if (arg1) (arg1)->SoundType = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1SoundType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterSoundType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterSoundType) ((arg1)->SoundType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1Sound_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterSound *arg2 = (Effekseer::ParameterSound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::ParameterSound **)&jarg2; 
  if (arg1) (arg1)->Sound = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1Sound_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::ParameterSound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::ParameterSound *)& ((arg1)->Sound);
  *(Effekseer::ParameterSound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RenderingOrder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::eRenderingOrder arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = (Effekseer::eRenderingOrder)jarg2; 
  if (arg1) (arg1)->RenderingOrder = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RenderingOrder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::eRenderingOrder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::eRenderingOrder) ((arg1)->RenderingOrder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RenderingPriority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->RenderingPriority = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1RenderingPriority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (int32_t) ((arg1)->RenderingPriority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1DynamicFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::DynamicFactorParameter *arg2 = (Effekseer::DynamicFactorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  arg2 = *(Effekseer::DynamicFactorParameter **)&jarg2; 
  if (arg1) (arg1)->DynamicFactor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1DynamicFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::DynamicFactorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::DynamicFactorParameter *)& ((arg1)->DynamicFactor);
  *(Effekseer::DynamicFactorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeImplemented *arg1 = (Effekseer::EffectNodeImplemented *) 0 ;
  Effekseer::eEffectNodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeImplemented **)&jarg1; 
  result = (Effekseer::eEffectNodeType)((Effekseer::EffectNodeImplemented const *)arg1)->GetType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectNodeRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Effekseer::Effect *arg1 = (Effekseer::Effect *) 0 ;
  unsigned char **arg2 = 0 ;
  Effekseer::EffectNodeRoot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Effect **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char *& reference is null");
    return 0;
  } 
  result = (Effekseer::EffectNodeRoot *)new Effekseer::EffectNodeRoot(arg1,*arg2);
  *(Effekseer::EffectNodeRoot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectNodeRoot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectNodeRoot *arg1 = (Effekseer::EffectNodeRoot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectNodeRoot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1Default_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::SpriteColorParameter::Default;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::SpriteColorParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::SpriteColorParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1getFixedLowerLeftColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  Effekseer::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  result = Effekseer_SpriteColorParameter_getFixedLowerLeftColor(arg1);
  *(Effekseer::Color **)&jresult = new Effekseer::Color((const Effekseer::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1setFixedLowerLeftColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  Effekseer::Color arg2 ;
  Effekseer::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  argp2 = *(Effekseer::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::Color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_SpriteColorParameter_setFixedLowerLeftColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1getFixedLowerRightColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  Effekseer::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  result = Effekseer_SpriteColorParameter_getFixedLowerRightColor(arg1);
  *(Effekseer::Color **)&jresult = new Effekseer::Color((const Effekseer::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1setFixedLowerRightColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  Effekseer::Color arg2 ;
  Effekseer::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  argp2 = *(Effekseer::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::Color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_SpriteColorParameter_setFixedLowerRightColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1getFixedUpperLeftColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  Effekseer::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  result = Effekseer_SpriteColorParameter_getFixedUpperLeftColor(arg1);
  *(Effekseer::Color **)&jresult = new Effekseer::Color((const Effekseer::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1setFixedUpperLeftColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  Effekseer::Color arg2 ;
  Effekseer::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  argp2 = *(Effekseer::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::Color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_SpriteColorParameter_setFixedUpperLeftColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1getFixedUpperRightColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  Effekseer::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  result = Effekseer_SpriteColorParameter_getFixedUpperRightColor(arg1);
  *(Effekseer::Color **)&jresult = new Effekseer::Color((const Effekseer::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpriteColorParameterCore_1setFixedUpperRightColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  Effekseer::Color arg2 ;
  Effekseer::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  argp2 = *(Effekseer::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::Color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_SpriteColorParameter_setFixedUpperRightColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SpriteColorParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SpriteColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SpriteColorParameter *)new Effekseer::SpriteColorParameter();
  *(Effekseer::SpriteColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1SpriteColorParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::SpriteColorParameter *arg1 = (Effekseer::SpriteColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::SpriteColorParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1Default_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::SpritePositionParameter::Default;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::SpritePositionParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::SpritePositionParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1getFixedLowerLeftPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  Effekseer::SIMD::Vec2f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  result = Effekseer_SpritePositionParameter_getFixedLowerLeftPos(arg1);
  *(Effekseer::SIMD::Vec2f **)&jresult = new Effekseer::SIMD::Vec2f((const Effekseer::SIMD::Vec2f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1setFixedLowerLeftPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  Effekseer::SIMD::Vec2f arg2 ;
  Effekseer::SIMD::Vec2f *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  argp2 = *(Effekseer::SIMD::Vec2f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::SIMD::Vec2f");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_SpritePositionParameter_setFixedLowerLeftPos(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1getFixedLowerRightPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  Effekseer::SIMD::Vec2f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  result = Effekseer_SpritePositionParameter_getFixedLowerRightPos(arg1);
  *(Effekseer::SIMD::Vec2f **)&jresult = new Effekseer::SIMD::Vec2f((const Effekseer::SIMD::Vec2f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1setFixedLowerRightPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  Effekseer::SIMD::Vec2f arg2 ;
  Effekseer::SIMD::Vec2f *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  argp2 = *(Effekseer::SIMD::Vec2f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::SIMD::Vec2f");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_SpritePositionParameter_setFixedLowerRightPos(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1getFixedUpperLeftPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  Effekseer::SIMD::Vec2f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  result = Effekseer_SpritePositionParameter_getFixedUpperLeftPos(arg1);
  *(Effekseer::SIMD::Vec2f **)&jresult = new Effekseer::SIMD::Vec2f((const Effekseer::SIMD::Vec2f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1setFixedUpperLeftPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  Effekseer::SIMD::Vec2f arg2 ;
  Effekseer::SIMD::Vec2f *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  argp2 = *(Effekseer::SIMD::Vec2f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::SIMD::Vec2f");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_SpritePositionParameter_setFixedUpperLeftPos(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1getFixedUpperRightPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  Effekseer::SIMD::Vec2f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  result = Effekseer_SpritePositionParameter_getFixedUpperRightPos(arg1);
  *(Effekseer::SIMD::Vec2f **)&jresult = new Effekseer::SIMD::Vec2f((const Effekseer::SIMD::Vec2f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_SpritePositionParameterCore_1setFixedUpperRightPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  Effekseer::SIMD::Vec2f arg2 ;
  Effekseer::SIMD::Vec2f *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  argp2 = *(Effekseer::SIMD::Vec2f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::SIMD::Vec2f");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_SpritePositionParameter_setFixedUpperRightPos(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1SpritePositionParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::SpritePositionParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::SpritePositionParameter *)new Effekseer::SpritePositionParameter();
  *(Effekseer::SpritePositionParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1SpritePositionParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::SpritePositionParameter *arg1 = (Effekseer::SpritePositionParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::SpritePositionParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1AlphaBlend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::AlphaBlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  arg2 = (Effekseer::AlphaBlendType)jarg2; 
  if (arg1) (arg1)->AlphaBlend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1AlphaBlend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  result = (Effekseer::AlphaBlendType) ((arg1)->AlphaBlend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1Billboard_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::BillboardType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  arg2 = (Effekseer::BillboardType)jarg2; 
  if (arg1) (arg1)->Billboard = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1Billboard_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::BillboardType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  result = (Effekseer::BillboardType) ((arg1)->Billboard);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SpriteAllColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::StandardColorParameter *arg2 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  arg2 = *(Effekseer::StandardColorParameter **)&jarg2; 
  if (arg1) (arg1)->SpriteAllColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SpriteAllColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  result = (Effekseer::StandardColorParameter *)& ((arg1)->SpriteAllColor);
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SpriteColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::SpriteColorParameter *arg2 = (Effekseer::SpriteColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  arg2 = *(Effekseer::SpriteColorParameter **)&jarg2; 
  if (arg1) (arg1)->SpriteColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SpriteColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::SpriteColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  result = (Effekseer::SpriteColorParameter *)& ((arg1)->SpriteColor);
  *(Effekseer::SpriteColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SpritePosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::SpritePositionParameter *arg2 = (Effekseer::SpritePositionParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  arg2 = *(Effekseer::SpritePositionParameter **)&jarg2; 
  if (arg1) (arg1)->SpritePosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SpritePosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  Effekseer::SpritePositionParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  result = (Effekseer::SpritePositionParameter *)& ((arg1)->SpritePosition);
  *(Effekseer::SpritePositionParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SpriteTexture_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpriteTexture = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SpriteTexture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  result = (int) ((arg1)->SpriteTexture);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectNodeSprite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Effekseer::Effect *arg1 = (Effekseer::Effect *) 0 ;
  unsigned char **arg2 = 0 ;
  Effekseer::EffectNodeSprite *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Effect **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char *& reference is null");
    return 0;
  } 
  result = (Effekseer::EffectNodeSprite *)new Effekseer::EffectNodeSprite(arg1,*arg2);
  *(Effekseer::EffectNodeSprite **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectNodeSprite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectNodeSprite *arg1 = (Effekseer::EffectNodeSprite *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectNodeSprite **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonAllColorParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1Random_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonAllColorParameter::Random;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1Easing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonAllColorParameter::Easing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonAllColorParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1getFixedAllColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  Effekseer::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  result = Effekseer_RibbonAllColorParameter_getFixedAllColor(arg1);
  *(Effekseer::Color **)&jresult = new Effekseer::Color((const Effekseer::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1setFixedAllColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  Effekseer::Color arg2 ;
  Effekseer::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  argp2 = *(Effekseer::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::Color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_RibbonAllColorParameter_setFixedAllColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1getRandomAllColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  Effekseer::random_color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  result = Effekseer_RibbonAllColorParameter_getRandomAllColor(arg1);
  *(Effekseer::random_color **)&jresult = new Effekseer::random_color((const Effekseer::random_color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1setRandomAllColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  Effekseer::random_color arg2 ;
  Effekseer::random_color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  argp2 = *(Effekseer::random_color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::random_color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_RibbonAllColorParameter_setRandomAllColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1getEasingAllColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  Effekseer::easing_color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  result = Effekseer_RibbonAllColorParameter_getEasingAllColor(arg1);
  *(Effekseer::easing_color **)&jresult = new Effekseer::easing_color((const Effekseer::easing_color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonAllColorParameterCore_1setEasingAllColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  Effekseer::easing_color arg2 ;
  Effekseer::easing_color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  argp2 = *(Effekseer::easing_color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::easing_color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_RibbonAllColorParameter_setEasingAllColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RibbonAllColorParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RibbonAllColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RibbonAllColorParameter *)new Effekseer::RibbonAllColorParameter();
  *(Effekseer::RibbonAllColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RibbonAllColorParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RibbonAllColorParameter *arg1 = (Effekseer::RibbonAllColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RibbonAllColorParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1Default_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonColorParameter::Default;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonColorParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonColorParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RibbonColorParameter *arg1 = (Effekseer::RibbonColorParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonColorParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RibbonColorParameter *arg1 = (Effekseer::RibbonColorParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonColorParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1getFixedLeftColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RibbonColorParameter *arg1 = (Effekseer::RibbonColorParameter *) 0 ;
  Effekseer::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonColorParameter **)&jarg1; 
  result = Effekseer_RibbonColorParameter_getFixedLeftColor(arg1);
  *(Effekseer::Color **)&jresult = new Effekseer::Color((const Effekseer::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1setFixedLeftColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RibbonColorParameter *arg1 = (Effekseer::RibbonColorParameter *) 0 ;
  Effekseer::Color arg2 ;
  Effekseer::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RibbonColorParameter **)&jarg1; 
  argp2 = *(Effekseer::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::Color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_RibbonColorParameter_setFixedLeftColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1getFixedRightColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RibbonColorParameter *arg1 = (Effekseer::RibbonColorParameter *) 0 ;
  Effekseer::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonColorParameter **)&jarg1; 
  result = Effekseer_RibbonColorParameter_getFixedRightColor(arg1);
  *(Effekseer::Color **)&jresult = new Effekseer::Color((const Effekseer::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonColorParameterCore_1setFixedRightColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RibbonColorParameter *arg1 = (Effekseer::RibbonColorParameter *) 0 ;
  Effekseer::Color arg2 ;
  Effekseer::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RibbonColorParameter **)&jarg1; 
  argp2 = *(Effekseer::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Effekseer::Color");
    return ;
  }
  arg2 = *argp2; 
  Effekseer_RibbonColorParameter_setFixedRightColor(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RibbonColorParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RibbonColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RibbonColorParameter *)new Effekseer::RibbonColorParameter();
  *(Effekseer::RibbonColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RibbonColorParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RibbonColorParameter *arg1 = (Effekseer::RibbonColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RibbonColorParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1Default_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonPositionParameter::Default;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonPositionParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RibbonPositionParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RibbonPositionParameter *arg1 = (Effekseer::RibbonPositionParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonPositionParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RibbonPositionParameter *arg1 = (Effekseer::RibbonPositionParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonPositionParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1getFixedLeftCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::RibbonPositionParameter *arg1 = (Effekseer::RibbonPositionParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonPositionParameter **)&jarg1; 
  result = (float)Effekseer_RibbonPositionParameter_getFixedLeftCoord(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1setFixedLeftCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::RibbonPositionParameter *arg1 = (Effekseer::RibbonPositionParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonPositionParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  Effekseer_RibbonPositionParameter_setFixedLeftCoord(arg1,arg2);
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1getFixedRightCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::RibbonPositionParameter *arg1 = (Effekseer::RibbonPositionParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonPositionParameter **)&jarg1; 
  result = (float)Effekseer_RibbonPositionParameter_getFixedRightCoord(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RibbonPositionParameterCore_1setFixedRightCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::RibbonPositionParameter *arg1 = (Effekseer::RibbonPositionParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RibbonPositionParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  Effekseer_RibbonPositionParameter_setFixedRightCoord(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RibbonPositionParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RibbonPositionParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RibbonPositionParameter *)new Effekseer::RibbonPositionParameter();
  *(Effekseer::RibbonPositionParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RibbonPositionParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RibbonPositionParameter *arg1 = (Effekseer::RibbonPositionParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RibbonPositionParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1m_1nodeParameter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonRenderer::NodeParameter *arg2 = (Effekseer::RibbonRenderer::NodeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = *(Effekseer::RibbonRenderer::NodeParameter **)&jarg2; 
  if (arg1) (arg1)->m_nodeParameter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1m_1nodeParameter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonRenderer::NodeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (Effekseer::RibbonRenderer::NodeParameter *)& ((arg1)->m_nodeParameter);
  *(Effekseer::RibbonRenderer::NodeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1m_1instanceParameter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonRenderer::InstanceParameter *arg2 = (Effekseer::RibbonRenderer::InstanceParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = *(Effekseer::RibbonRenderer::InstanceParameter **)&jarg2; 
  if (arg1) (arg1)->m_instanceParameter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1m_1instanceParameter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonRenderer::InstanceParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (Effekseer::RibbonRenderer::InstanceParameter *)& ((arg1)->m_instanceParameter);
  *(Effekseer::RibbonRenderer::InstanceParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1AlphaBlend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::AlphaBlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = (Effekseer::AlphaBlendType)jarg2; 
  if (arg1) (arg1)->AlphaBlend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1AlphaBlend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (Effekseer::AlphaBlendType) ((arg1)->AlphaBlend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1ViewpointDependent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ViewpointDependent = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1ViewpointDependent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (int) ((arg1)->ViewpointDependent);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1RibbonAllColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonAllColorParameter *arg2 = (Effekseer::RibbonAllColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = *(Effekseer::RibbonAllColorParameter **)&jarg2; 
  if (arg1) (arg1)->RibbonAllColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1RibbonAllColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonAllColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (Effekseer::RibbonAllColorParameter *)& ((arg1)->RibbonAllColor);
  *(Effekseer::RibbonAllColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1RibbonColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonColorParameter *arg2 = (Effekseer::RibbonColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = *(Effekseer::RibbonColorParameter **)&jarg2; 
  if (arg1) (arg1)->RibbonColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1RibbonColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (Effekseer::RibbonColorParameter *)& ((arg1)->RibbonColor);
  *(Effekseer::RibbonColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1RibbonPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonPositionParameter *arg2 = (Effekseer::RibbonPositionParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = *(Effekseer::RibbonPositionParameter **)&jarg2; 
  if (arg1) (arg1)->RibbonPosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1RibbonPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::RibbonPositionParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (Effekseer::RibbonPositionParameter *)& ((arg1)->RibbonPosition);
  *(Effekseer::RibbonPositionParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1RibbonTexture_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RibbonTexture = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1RibbonTexture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (int) ((arg1)->RibbonTexture);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1SplineDivision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->SplineDivision = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1SplineDivision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (int32_t) ((arg1)->SplineDivision);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1TextureUVType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *arg2 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  arg2 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg2; 
  if (arg1) (arg1)->TextureUVType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1TextureUVType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  result = (Effekseer::NodeRendererTextureUVTypeParameter *)& ((arg1)->TextureUVType);
  *(Effekseer::NodeRendererTextureUVTypeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectNodeRibbon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Effekseer::Effect *arg1 = (Effekseer::Effect *) 0 ;
  unsigned char **arg2 = 0 ;
  Effekseer::EffectNodeRibbon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Effect **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char *& reference is null");
    return 0;
  } 
  result = (Effekseer::EffectNodeRibbon *)new Effekseer::EffectNodeRibbon(arg1,*arg2);
  *(Effekseer::EffectNodeRibbon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectNodeRibbon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectNodeRibbon *arg1 = (Effekseer::EffectNodeRibbon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectNodeRibbon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TrackSizeParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::TrackSizeParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TrackSizeParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::TrackSizeParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TrackSizeParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::TrackSizeParameter *arg1 = (Effekseer::TrackSizeParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::TrackSizeParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TrackSizeParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::TrackSizeParameter *arg1 = (Effekseer::TrackSizeParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::TrackSizeParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TrackSizeParameterCore_1getFixedSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::TrackSizeParameter *arg1 = (Effekseer::TrackSizeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::TrackSizeParameter **)&jarg1; 
  result = (float)Effekseer_TrackSizeParameter_getFixedSize(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_TrackSizeParameterCore_1setFixedSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::TrackSizeParameter *arg1 = (Effekseer::TrackSizeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::TrackSizeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  Effekseer_TrackSizeParameter_setFixedSize(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1TrackSizeParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::TrackSizeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::TrackSizeParameter *)new Effekseer::TrackSizeParameter();
  *(Effekseer::TrackSizeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1TrackSizeParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::TrackSizeParameter *arg1 = (Effekseer::TrackSizeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::TrackSizeParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1m_1nodeParameter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackRenderer::NodeParameter *arg2 = (Effekseer::TrackRenderer::NodeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::TrackRenderer::NodeParameter **)&jarg2; 
  if (arg1) (arg1)->m_nodeParameter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1m_1nodeParameter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackRenderer::NodeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::TrackRenderer::NodeParameter *)& ((arg1)->m_nodeParameter);
  *(Effekseer::TrackRenderer::NodeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1m_1instanceParameter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackRenderer::InstanceParameter *arg2 = (Effekseer::TrackRenderer::InstanceParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::TrackRenderer::InstanceParameter **)&jarg2; 
  if (arg1) (arg1)->m_instanceParameter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1m_1instanceParameter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackRenderer::InstanceParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::TrackRenderer::InstanceParameter *)& ((arg1)->m_instanceParameter);
  *(Effekseer::TrackRenderer::InstanceParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1m_1currentGroupValues_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::EffectNodeTrack::InstanceGroupValues *arg2 = (Effekseer::EffectNodeTrack::InstanceGroupValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::EffectNodeTrack::InstanceGroupValues **)&jarg2; 
  if (arg1) (arg1)->m_currentGroupValues = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1m_1currentGroupValues_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::EffectNodeTrack::InstanceGroupValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::EffectNodeTrack::InstanceGroupValues *)& ((arg1)->m_currentGroupValues);
  *(Effekseer::EffectNodeTrack::InstanceGroupValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1AlphaBlend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::AlphaBlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = (Effekseer::AlphaBlendType)jarg2; 
  if (arg1) (arg1)->AlphaBlend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1AlphaBlend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::AlphaBlendType) ((arg1)->AlphaBlend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorLeft_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *arg2 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::StandardColorParameter **)&jarg2; 
  if (arg1) (arg1)->TrackColorLeft = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorLeft_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::StandardColorParameter *)& ((arg1)->TrackColorLeft);
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorCenter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *arg2 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::StandardColorParameter **)&jarg2; 
  if (arg1) (arg1)->TrackColorCenter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorCenter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::StandardColorParameter *)& ((arg1)->TrackColorCenter);
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorRight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *arg2 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::StandardColorParameter **)&jarg2; 
  if (arg1) (arg1)->TrackColorRight = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorRight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::StandardColorParameter *)& ((arg1)->TrackColorRight);
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorLeftMiddle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *arg2 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::StandardColorParameter **)&jarg2; 
  if (arg1) (arg1)->TrackColorLeftMiddle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorLeftMiddle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::StandardColorParameter *)& ((arg1)->TrackColorLeftMiddle);
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorCenterMiddle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *arg2 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::StandardColorParameter **)&jarg2; 
  if (arg1) (arg1)->TrackColorCenterMiddle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorCenterMiddle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::StandardColorParameter *)& ((arg1)->TrackColorCenterMiddle);
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorRightMiddle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *arg2 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::StandardColorParameter **)&jarg2; 
  if (arg1) (arg1)->TrackColorRightMiddle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackColorRightMiddle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::StandardColorParameter *)& ((arg1)->TrackColorRightMiddle);
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackSizeFor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackSizeParameter *arg2 = (Effekseer::TrackSizeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::TrackSizeParameter **)&jarg2; 
  if (arg1) (arg1)->TrackSizeFor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackSizeFor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackSizeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::TrackSizeParameter *)& ((arg1)->TrackSizeFor);
  *(Effekseer::TrackSizeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackSizeMiddle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackSizeParameter *arg2 = (Effekseer::TrackSizeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::TrackSizeParameter **)&jarg2; 
  if (arg1) (arg1)->TrackSizeMiddle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackSizeMiddle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackSizeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::TrackSizeParameter *)& ((arg1)->TrackSizeMiddle);
  *(Effekseer::TrackSizeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackSizeBack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackSizeParameter *arg2 = (Effekseer::TrackSizeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::TrackSizeParameter **)&jarg2; 
  if (arg1) (arg1)->TrackSizeBack = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackSizeBack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::TrackSizeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::TrackSizeParameter *)& ((arg1)->TrackSizeBack);
  *(Effekseer::TrackSizeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackTexture_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TrackTexture = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TrackTexture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (int) ((arg1)->TrackTexture);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1SplineDivision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->SplineDivision = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1SplineDivision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (int32_t) ((arg1)->SplineDivision);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TextureUVType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *arg2 = (Effekseer::NodeRendererTextureUVTypeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  arg2 = *(Effekseer::NodeRendererTextureUVTypeParameter **)&jarg2; 
  if (arg1) (arg1)->TextureUVType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1TextureUVType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  Effekseer::NodeRendererTextureUVTypeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  result = (Effekseer::NodeRendererTextureUVTypeParameter *)& ((arg1)->TextureUVType);
  *(Effekseer::NodeRendererTextureUVTypeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectNodeTrack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Effekseer::Effect *arg1 = (Effekseer::Effect *) 0 ;
  unsigned char **arg2 = 0 ;
  Effekseer::EffectNodeTrack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Effect **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char *& reference is null");
    return 0;
  } 
  result = (Effekseer::EffectNodeTrack *)new Effekseer::EffectNodeTrack(arg1,*arg2);
  *(Effekseer::EffectNodeTrack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectNodeTrack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectNodeTrack *arg1 = (Effekseer::EffectNodeTrack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectNodeTrack **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingSingleParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1Random_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingSingleParameter::Random;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1Easing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingSingleParameter::Easing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingSingleParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1fixed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fixed = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1fixed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  result = (float) ((arg1)->fixed);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1random_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  Effekseer::random_float *arg2 = (Effekseer::random_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  arg2 = *(Effekseer::random_float **)&jarg2; 
  if (arg1) (arg1)->random = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1random_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  Effekseer::random_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  result = (Effekseer::random_float *)& ((arg1)->random);
  *(Effekseer::random_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1easing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  Effekseer::ParameterEasingFloat *arg2 = (Effekseer::ParameterEasingFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  arg2 = *(Effekseer::ParameterEasingFloat **)&jarg2; 
  if (arg1) (arg1)->easing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleParameterCore_1easing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  Effekseer::ParameterEasingFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  result = (Effekseer::ParameterEasingFloat *)& ((arg1)->easing);
  *(Effekseer::ParameterEasingFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RingSingleParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RingSingleParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RingSingleParameter *)new Effekseer::RingSingleParameter();
  *(Effekseer::RingSingleParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RingSingleParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RingSingleParameter *arg1 = (Effekseer::RingSingleParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RingSingleParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingLocationParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationParameterCore_1PVA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingLocationParameter::PVA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationParameterCore_1Easing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingLocationParameter::Easing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingLocationParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RingLocationParameter *arg1 = (Effekseer::RingLocationParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingLocationParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RingLocationParameter *arg1 = (Effekseer::RingLocationParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingLocationParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationParameterCore_1easing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingLocationParameter *arg1 = (Effekseer::RingLocationParameter *) 0 ;
  Effekseer::easing_vector2d *arg2 = (Effekseer::easing_vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingLocationParameter **)&jarg1; 
  arg2 = *(Effekseer::easing_vector2d **)&jarg2; 
  if (arg1) (arg1)->easing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationParameterCore_1easing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingLocationParameter *arg1 = (Effekseer::RingLocationParameter *) 0 ;
  Effekseer::easing_vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingLocationParameter **)&jarg1; 
  result = (Effekseer::easing_vector2d *)& ((arg1)->easing);
  *(Effekseer::easing_vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RingLocationParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RingLocationParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RingLocationParameter *)new Effekseer::RingLocationParameter();
  *(Effekseer::RingLocationParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RingLocationParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RingLocationParameter *arg1 = (Effekseer::RingLocationParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RingLocationParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1Fixed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingColorParameter::Fixed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1Random_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingColorParameter::Random;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1Easing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingColorParameter::Easing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1Parameter_1DWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Effekseer::RingColorParameter::Parameter_DWORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->type)) *(int*)(void*)&((arg1)->type) = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1fixed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  Effekseer::Color *arg2 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  arg2 = *(Effekseer::Color **)&jarg2; 
  if (arg1) (arg1)->fixed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1fixed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  result = (Effekseer::Color *)& ((arg1)->fixed);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1random_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  Effekseer::random_color *arg2 = (Effekseer::random_color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  arg2 = *(Effekseer::random_color **)&jarg2; 
  if (arg1) (arg1)->random = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1random_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  Effekseer::random_color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  result = (Effekseer::random_color *)& ((arg1)->random);
  *(Effekseer::random_color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1easing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  Effekseer::easing_color *arg2 = (Effekseer::easing_color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  arg2 = *(Effekseer::easing_color **)&jarg2; 
  if (arg1) (arg1)->easing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorParameterCore_1easing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  Effekseer::easing_color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  result = (Effekseer::easing_color *)& ((arg1)->easing);
  *(Effekseer::easing_color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RingColorParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RingColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RingColorParameter *)new Effekseer::RingColorParameter();
  *(Effekseer::RingColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RingColorParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RingColorParameter *arg1 = (Effekseer::RingColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RingColorParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleValuesCore_1current_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::RingSingleValues *arg1 = (Effekseer::RingSingleValues *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleValues **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->current = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleValuesCore_1current_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::RingSingleValues *arg1 = (Effekseer::RingSingleValues *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleValues **)&jarg1; 
  result = (float) ((arg1)->current);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleValuesCore_1easing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingSingleValues *arg1 = (Effekseer::RingSingleValues *) 0 ;
  Effekseer::InstanceEasing< float > *arg2 = (Effekseer::InstanceEasing< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingSingleValues **)&jarg1; 
  arg2 = *(Effekseer::InstanceEasing< float > **)&jarg2; 
  if (arg1) (arg1)->easing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingSingleValuesCore_1easing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingSingleValues *arg1 = (Effekseer::RingSingleValues *) 0 ;
  Effekseer::InstanceEasing< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingSingleValues **)&jarg1; 
  result = (Effekseer::InstanceEasing< float > *)& ((arg1)->easing);
  *(Effekseer::InstanceEasing< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RingSingleValuesCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RingSingleValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RingSingleValues *)new Effekseer::RingSingleValues();
  *(Effekseer::RingSingleValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RingSingleValuesCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RingSingleValues *arg1 = (Effekseer::RingSingleValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RingSingleValues **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationValuesCore_1current_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingLocationValues *arg1 = (Effekseer::RingLocationValues *) 0 ;
  Effekseer::SIMD::Vec2f *arg2 = (Effekseer::SIMD::Vec2f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingLocationValues **)&jarg1; 
  arg2 = *(Effekseer::SIMD::Vec2f **)&jarg2; 
  if (arg1) (arg1)->current = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingLocationValuesCore_1current_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingLocationValues *arg1 = (Effekseer::RingLocationValues *) 0 ;
  Effekseer::SIMD::Vec2f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingLocationValues **)&jarg1; 
  result = (Effekseer::SIMD::Vec2f *)& ((arg1)->current);
  *(Effekseer::SIMD::Vec2f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RingLocationValuesCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RingLocationValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RingLocationValues *)new Effekseer::RingLocationValues();
  *(Effekseer::RingLocationValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RingLocationValuesCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RingLocationValues *arg1 = (Effekseer::RingLocationValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RingLocationValues **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorValuesCore_1current_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingColorValues *arg1 = (Effekseer::RingColorValues *) 0 ;
  Effekseer::Color *arg2 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingColorValues **)&jarg1; 
  arg2 = *(Effekseer::Color **)&jarg2; 
  if (arg1) (arg1)->current = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorValuesCore_1current_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingColorValues *arg1 = (Effekseer::RingColorValues *) 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingColorValues **)&jarg1; 
  result = (Effekseer::Color *)& ((arg1)->current);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorValuesCore_1original_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingColorValues *arg1 = (Effekseer::RingColorValues *) 0 ;
  Effekseer::Color *arg2 = (Effekseer::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingColorValues **)&jarg1; 
  arg2 = *(Effekseer::Color **)&jarg2; 
  if (arg1) (arg1)->original = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingColorValuesCore_1original_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingColorValues *arg1 = (Effekseer::RingColorValues *) 0 ;
  Effekseer::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingColorValues **)&jarg1; 
  result = (Effekseer::Color *)& ((arg1)->original);
  *(Effekseer::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RingColorValuesCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RingColorValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RingColorValues *)new Effekseer::RingColorValues();
  *(Effekseer::RingColorValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RingColorValuesCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RingColorValues *arg1 = (Effekseer::RingColorValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RingColorValues **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  Effekseer::RingShapeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  arg2 = (Effekseer::RingShapeType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  Effekseer::RingShapeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  result = (Effekseer::RingShapeType) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1StartingFade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->StartingFade = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1StartingFade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  result = (float) ((arg1)->StartingFade);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1EndingFade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EndingFade = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1EndingFade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  result = (float) ((arg1)->EndingFade);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1StartingAngle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  Effekseer::RingSingleParameter *arg2 = (Effekseer::RingSingleParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  arg2 = *(Effekseer::RingSingleParameter **)&jarg2; 
  if (arg1) (arg1)->StartingAngle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1StartingAngle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  Effekseer::RingSingleParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  result = (Effekseer::RingSingleParameter *)& ((arg1)->StartingAngle);
  *(Effekseer::RingSingleParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1EndingAngle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  Effekseer::RingSingleParameter *arg2 = (Effekseer::RingSingleParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  arg2 = *(Effekseer::RingSingleParameter **)&jarg2; 
  if (arg1) (arg1)->EndingAngle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_RingShapeParameterCore_1EndingAngle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  Effekseer::RingSingleParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  result = (Effekseer::RingSingleParameter *)& ((arg1)->EndingAngle);
  *(Effekseer::RingSingleParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1RingShapeParameterCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::RingShapeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::RingShapeParameter *)new Effekseer::RingShapeParameter();
  *(Effekseer::RingShapeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1RingShapeParameterCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::RingShapeParameter *arg1 = (Effekseer::RingShapeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::RingShapeParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1AlphaBlend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::AlphaBlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = (Effekseer::AlphaBlendType)jarg2; 
  if (arg1) (arg1)->AlphaBlend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1AlphaBlend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::AlphaBlendType) ((arg1)->AlphaBlend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1Billboard_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::BillboardType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = (Effekseer::BillboardType)jarg2; 
  if (arg1) (arg1)->Billboard = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1Billboard_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::BillboardType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::BillboardType) ((arg1)->Billboard);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1VertexCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->VertexCount = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1VertexCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (int32_t) ((arg1)->VertexCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1Shape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingShapeParameter *arg2 = (Effekseer::RingShapeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = *(Effekseer::RingShapeParameter **)&jarg2; 
  if (arg1) (arg1)->Shape = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1Shape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingShapeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::RingShapeParameter *)& ((arg1)->Shape);
  *(Effekseer::RingShapeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1OuterLocation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingLocationParameter *arg2 = (Effekseer::RingLocationParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = *(Effekseer::RingLocationParameter **)&jarg2; 
  if (arg1) (arg1)->OuterLocation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1OuterLocation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingLocationParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::RingLocationParameter *)& ((arg1)->OuterLocation);
  *(Effekseer::RingLocationParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1InnerLocation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingLocationParameter *arg2 = (Effekseer::RingLocationParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = *(Effekseer::RingLocationParameter **)&jarg2; 
  if (arg1) (arg1)->InnerLocation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1InnerLocation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingLocationParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::RingLocationParameter *)& ((arg1)->InnerLocation);
  *(Effekseer::RingLocationParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1CenterRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingSingleParameter *arg2 = (Effekseer::RingSingleParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = *(Effekseer::RingSingleParameter **)&jarg2; 
  if (arg1) (arg1)->CenterRatio = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1CenterRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingSingleParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::RingSingleParameter *)& ((arg1)->CenterRatio);
  *(Effekseer::RingSingleParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1OuterColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingColorParameter *arg2 = (Effekseer::RingColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = *(Effekseer::RingColorParameter **)&jarg2; 
  if (arg1) (arg1)->OuterColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1OuterColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::RingColorParameter *)& ((arg1)->OuterColor);
  *(Effekseer::RingColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1CenterColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingColorParameter *arg2 = (Effekseer::RingColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = *(Effekseer::RingColorParameter **)&jarg2; 
  if (arg1) (arg1)->CenterColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1CenterColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::RingColorParameter *)& ((arg1)->CenterColor);
  *(Effekseer::RingColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1InnerColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingColorParameter *arg2 = (Effekseer::RingColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = *(Effekseer::RingColorParameter **)&jarg2; 
  if (arg1) (arg1)->InnerColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1InnerColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::RingColorParameter *)& ((arg1)->InnerColor);
  *(Effekseer::RingColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1RingTexture_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RingTexture = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1RingTexture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (int) ((arg1)->RingTexture);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1nodeParameter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingRenderer::NodeParameter *arg2 = (Effekseer::RingRenderer::NodeParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  arg2 = *(Effekseer::RingRenderer::NodeParameter **)&jarg2; 
  if (arg1) (arg1)->nodeParameter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1nodeParameter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  Effekseer::RingRenderer::NodeParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  result = (Effekseer::RingRenderer::NodeParameter *)& ((arg1)->nodeParameter);
  *(Effekseer::RingRenderer::NodeParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectNodeRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Effekseer::Effect *arg1 = (Effekseer::Effect *) 0 ;
  unsigned char **arg2 = 0 ;
  Effekseer::EffectNodeRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Effect **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char *& reference is null");
    return 0;
  } 
  result = (Effekseer::EffectNodeRing *)new Effekseer::EffectNodeRing(arg1,*arg2);
  *(Effekseer::EffectNodeRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectNodeRing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectNodeRing *arg1 = (Effekseer::EffectNodeRing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectNodeRing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1AlphaBlend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::AlphaBlendType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  arg2 = (Effekseer::AlphaBlendType)jarg2; 
  if (arg1) (arg1)->AlphaBlend = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1AlphaBlend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::AlphaBlendType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  result = (Effekseer::AlphaBlendType) ((arg1)->AlphaBlend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1ModelIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->ModelIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1ModelIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  result = (int32_t) ((arg1)->ModelIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1NormalTextureIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->NormalTextureIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1NormalTextureIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  result = (int32_t) ((arg1)->NormalTextureIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1Billboard_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::BillboardType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  arg2 = (Effekseer::BillboardType)jarg2; 
  if (arg1) (arg1)->Billboard = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1Billboard_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::BillboardType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  result = (Effekseer::BillboardType) ((arg1)->Billboard);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1Lighting_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Lighting = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1Lighting_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  result = (bool) ((arg1)->Lighting);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1Culling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::CullingType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  arg2 = (Effekseer::CullingType)jarg2; 
  if (arg1) (arg1)->Culling = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1Culling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::CullingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  result = (Effekseer::CullingType) ((arg1)->Culling);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1AllColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::StandardColorParameter *arg2 = (Effekseer::StandardColorParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  arg2 = *(Effekseer::StandardColorParameter **)&jarg2; 
  if (arg1) (arg1)->AllColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1AllColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::StandardColorParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  result = (Effekseer::StandardColorParameter *)& ((arg1)->AllColor);
  *(Effekseer::StandardColorParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1Mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::ModelReferenceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  arg2 = (Effekseer::ModelReferenceType)jarg2; 
  if (arg1) (arg1)->Mode = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1Mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  Effekseer::ModelReferenceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  result = (Effekseer::ModelReferenceType) ((arg1)->Mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffectNodeModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Effekseer::Effect *arg1 = (Effekseer::Effect *) 0 ;
  unsigned char **arg2 = 0 ;
  Effekseer::EffectNodeModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Effect **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char *& reference is null");
    return 0;
  } 
  result = (Effekseer::EffectNodeModel *)new Effekseer::EffectNodeModel(arg1,*arg2);
  *(Effekseer::EffectNodeModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffectNodeModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::EffectNodeModel *arg1 = (Effekseer::EffectNodeModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::EffectNodeModel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1UpdateParameter_1DeltaFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::Manager::UpdateParameter *arg1 = (Effekseer::Manager::UpdateParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::UpdateParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DeltaFrame = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1UpdateParameter_1DeltaFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::Manager::UpdateParameter *arg1 = (Effekseer::Manager::UpdateParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::UpdateParameter **)&jarg1; 
  result = (float) ((arg1)->DeltaFrame);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1UpdateParameter_1UpdateInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Effekseer::Manager::UpdateParameter *arg1 = (Effekseer::Manager::UpdateParameter *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::UpdateParameter **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->UpdateInterval = arg2;
}


SWIGEXPORT jfloat JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1UpdateParameter_1UpdateInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Effekseer::Manager::UpdateParameter *arg1 = (Effekseer::Manager::UpdateParameter *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::UpdateParameter **)&jarg1; 
  result = (float) ((arg1)->UpdateInterval);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1UpdateParameter_1SyncUpdate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::Manager::UpdateParameter *arg1 = (Effekseer::Manager::UpdateParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::UpdateParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SyncUpdate = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1UpdateParameter_1SyncUpdate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::Manager::UpdateParameter *arg1 = (Effekseer::Manager::UpdateParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::UpdateParameter **)&jarg1; 
  result = (bool) ((arg1)->SyncUpdate);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffekseerManagerParameters_1UpdateParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::Manager::UpdateParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Manager::UpdateParameter *)new Effekseer::Manager::UpdateParameter();
  *(Effekseer::Manager::UpdateParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffekseerManagerParameters_1UpdateParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::Manager::UpdateParameter *arg1 = (Effekseer::Manager::UpdateParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::Manager::UpdateParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1DrawParameter_1CameraPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  Effekseer::Vector3D *arg2 = (Effekseer::Vector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  arg2 = *(Effekseer::Vector3D **)&jarg2; 
  if (arg1) (arg1)->CameraPosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1DrawParameter_1CameraPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  Effekseer::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  result = (Effekseer::Vector3D *)& ((arg1)->CameraPosition);
  *(Effekseer::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1DrawParameter_1CameraFrontDirection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  Effekseer::Vector3D *arg2 = (Effekseer::Vector3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  arg2 = *(Effekseer::Vector3D **)&jarg2; 
  if (arg1) (arg1)->CameraFrontDirection = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1DrawParameter_1CameraFrontDirection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  Effekseer::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  result = (Effekseer::Vector3D *)& ((arg1)->CameraFrontDirection);
  *(Effekseer::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1DrawParameter_1CameraCullingMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CameraCullingMask = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1DrawParameter_1CameraCullingMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  result = (int32_t) ((arg1)->CameraCullingMask);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1DrawParameter_1IsSortingEffectsEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsSortingEffectsEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffekseerManagerParameters_1DrawParameter_1IsSortingEffectsEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  result = (bool) ((arg1)->IsSortingEffectsEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_new_1EffekseerManagerParameters_1DrawParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Effekseer::Manager::DrawParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Effekseer::Manager::DrawParameter *)new Effekseer::Manager::DrawParameter();
  *(Effekseer::Manager::DrawParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_delete_1EffekseerManagerParameters_1DrawParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Effekseer::Manager::DrawParameter *arg1 = (Effekseer::Manager::DrawParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Effekseer::Manager::DrawParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeImplemented_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Effekseer::EffectNode **)&baseptr = *(Effekseer::EffectNodeImplemented **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRoot_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Effekseer::EffectNodeImplemented **)&baseptr = *(Effekseer::EffectNodeRoot **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeSprite_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Effekseer::EffectNodeImplemented **)&baseptr = *(Effekseer::EffectNodeSprite **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRibbon_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Effekseer::EffectNodeImplemented **)&baseptr = *(Effekseer::EffectNodeRibbon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeTrack_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Effekseer::EffectNodeImplemented **)&baseptr = *(Effekseer::EffectNodeTrack **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeRing_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Effekseer::EffectNodeImplemented **)&baseptr = *(Effekseer::EffectNodeRing **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_srjohnathan_gdx_effekseer_core_GDXJNI_EffectNodeModel_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Effekseer::EffectNodeImplemented **)&baseptr = *(Effekseer::EffectNodeModel **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

